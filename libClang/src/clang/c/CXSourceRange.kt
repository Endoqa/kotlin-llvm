// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
value class CXSourceRange(
    val `$mem`: MemorySegment,
) {
    val ptr_data: NativeArray<Pointer<Unit>>
        get() = ptr_dataHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    var begin_int_data: UInt
        get() = (begin_int_dataHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            begin_int_dataHandle.set(this.`$mem`, 0L, value.toInt())
        }

    var end_int_data: UInt
        get() = (end_int_dataHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            end_int_dataHandle.set(this.`$mem`, 0L, value.toInt())
        }

    constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    companion object {
        val layout: StructLayout = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(2L, `$RuntimeHelper`.POINTER).withName("ptr_data"),
            ValueLayout.JAVA_INT.withName("begin_int_data"),
            ValueLayout.JAVA_INT.withName("end_int_data"),
        ).withName("CXSourceRange")

        @JvmField
        val ptr_dataHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("ptr_data"))

        @JvmField
        val begin_int_dataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("begin_int_data"))

        @JvmField
        val end_int_dataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("end_int_data"))

        @JvmStatic
        fun allocate(alloc: SegmentAllocator): CXSourceRange =
            CXSourceRange(alloc.allocate(layout))
    }
}
