// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
value class CXIdxEntityInfo(
    val `$mem`: MemorySegment,
) {
    var kind: CXIdxEntityKind
        get() = CXIdxEntityKind.fromInt(kindHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            kindHandle.set(this.`$mem`, 0L, value.value)
        }

    var templateKind: CXIdxEntityCXXTemplateKind
        get() = CXIdxEntityCXXTemplateKind.fromInt(
            templateKindHandle.get(
                this.`$mem`,
                0L
            ) as Int
        )
        set(`value`) {
            templateKindHandle.set(this.`$mem`, 0L, value.value)
        }

    var lang: CXIdxEntityLanguage
        get() = CXIdxEntityLanguage.fromInt(langHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            langHandle.set(this.`$mem`, 0L, value.value)
        }

    var name: Pointer<Byte>
        get() = nameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nameHandle.set(this.`$mem`, 0L, value)
        }

    var USR: Pointer<Byte>
        get() = USRHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            USRHandle.set(this.`$mem`, 0L, value)
        }

    var cursor: CXCursor
        get() = CXCursor(cursorHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.cursor.`$mem`, 0L, CXCursor.layout.byteSize())
        }

    var attributes: Pointer<Pointer<CXIdxAttrInfo>>
        get() = attributesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            attributesHandle.set(this.`$mem`, 0L, value)
        }

    var numAttributes: UInt
        get() = (numAttributesHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            numAttributesHandle.set(this.`$mem`, 0L, value.toInt())
        }

    constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    companion object {
        val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("kind"),
            ValueLayout.JAVA_INT.withName("templateKind"),
            ValueLayout.JAVA_INT.withName("lang"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("name"),
            `$RuntimeHelper`.POINTER.withName("USR"),
            CXCursor.layout.withName("cursor"),
            `$RuntimeHelper`.POINTER.withName("attributes"),
            ValueLayout.JAVA_INT.withName("numAttributes"),
            MemoryLayout.paddingLayout(4),
        ).withName("CXIdxEntityInfo")

        @JvmField
        val kindHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("kind"))

        @JvmField
        val templateKindHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("templateKind"))

        @JvmField
        val langHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("lang"))

        @JvmField
        val nameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("name"))

        @JvmField
        val USRHandle: VarHandle = layout.varHandle(MemoryLayout.PathElement.groupElement("USR"))

        @JvmField
        val cursorHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("cursor"))

        @JvmField
        val attributesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("attributes"))

        @JvmField
        val numAttributesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numAttributes"))

        @JvmStatic
        fun allocate(alloc: SegmentAllocator): CXIdxEntityInfo =
            CXIdxEntityInfo(alloc.allocate(layout))
    }
}
