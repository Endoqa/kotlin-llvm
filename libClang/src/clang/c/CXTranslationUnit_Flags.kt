// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

enum class CXTranslationUnit_Flags(
    val `value`: Int,
) {
    None(0x00000000),
    DetailedPreprocessingRecord(0x00000001),
    Incomplete(0x00000002),
    PrecompiledPreamble(0x00000004),
    CacheCompletionResults(0x00000008),
    ForSerialization(0x00000010),
    CXXChainedPCH(0x00000020),
    SkipFunctionBodies(0x00000040),
    IncludeBriefCommentsInCodeCompletion(0x00000080),
    CreatePreambleOnFirstParse(0x00000100),
    KeepGoing(0x00000200),
    SingleFileParse(0x00000400),
    LimitSkipFunctionBodiesToPreamble(0x00000800),
    IncludeAttributedTypes(0x00001000),
    VisitImplicitAttributes(0x00002000),
    IgnoreNonErrorsFromIncludedFiles(0x00004000),
    RetainExcludedConditionalBlocks(0x00008000),
    ;

    companion object {
        @JvmStatic
        val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXTranslationUnit_Flags::class.java,
            "fromInt",
            MethodType.methodType(CXTranslationUnit_Flags::class.java, Int::class.java)
        )

        @JvmStatic
        val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXTranslationUnit_Flags::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        fun fromInt(`value`: Int): CXTranslationUnit_Flags = when (value) {
            0x00000000 -> None
            0x00000001 -> DetailedPreprocessingRecord
            0x00000002 -> Incomplete
            0x00000004 -> PrecompiledPreamble
            0x00000008 -> CacheCompletionResults
            0x00000010 -> ForSerialization
            0x00000020 -> CXXChainedPCH
            0x00000040 -> SkipFunctionBodies
            0x00000080 -> IncludeBriefCommentsInCodeCompletion
            0x00000100 -> CreatePreambleOnFirstParse
            0x00000200 -> KeepGoing
            0x00000400 -> SingleFileParse
            0x00000800 -> LimitSkipFunctionBodiesToPreamble
            0x00001000 -> IncludeAttributedTypes
            0x00002000 -> VisitImplicitAttributes
            0x00004000 -> IgnoreNonErrorsFromIncludedFiles
            0x00008000 -> RetainExcludedConditionalBlocks
            else -> error("enum not found")
        }
    }
}
