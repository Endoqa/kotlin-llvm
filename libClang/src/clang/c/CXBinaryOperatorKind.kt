// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

enum class CXBinaryOperatorKind(
    val `value`: Int,
) {
    Invalid(0x00000000),
    PtrMemD(0x00000001),
    PtrMemI(0x00000002),
    Mul(0x00000003),
    Div(0x00000004),
    Rem(0x00000005),
    Add(0x00000006),
    Sub(0x00000007),
    Shl(0x00000008),
    Shr(0x00000009),
    Cmp(0x0000000a),
    LT(0x0000000b),
    GT(0x0000000c),
    LE(0x0000000d),
    GE(0x0000000e),
    EQ(0x0000000f),
    NE(0x00000010),
    And(0x00000011),
    Xor(0x00000012),
    Or(0x00000013),
    LAnd(0x00000014),
    LOr(0x00000015),
    Assign(0x00000016),
    MulAssign(0x00000017),
    DivAssign(0x00000018),
    RemAssign(0x00000019),
    AddAssign(0x0000001a),
    SubAssign(0x0000001b),
    ShlAssign(0x0000001c),
    ShrAssign(0x0000001d),
    AndAssign(0x0000001e),
    XorAssign(0x0000001f),
    OrAssign(0x00000020),
    Comma(0x00000021),
    ;

    companion object {
        @JvmStatic
        val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXBinaryOperatorKind::class.java,
            "fromInt",
            MethodType.methodType(CXBinaryOperatorKind::class.java, Int::class.java)
        )

        @JvmStatic
        val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXBinaryOperatorKind::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        fun fromInt(`value`: Int): CXBinaryOperatorKind = when (value) {
            0x00000000 -> Invalid
            0x00000001 -> PtrMemD
            0x00000002 -> PtrMemI
            0x00000003 -> Mul
            0x00000004 -> Div
            0x00000005 -> Rem
            0x00000006 -> Add
            0x00000007 -> Sub
            0x00000008 -> Shl
            0x00000009 -> Shr
            0x0000000a -> Cmp
            0x0000000b -> LT
            0x0000000c -> GT
            0x0000000d -> LE
            0x0000000e -> GE
            0x0000000f -> EQ
            0x00000010 -> NE
            0x00000011 -> And
            0x00000012 -> Xor
            0x00000013 -> Or
            0x00000014 -> LAnd
            0x00000015 -> LOr
            0x00000016 -> Assign
            0x00000017 -> MulAssign
            0x00000018 -> DivAssign
            0x00000019 -> RemAssign
            0x0000001a -> AddAssign
            0x0000001b -> SubAssign
            0x0000001c -> ShlAssign
            0x0000001d -> ShrAssign
            0x0000001e -> AndAssign
            0x0000001f -> XorAssign
            0x00000020 -> OrAssign
            0x00000021 -> Comma
            else -> error("enum not found")
        }
    }
}
