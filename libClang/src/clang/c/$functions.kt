// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator

fun clang_getCString(string: CXString): Pointer<Byte> =
    `clang_getCString$mh`.invokeExact(string.`$mem`) as MemorySegment

fun clang_disposeString(string: CXString): Unit =
    `clang_disposeString$mh`.invokeExact(string.`$mem`) as Unit

fun clang_disposeStringSet(`set`: Pointer<CXStringSet>): Unit =
    `clang_disposeStringSet$mh`.invokeExact(`set`) as Unit

fun clang_getBuildSessionTimestamp(): ULong =
    (`clang_getBuildSessionTimestamp$mh`.invokeExact() as Long).toULong()

fun clang_VirtualFileOverlay_create(options: UInt): CXVirtualFileOverlay =
    `clang_VirtualFileOverlay_create$mh`.invokeExact(options.toInt()) as MemorySegment

fun clang_VirtualFileOverlay_addFileMapping(
    `$p0`: CXVirtualFileOverlay,
    virtualPath: Pointer<Byte>,
    realPath: Pointer<Byte>,
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_VirtualFileOverlay_addFileMapping$mh`.invokeExact(`$p0`, virtualPath, realPath)
                as Int
    )

fun clang_VirtualFileOverlay_setCaseSensitivity(
    `$p0`: CXVirtualFileOverlay,
    caseSensitive: Int
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_VirtualFileOverlay_setCaseSensitivity$mh`.invokeExact(`$p0`, caseSensitive)
                as Int
    )

fun clang_VirtualFileOverlay_writeToBuffer(
    `$p0`: CXVirtualFileOverlay,
    options: UInt,
    out_buffer_ptr: Pointer<Pointer<Byte>>,
    out_buffer_size: Pointer<UInt>,
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_VirtualFileOverlay_writeToBuffer$mh`.invokeExact(
            `$p0`,
            options.toInt(),
            out_buffer_ptr,
            out_buffer_size,
        )
                as Int
    )

fun clang_free(buffer: Pointer<Unit>): Unit = `clang_free$mh`.invokeExact(buffer) as Unit

fun clang_VirtualFileOverlay_dispose(`$p0`: CXVirtualFileOverlay): Unit =
    `clang_VirtualFileOverlay_dispose$mh`.invokeExact(`$p0`) as Unit

fun clang_ModuleMapDescriptor_create(options: UInt): CXModuleMapDescriptor =
    `clang_ModuleMapDescriptor_create$mh`.invokeExact(options.toInt()) as MemorySegment

fun clang_ModuleMapDescriptor_setFrameworkModuleName(
    `$p0`: CXModuleMapDescriptor,
    name: Pointer<Byte>
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_ModuleMapDescriptor_setFrameworkModuleName$mh`.invokeExact(`$p0`, name)
                as Int
    )

fun clang_ModuleMapDescriptor_setUmbrellaHeader(
    `$p0`: CXModuleMapDescriptor,
    name: Pointer<Byte>
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_ModuleMapDescriptor_setUmbrellaHeader$mh`.invokeExact(`$p0`, name) as
                Int
    )

fun clang_ModuleMapDescriptor_writeToBuffer(
    `$p0`: CXModuleMapDescriptor,
    options: UInt,
    out_buffer_ptr: Pointer<Pointer<Byte>>,
    out_buffer_size: Pointer<UInt>,
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_ModuleMapDescriptor_writeToBuffer$mh`.invokeExact(
            `$p0`,
            options.toInt(),
            out_buffer_ptr,
            out_buffer_size,
        )
                as Int
    )

fun clang_ModuleMapDescriptor_dispose(`$p0`: CXModuleMapDescriptor): Unit =
    `clang_ModuleMapDescriptor_dispose$mh`.invokeExact(`$p0`) as Unit

context(SegmentAllocator)
fun clang_getFileName(SFile: CXFile): CXString =
    CXString(`clang_getFileName$mh`.invokeExact(this@SegmentAllocator, SFile) as MemorySegment)

fun clang_getFileUniqueID(`file`: CXFile, outID: Pointer<CXFileUniqueID>): Int =
    `clang_getFileUniqueID$mh`.invokeExact(`file`, outID) as Int

fun clang_File_isEqual(file1: CXFile, file2: CXFile): Int =
    `clang_File_isEqual$mh`.invokeExact(file1, file2) as Int

context(SegmentAllocator)
fun clang_File_tryGetRealPathName(`file`: CXFile): CXString =
    CXString(
        `clang_File_tryGetRealPathName$mh`.invokeExact(this@SegmentAllocator, `file`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getNullLocation(): CXSourceLocation =
    CXSourceLocation(
        `clang_getNullLocation$mh`.invokeExact(this@SegmentAllocator) as
                MemorySegment
    )

fun clang_equalLocations(loc1: CXSourceLocation, loc2: CXSourceLocation): UInt =
    (`clang_equalLocations$mh`.invokeExact(loc1.`$mem`, loc2.`$mem`) as Int).toUInt()

fun clang_Location_isInSystemHeader(location: CXSourceLocation): Int =
    `clang_Location_isInSystemHeader$mh`.invokeExact(location.`$mem`) as Int

fun clang_Location_isFromMainFile(location: CXSourceLocation): Int =
    `clang_Location_isFromMainFile$mh`.invokeExact(location.`$mem`) as Int

context(SegmentAllocator)
fun clang_getNullRange(): CXSourceRange =
    CXSourceRange(`clang_getNullRange$mh`.invokeExact(this@SegmentAllocator) as MemorySegment)

context(SegmentAllocator)
fun clang_getRange(begin: CXSourceLocation, end: CXSourceLocation): CXSourceRange =
    CXSourceRange(
        `clang_getRange$mh`.invokeExact(this@SegmentAllocator, begin.`$mem`, end.`$mem`) as
                MemorySegment
    )

fun clang_equalRanges(range1: CXSourceRange, range2: CXSourceRange): UInt =
    (`clang_equalRanges$mh`.invokeExact(range1.`$mem`, range2.`$mem`) as Int).toUInt()

fun clang_Range_isNull(range: CXSourceRange): Int =
    `clang_Range_isNull$mh`.invokeExact(range.`$mem`) as Int

fun clang_getExpansionLocation(
    location: CXSourceLocation,
    `file`: Pointer<CXFile>,
    line: Pointer<UInt>,
    column: Pointer<UInt>,
    offset: Pointer<UInt>,
): Unit = `clang_getExpansionLocation$mh`.invokeExact(location.`$mem`, `file`, line, column, offset) as
        Unit

fun clang_getPresumedLocation(
    location: CXSourceLocation,
    filename: Pointer<CXString>,
    line: Pointer<UInt>,
    column: Pointer<UInt>,
): Unit = `clang_getPresumedLocation$mh`.invokeExact(location.`$mem`, filename, line, column) as Unit

fun clang_getInstantiationLocation(
    location: CXSourceLocation,
    `file`: Pointer<CXFile>,
    line: Pointer<UInt>,
    column: Pointer<UInt>,
    offset: Pointer<UInt>,
): Unit =
    `clang_getInstantiationLocation$mh`.invokeExact(location.`$mem`, `file`, line, column, offset) as
            Unit

fun clang_getSpellingLocation(
    location: CXSourceLocation,
    `file`: Pointer<CXFile>,
    line: Pointer<UInt>,
    column: Pointer<UInt>,
    offset: Pointer<UInt>,
): Unit = `clang_getSpellingLocation$mh`.invokeExact(location.`$mem`, `file`, line, column, offset) as
        Unit

fun clang_getFileLocation(
    location: CXSourceLocation,
    `file`: Pointer<CXFile>,
    line: Pointer<UInt>,
    column: Pointer<UInt>,
    offset: Pointer<UInt>,
): Unit = `clang_getFileLocation$mh`.invokeExact(location.`$mem`, `file`, line, column, offset) as Unit

context(SegmentAllocator)
fun clang_getRangeStart(range: CXSourceRange): CXSourceLocation =
    CXSourceLocation(
        `clang_getRangeStart$mh`.invokeExact(this@SegmentAllocator, range.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getRangeEnd(range: CXSourceRange): CXSourceLocation =
    CXSourceLocation(
        `clang_getRangeEnd$mh`.invokeExact(this@SegmentAllocator, range.`$mem`) as
                MemorySegment
    )

fun clang_disposeSourceRangeList(ranges: Pointer<CXSourceRangeList>): Unit =
    `clang_disposeSourceRangeList$mh`.invokeExact(ranges) as Unit

fun clang_getNumDiagnosticsInSet(Diags: CXDiagnosticSet): UInt =
    (`clang_getNumDiagnosticsInSet$mh`.invokeExact(Diags) as Int).toUInt()

fun clang_getDiagnosticInSet(Diags: CXDiagnosticSet, Index: UInt): CXDiagnostic =
    `clang_getDiagnosticInSet$mh`.invokeExact(Diags, Index.toInt()) as MemorySegment

fun clang_loadDiagnostics(
    `file`: Pointer<Byte>,
    error: Pointer<CXLoadDiag_Error>,
    errorString: Pointer<CXString>,
): CXDiagnosticSet = `clang_loadDiagnostics$mh`.invokeExact(`file`, error, errorString) as
        MemorySegment

fun clang_disposeDiagnosticSet(Diags: CXDiagnosticSet): Unit =
    `clang_disposeDiagnosticSet$mh`.invokeExact(Diags) as Unit

fun clang_getChildDiagnostics(D: CXDiagnostic): CXDiagnosticSet =
    `clang_getChildDiagnostics$mh`.invokeExact(D) as MemorySegment

fun clang_disposeDiagnostic(Diagnostic: CXDiagnostic): Unit =
    `clang_disposeDiagnostic$mh`.invokeExact(Diagnostic) as Unit

context(SegmentAllocator)
fun clang_formatDiagnostic(Diagnostic: CXDiagnostic, Options: UInt): CXString =
    CXString(
        `clang_formatDiagnostic$mh`.invokeExact(this@SegmentAllocator, Diagnostic, Options.toInt())
                as MemorySegment
    )

fun clang_defaultDiagnosticDisplayOptions(): UInt =
    (`clang_defaultDiagnosticDisplayOptions$mh`.invokeExact() as Int).toUInt()

fun clang_getDiagnosticSeverity(`$p0`: CXDiagnostic): CXDiagnosticSeverity =
    CXDiagnosticSeverity.fromInt(`clang_getDiagnosticSeverity$mh`.invokeExact(`$p0`) as Int)

context(SegmentAllocator)
fun clang_getDiagnosticLocation(`$p0`: CXDiagnostic): CXSourceLocation =
    CXSourceLocation(
        `clang_getDiagnosticLocation$mh`.invokeExact(this@SegmentAllocator, `$p0`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getDiagnosticSpelling(`$p0`: CXDiagnostic): CXString =
    CXString(
        `clang_getDiagnosticSpelling$mh`.invokeExact(this@SegmentAllocator, `$p0`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getDiagnosticOption(Diag: CXDiagnostic, Disable: Pointer<CXString>): CXString =
    CXString(
        `clang_getDiagnosticOption$mh`.invokeExact(this@SegmentAllocator, Diag, Disable) as
                MemorySegment
    )

fun clang_getDiagnosticCategory(`$p0`: CXDiagnostic): UInt =
    (`clang_getDiagnosticCategory$mh`.invokeExact(`$p0`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getDiagnosticCategoryName(Category: UInt): CXString =
    CXString(
        `clang_getDiagnosticCategoryName$mh`.invokeExact(this@SegmentAllocator, Category.toInt())
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getDiagnosticCategoryText(`$p0`: CXDiagnostic): CXString =
    CXString(
        `clang_getDiagnosticCategoryText$mh`.invokeExact(this@SegmentAllocator, `$p0`) as
                MemorySegment
    )

fun clang_getDiagnosticNumRanges(`$p0`: CXDiagnostic): UInt =
    (`clang_getDiagnosticNumRanges$mh`.invokeExact(`$p0`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getDiagnosticRange(Diagnostic: CXDiagnostic, Range: UInt): CXSourceRange =
    CXSourceRange(
        `clang_getDiagnosticRange$mh`.invokeExact(this@SegmentAllocator, Diagnostic, Range.toInt())
                as MemorySegment
    )

fun clang_getDiagnosticNumFixIts(Diagnostic: CXDiagnostic): UInt =
    (`clang_getDiagnosticNumFixIts$mh`.invokeExact(Diagnostic) as Int).toUInt()

context(SegmentAllocator)
fun clang_getDiagnosticFixIt(
    Diagnostic: CXDiagnostic,
    FixIt: UInt,
    ReplacementRange: Pointer<CXSourceRange>,
): CXString =
    CXString(
        `clang_getDiagnosticFixIt$mh`.invokeExact(this@SegmentAllocator, Diagnostic, FixIt.toInt(), ReplacementRange)
                as MemorySegment
    )

fun clang_createIndex(excludeDeclarationsFromPCH: Int, displayDiagnostics: Int): CXIndex =
    `clang_createIndex$mh`.invokeExact(excludeDeclarationsFromPCH, displayDiagnostics) as
            MemorySegment

fun clang_disposeIndex(index: CXIndex): Unit = `clang_disposeIndex$mh`.invokeExact(index) as
        Unit

fun clang_CXIndex_setGlobalOptions(`$p0`: CXIndex, options: UInt): Unit =
    `clang_CXIndex_setGlobalOptions$mh`.invokeExact(`$p0`, options.toInt()) as Unit

fun clang_CXIndex_getGlobalOptions(`$p0`: CXIndex): UInt =
    (`clang_CXIndex_getGlobalOptions$mh`.invokeExact(`$p0`) as Int).toUInt()

fun clang_CXIndex_setInvocationEmissionPathOption(`$p0`: CXIndex, Path: Pointer<Byte>): Unit =
    `clang_CXIndex_setInvocationEmissionPathOption$mh`.invokeExact(`$p0`, Path) as Unit

fun clang_isFileMultipleIncludeGuarded(tu: CXTranslationUnit, `file`: CXFile): UInt =
    (`clang_isFileMultipleIncludeGuarded$mh`.invokeExact(tu, `file`) as Int).toUInt()

fun clang_getFile(tu: CXTranslationUnit, file_name: Pointer<Byte>): CXFile =
    `clang_getFile$mh`.invokeExact(tu, file_name) as MemorySegment

fun clang_getFileContents(
    tu: CXTranslationUnit,
    `file`: CXFile,
    size: Pointer<ULong>,
): Pointer<Byte> = `clang_getFileContents$mh`.invokeExact(tu, `file`, size) as MemorySegment

context(SegmentAllocator)
fun clang_getLocation(
    tu: CXTranslationUnit,
    `file`: CXFile,
    line: UInt,
    column: UInt,
): CXSourceLocation =
    CXSourceLocation(
        `clang_getLocation$mh`.invokeExact(this@SegmentAllocator, tu, `file`, line.toInt(), column.toInt())
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getLocationForOffset(
    tu: CXTranslationUnit,
    `file`: CXFile,
    offset: UInt,
): CXSourceLocation =
    CXSourceLocation(
        `clang_getLocationForOffset$mh`.invokeExact(this@SegmentAllocator, tu, `file`, offset.toInt())
                as MemorySegment
    )

fun clang_getSkippedRanges(tu: CXTranslationUnit, `file`: CXFile): Pointer<CXSourceRangeList> =
    `clang_getSkippedRanges$mh`.invokeExact(tu, `file`) as MemorySegment

fun clang_getAllSkippedRanges(tu: CXTranslationUnit): Pointer<CXSourceRangeList> =
    `clang_getAllSkippedRanges$mh`.invokeExact(tu) as MemorySegment

fun clang_getNumDiagnostics(Unit: CXTranslationUnit): UInt =
    (`clang_getNumDiagnostics$mh`.invokeExact(Unit) as Int).toUInt()

fun clang_getDiagnostic(Unit: CXTranslationUnit, Index: UInt): CXDiagnostic =
    `clang_getDiagnostic$mh`.invokeExact(Unit, Index.toInt()) as MemorySegment

fun clang_getDiagnosticSetFromTU(Unit: CXTranslationUnit): CXDiagnosticSet =
    `clang_getDiagnosticSetFromTU$mh`.invokeExact(Unit) as MemorySegment

context(SegmentAllocator)
fun clang_getTranslationUnitSpelling(CTUnit: CXTranslationUnit): CXString =
    CXString(
        `clang_getTranslationUnitSpelling$mh`.invokeExact(this@SegmentAllocator, CTUnit) as
                MemorySegment
    )

fun clang_createTranslationUnitFromSourceFile(
    CIdx: CXIndex,
    source_filename: Pointer<Byte>,
    num_clang_command_line_args: Int,
    clang_command_line_args: Pointer<Pointer<Byte>>,
    num_unsaved_files: UInt,
    unsaved_files: Pointer<CXUnsavedFile>,
): CXTranslationUnit =
    `clang_createTranslationUnitFromSourceFile$mh`.invokeExact(
        CIdx,
        source_filename,
        num_clang_command_line_args,
        clang_command_line_args,
        num_unsaved_files.toInt(),
        unsaved_files,
    )
            as MemorySegment

fun clang_createTranslationUnit(CIdx: CXIndex, ast_filename: Pointer<Byte>):
        CXTranslationUnit = `clang_createTranslationUnit$mh`.invokeExact(CIdx, ast_filename) as
        MemorySegment

fun clang_createTranslationUnit2(
    CIdx: CXIndex,
    ast_filename: Pointer<Byte>,
    out_TU: Pointer<CXTranslationUnit>,
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_createTranslationUnit2$mh`.invokeExact(CIdx, ast_filename, out_TU) as
                Int
    )

fun clang_defaultEditingTranslationUnitOptions(): UInt =
    (`clang_defaultEditingTranslationUnitOptions$mh`.invokeExact() as Int).toUInt()

fun clang_parseTranslationUnit(
    CIdx: CXIndex,
    source_filename: Pointer<Byte>,
    command_line_args: Pointer<Pointer<Byte>>,
    num_command_line_args: Int,
    unsaved_files: Pointer<CXUnsavedFile>,
    num_unsaved_files: UInt,
    options: UInt,
): CXTranslationUnit =
    `clang_parseTranslationUnit$mh`.invokeExact(
        CIdx,
        source_filename,
        command_line_args,
        num_command_line_args,
        unsaved_files,
        num_unsaved_files.toInt(),
        options.toInt(),
    )
            as MemorySegment

fun clang_parseTranslationUnit2(
    CIdx: CXIndex,
    source_filename: Pointer<Byte>,
    command_line_args: Pointer<Pointer<Byte>>,
    num_command_line_args: Int,
    unsaved_files: Pointer<CXUnsavedFile>,
    num_unsaved_files: UInt,
    options: UInt,
    out_TU: Pointer<CXTranslationUnit>,
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_parseTranslationUnit2$mh`.invokeExact(
            CIdx,
            source_filename,
            command_line_args,
            num_command_line_args,
            unsaved_files,
            num_unsaved_files.toInt(),
            options.toInt(),
            out_TU,
        )
                as Int
    )

fun clang_parseTranslationUnit2FullArgv(
    CIdx: CXIndex,
    source_filename: Pointer<Byte>,
    command_line_args: Pointer<Pointer<Byte>>,
    num_command_line_args: Int,
    unsaved_files: Pointer<CXUnsavedFile>,
    num_unsaved_files: UInt,
    options: UInt,
    out_TU: Pointer<CXTranslationUnit>,
): CXErrorCode =
    CXErrorCode.fromInt(
        `clang_parseTranslationUnit2FullArgv$mh`.invokeExact(
            CIdx,
            source_filename,
            command_line_args,
            num_command_line_args,
            unsaved_files,
            num_unsaved_files.toInt(),
            options.toInt(),
            out_TU,
        )
                as Int
    )

fun clang_defaultSaveOptions(TU: CXTranslationUnit): UInt =
    (`clang_defaultSaveOptions$mh`.invokeExact(TU) as Int).toUInt()

fun clang_saveTranslationUnit(
    TU: CXTranslationUnit,
    FileName: Pointer<Byte>,
    options: UInt,
): Int = `clang_saveTranslationUnit$mh`.invokeExact(TU, FileName, options.toInt()) as Int

fun clang_suspendTranslationUnit(`$p0`: CXTranslationUnit): UInt =
    (`clang_suspendTranslationUnit$mh`.invokeExact(`$p0`) as Int).toUInt()

fun clang_disposeTranslationUnit(`$p0`: CXTranslationUnit): Unit =
    `clang_disposeTranslationUnit$mh`.invokeExact(`$p0`) as Unit

fun clang_defaultReparseOptions(TU: CXTranslationUnit): UInt =
    (`clang_defaultReparseOptions$mh`.invokeExact(TU) as Int).toUInt()

fun clang_reparseTranslationUnit(
    TU: CXTranslationUnit,
    num_unsaved_files: UInt,
    unsaved_files: Pointer<CXUnsavedFile>,
    options: UInt,
): Int =
    `clang_reparseTranslationUnit$mh`.invokeExact(TU, num_unsaved_files.toInt(), unsaved_files, options.toInt())
            as Int

fun clang_getTUResourceUsageName(kind: CXTUResourceUsageKind): Pointer<Byte> =
    `clang_getTUResourceUsageName$mh`.invokeExact(kind.value) as MemorySegment

context(SegmentAllocator)
fun clang_getCXTUResourceUsage(TU: CXTranslationUnit): CXTUResourceUsage =
    CXTUResourceUsage(
        `clang_getCXTUResourceUsage$mh`.invokeExact(this@SegmentAllocator, TU) as
                MemorySegment
    )

fun clang_disposeCXTUResourceUsage(usage: CXTUResourceUsage): Unit =
    `clang_disposeCXTUResourceUsage$mh`.invokeExact(usage.`$mem`) as Unit

fun clang_getTranslationUnitTargetInfo(CTUnit: CXTranslationUnit): CXTargetInfo =
    `clang_getTranslationUnitTargetInfo$mh`.invokeExact(CTUnit) as MemorySegment

fun clang_TargetInfo_dispose(Info: CXTargetInfo): Unit =
    `clang_TargetInfo_dispose$mh`.invokeExact(Info) as Unit

context(SegmentAllocator)
fun clang_TargetInfo_getTriple(Info: CXTargetInfo): CXString =
    CXString(
        `clang_TargetInfo_getTriple$mh`.invokeExact(this@SegmentAllocator, Info) as
                MemorySegment
    )

fun clang_TargetInfo_getPointerWidth(Info: CXTargetInfo): Int =
    `clang_TargetInfo_getPointerWidth$mh`.invokeExact(Info) as Int

context(SegmentAllocator)
fun clang_getNullCursor(): CXCursor =
    CXCursor(`clang_getNullCursor$mh`.invokeExact(this@SegmentAllocator) as MemorySegment)

context(SegmentAllocator)
fun clang_getTranslationUnitCursor(`$p0`: CXTranslationUnit): CXCursor =
    CXCursor(
        `clang_getTranslationUnitCursor$mh`.invokeExact(this@SegmentAllocator, `$p0`) as
                MemorySegment
    )

fun clang_equalCursors(`$p0`: CXCursor, `$p1`: CXCursor): UInt =
    (`clang_equalCursors$mh`.invokeExact(`$p0`.`$mem`, `$p1`.`$mem`) as Int).toUInt()

fun clang_Cursor_isNull(cursor: CXCursor): Int =
    `clang_Cursor_isNull$mh`.invokeExact(cursor.`$mem`) as Int

fun clang_hashCursor(`$p0`: CXCursor): UInt =
    (`clang_hashCursor$mh`.invokeExact(`$p0`.`$mem`) as Int).toUInt()

fun clang_getCursorKind(`$p0`: CXCursor): CXCursorKind =
    CXCursorKind.fromInt(`clang_getCursorKind$mh`.invokeExact(`$p0`.`$mem`) as Int)

fun clang_isDeclaration(`$p0`: CXCursorKind): UInt =
    (`clang_isDeclaration$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_isInvalidDeclaration(`$p0`: CXCursor): UInt =
    (`clang_isInvalidDeclaration$mh`.invokeExact(`$p0`.`$mem`) as Int).toUInt()

fun clang_isReference(`$p0`: CXCursorKind): UInt =
    (`clang_isReference$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_isExpression(`$p0`: CXCursorKind): UInt =
    (`clang_isExpression$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_isStatement(`$p0`: CXCursorKind): UInt =
    (`clang_isStatement$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_isAttribute(`$p0`: CXCursorKind): UInt =
    (`clang_isAttribute$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_Cursor_hasAttrs(C: CXCursor): UInt =
    (`clang_Cursor_hasAttrs$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_isInvalid(`$p0`: CXCursorKind): UInt =
    (`clang_isInvalid$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_isTranslationUnit(`$p0`: CXCursorKind): UInt =
    (`clang_isTranslationUnit$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_isPreprocessing(`$p0`: CXCursorKind): UInt =
    (`clang_isPreprocessing$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_isUnexposed(`$p0`: CXCursorKind): UInt =
    (`clang_isUnexposed$mh`.invokeExact(`$p0`.value) as Int).toUInt()

fun clang_getCursorLinkage(cursor: CXCursor): CXLinkageKind =
    CXLinkageKind.fromInt(`clang_getCursorLinkage$mh`.invokeExact(cursor.`$mem`) as Int)

fun clang_getCursorVisibility(cursor: CXCursor): CXVisibilityKind =
    CXVisibilityKind.fromInt(`clang_getCursorVisibility$mh`.invokeExact(cursor.`$mem`) as Int)

fun clang_getCursorAvailability(cursor: CXCursor): CXAvailabilityKind =
    CXAvailabilityKind.fromInt(`clang_getCursorAvailability$mh`.invokeExact(cursor.`$mem`) as Int)

fun clang_getCursorPlatformAvailability(
    cursor: CXCursor,
    always_deprecated: Pointer<Int>,
    deprecated_message: Pointer<CXString>,
    always_unavailable: Pointer<Int>,
    unavailable_message: Pointer<CXString>,
    availability: Pointer<CXPlatformAvailability>,
    availability_size: Int,
): Int =
    `clang_getCursorPlatformAvailability$mh`.invokeExact(
        cursor.`$mem`,
        always_deprecated,
        deprecated_message,
        always_unavailable,
        unavailable_message,
        availability,
        availability_size,
    )
            as Int

fun clang_disposeCXPlatformAvailability(availability: Pointer<CXPlatformAvailability>): Unit =
    `clang_disposeCXPlatformAvailability$mh`.invokeExact(availability) as Unit

context(SegmentAllocator)
fun clang_Cursor_getVarDeclInitializer(cursor: CXCursor): CXCursor =
    CXCursor(
        `clang_Cursor_getVarDeclInitializer$mh`.invokeExact(this@SegmentAllocator, cursor.`$mem`)
                as MemorySegment
    )

fun clang_Cursor_hasVarDeclGlobalStorage(cursor: CXCursor): Int =
    `clang_Cursor_hasVarDeclGlobalStorage$mh`.invokeExact(cursor.`$mem`) as Int

fun clang_Cursor_hasVarDeclExternalStorage(cursor: CXCursor): Int =
    `clang_Cursor_hasVarDeclExternalStorage$mh`.invokeExact(cursor.`$mem`) as Int

fun clang_getCursorLanguage(cursor: CXCursor): CXLanguageKind =
    CXLanguageKind.fromInt(`clang_getCursorLanguage$mh`.invokeExact(cursor.`$mem`) as Int)

fun clang_getCursorTLSKind(cursor: CXCursor): CXTLSKind =
    CXTLSKind.fromInt(`clang_getCursorTLSKind$mh`.invokeExact(cursor.`$mem`) as Int)

fun clang_Cursor_getTranslationUnit(`$p0`: CXCursor): CXTranslationUnit =
    `clang_Cursor_getTranslationUnit$mh`.invokeExact(`$p0`.`$mem`) as MemorySegment

fun clang_createCXCursorSet(): CXCursorSet = `clang_createCXCursorSet$mh`.invokeExact() as
        MemorySegment

fun clang_disposeCXCursorSet(cset: CXCursorSet): Unit =
    `clang_disposeCXCursorSet$mh`.invokeExact(cset) as Unit

fun clang_CXCursorSet_contains(cset: CXCursorSet, cursor: CXCursor): UInt =
    (`clang_CXCursorSet_contains$mh`.invokeExact(cset, cursor.`$mem`) as Int).toUInt()

fun clang_CXCursorSet_insert(cset: CXCursorSet, cursor: CXCursor): UInt =
    (`clang_CXCursorSet_insert$mh`.invokeExact(cset, cursor.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getCursorSemanticParent(cursor: CXCursor): CXCursor =
    CXCursor(
        `clang_getCursorSemanticParent$mh`.invokeExact(this@SegmentAllocator, cursor.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorLexicalParent(cursor: CXCursor): CXCursor =
    CXCursor(
        `clang_getCursorLexicalParent$mh`.invokeExact(this@SegmentAllocator, cursor.`$mem`) as
                MemorySegment
    )

fun clang_getOverriddenCursors(
    cursor: CXCursor,
    overridden: Pointer<Pointer<CXCursor>>,
    num_overridden: Pointer<UInt>,
): Unit = `clang_getOverriddenCursors$mh`.invokeExact(cursor.`$mem`, overridden, num_overridden) as
        Unit

fun clang_disposeOverriddenCursors(overridden: Pointer<CXCursor>): Unit =
    `clang_disposeOverriddenCursors$mh`.invokeExact(overridden) as Unit

fun clang_getIncludedFile(cursor: CXCursor): CXFile =
    `clang_getIncludedFile$mh`.invokeExact(cursor.`$mem`) as MemorySegment

context(SegmentAllocator)
fun clang_getCursor(`$p0`: CXTranslationUnit, `$p1`: CXSourceLocation): CXCursor =
    CXCursor(
        `clang_getCursor$mh`.invokeExact(this@SegmentAllocator, `$p0`, `$p1`.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorLocation(`$p0`: CXCursor): CXSourceLocation =
    CXSourceLocation(
        `clang_getCursorLocation$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorExtent(`$p0`: CXCursor): CXSourceRange =
    CXSourceRange(
        `clang_getCursorExtent$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorType(C: CXCursor): CXType =
    CXType(`clang_getCursorType$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as MemorySegment)

context(SegmentAllocator)
fun clang_getTypeSpelling(CT: CXType): CXString =
    CXString(
        `clang_getTypeSpelling$mh`.invokeExact(this@SegmentAllocator, CT.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getTypedefDeclUnderlyingType(C: CXCursor): CXType =
    CXType(
        `clang_getTypedefDeclUnderlyingType$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getEnumDeclIntegerType(C: CXCursor): CXType =
    CXType(
        `clang_getEnumDeclIntegerType$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

fun clang_getEnumConstantDeclValue(C: CXCursor): Long =
    `clang_getEnumConstantDeclValue$mh`.invokeExact(C.`$mem`) as Long

fun clang_getEnumConstantDeclUnsignedValue(C: CXCursor): ULong =
    (`clang_getEnumConstantDeclUnsignedValue$mh`.invokeExact(C.`$mem`) as Long).toULong()

fun clang_Cursor_isBitField(C: CXCursor): UInt =
    (`clang_Cursor_isBitField$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_getFieldDeclBitWidth(C: CXCursor): Int =
    `clang_getFieldDeclBitWidth$mh`.invokeExact(C.`$mem`) as Int

fun clang_Cursor_getNumArguments(C: CXCursor): Int =
    `clang_Cursor_getNumArguments$mh`.invokeExact(C.`$mem`) as Int

context(SegmentAllocator)
fun clang_Cursor_getArgument(C: CXCursor, i: UInt): CXCursor =
    CXCursor(
        `clang_Cursor_getArgument$mh`.invokeExact(this@SegmentAllocator, C.`$mem`, i.toInt()) as
                MemorySegment
    )

fun clang_Cursor_getNumTemplateArguments(C: CXCursor): Int =
    `clang_Cursor_getNumTemplateArguments$mh`.invokeExact(C.`$mem`) as Int

fun clang_Cursor_getTemplateArgumentKind(C: CXCursor, I: UInt): CXTemplateArgumentKind =
    CXTemplateArgumentKind.fromInt(
        `clang_Cursor_getTemplateArgumentKind$mh`.invokeExact(C.`$mem`, I.toInt())
                as Int
    )

context(SegmentAllocator)
fun clang_Cursor_getTemplateArgumentType(C: CXCursor, I: UInt): CXType =
    CXType(
        `clang_Cursor_getTemplateArgumentType$mh`.invokeExact(this@SegmentAllocator, C.`$mem`, I.toInt())
                as MemorySegment
    )

fun clang_Cursor_getTemplateArgumentValue(C: CXCursor, I: UInt): Long =
    `clang_Cursor_getTemplateArgumentValue$mh`.invokeExact(C.`$mem`, I.toInt()) as Long

fun clang_Cursor_getTemplateArgumentUnsignedValue(C: CXCursor, I: UInt): ULong =
    (`clang_Cursor_getTemplateArgumentUnsignedValue$mh`.invokeExact(C.`$mem`, I.toInt()) as
            Long).toULong()

fun clang_equalTypes(A: CXType, B: CXType): UInt =
    (`clang_equalTypes$mh`.invokeExact(A.`$mem`, B.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getCanonicalType(T: CXType): CXType =
    CXType(
        `clang_getCanonicalType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as
                MemorySegment
    )

fun clang_isConstQualifiedType(T: CXType): UInt =
    (`clang_isConstQualifiedType$mh`.invokeExact(T.`$mem`) as Int).toUInt()

fun clang_Cursor_isMacroFunctionLike(C: CXCursor): UInt =
    (`clang_Cursor_isMacroFunctionLike$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Cursor_isMacroBuiltin(C: CXCursor): UInt =
    (`clang_Cursor_isMacroBuiltin$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Cursor_isFunctionInlined(C: CXCursor): UInt =
    (`clang_Cursor_isFunctionInlined$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_isVolatileQualifiedType(T: CXType): UInt =
    (`clang_isVolatileQualifiedType$mh`.invokeExact(T.`$mem`) as Int).toUInt()

fun clang_isRestrictQualifiedType(T: CXType): UInt =
    (`clang_isRestrictQualifiedType$mh`.invokeExact(T.`$mem`) as Int).toUInt()

fun clang_getAddressSpace(T: CXType): UInt =
    (`clang_getAddressSpace$mh`.invokeExact(T.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getTypedefName(CT: CXType): CXString =
    CXString(
        `clang_getTypedefName$mh`.invokeExact(this@SegmentAllocator, CT.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getPointeeType(T: CXType): CXType =
    CXType(`clang_getPointeeType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as MemorySegment)

context(SegmentAllocator)
fun clang_getUnqualifiedType(CT: CXType): CXType =
    CXType(
        `clang_getUnqualifiedType$mh`.invokeExact(this@SegmentAllocator, CT.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getNonReferenceType(CT: CXType): CXType =
    CXType(
        `clang_getNonReferenceType$mh`.invokeExact(this@SegmentAllocator, CT.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getTypeDeclaration(T: CXType): CXCursor =
    CXCursor(
        `clang_getTypeDeclaration$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getDeclObjCTypeEncoding(C: CXCursor): CXString =
    CXString(
        `clang_getDeclObjCTypeEncoding$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_Type_getObjCEncoding(type: CXType): CXString =
    CXString(
        `clang_Type_getObjCEncoding$mh`.invokeExact(this@SegmentAllocator, type.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getTypeKindSpelling(K: CXTypeKind): CXString =
    CXString(
        `clang_getTypeKindSpelling$mh`.invokeExact(this@SegmentAllocator, K.value) as
                MemorySegment
    )

fun clang_getFunctionTypeCallingConv(T: CXType): CXCallingConv =
    CXCallingConv.fromInt(`clang_getFunctionTypeCallingConv$mh`.invokeExact(T.`$mem`) as Int)

context(SegmentAllocator)
fun clang_getResultType(T: CXType): CXType =
    CXType(`clang_getResultType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as MemorySegment)

fun clang_getExceptionSpecificationType(T: CXType): Int =
    `clang_getExceptionSpecificationType$mh`.invokeExact(T.`$mem`) as Int

fun clang_getNumArgTypes(T: CXType): Int = `clang_getNumArgTypes$mh`.invokeExact(T.`$mem`)
        as Int

context(SegmentAllocator)
fun clang_getArgType(T: CXType, i: UInt): CXType =
    CXType(
        `clang_getArgType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`, i.toInt()) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_Type_getObjCObjectBaseType(T: CXType): CXType =
    CXType(
        `clang_Type_getObjCObjectBaseType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as
                MemorySegment
    )

fun clang_Type_getNumObjCProtocolRefs(T: CXType): UInt =
    (`clang_Type_getNumObjCProtocolRefs$mh`.invokeExact(T.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_Type_getObjCProtocolDecl(T: CXType, i: UInt): CXCursor =
    CXCursor(
        `clang_Type_getObjCProtocolDecl$mh`.invokeExact(this@SegmentAllocator, T.`$mem`, i.toInt())
                as MemorySegment
    )

fun clang_Type_getNumObjCTypeArgs(T: CXType): UInt =
    (`clang_Type_getNumObjCTypeArgs$mh`.invokeExact(T.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_Type_getObjCTypeArg(T: CXType, i: UInt): CXType =
    CXType(
        `clang_Type_getObjCTypeArg$mh`.invokeExact(this@SegmentAllocator, T.`$mem`, i.toInt()) as
                MemorySegment
    )

fun clang_isFunctionTypeVariadic(T: CXType): UInt =
    (`clang_isFunctionTypeVariadic$mh`.invokeExact(T.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getCursorResultType(C: CXCursor): CXType =
    CXType(
        `clang_getCursorResultType$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

fun clang_getCursorExceptionSpecificationType(C: CXCursor): Int =
    `clang_getCursorExceptionSpecificationType$mh`.invokeExact(C.`$mem`) as Int

fun clang_isPODType(T: CXType): UInt = (`clang_isPODType$mh`.invokeExact(T.`$mem`) as
        Int).toUInt()

context(SegmentAllocator)
fun clang_getElementType(T: CXType): CXType =
    CXType(`clang_getElementType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as MemorySegment)

fun clang_getNumElements(T: CXType): Long = `clang_getNumElements$mh`.invokeExact(T.`$mem`)
        as Long

context(SegmentAllocator)
fun clang_getArrayElementType(T: CXType): CXType =
    CXType(
        `clang_getArrayElementType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as
                MemorySegment
    )

fun clang_getArraySize(T: CXType): Long = `clang_getArraySize$mh`.invokeExact(T.`$mem`) as
        Long

context(SegmentAllocator)
fun clang_Type_getNamedType(T: CXType): CXType =
    CXType(
        `clang_Type_getNamedType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as
                MemorySegment
    )

fun clang_Type_isTransparentTagTypedef(T: CXType): UInt =
    (`clang_Type_isTransparentTagTypedef$mh`.invokeExact(T.`$mem`) as Int).toUInt()

fun clang_Type_getNullability(T: CXType): CXTypeNullabilityKind =
    CXTypeNullabilityKind.fromInt(`clang_Type_getNullability$mh`.invokeExact(T.`$mem`) as Int)

fun clang_Type_getAlignOf(T: CXType): Long =
    `clang_Type_getAlignOf$mh`.invokeExact(T.`$mem`) as Long

context(SegmentAllocator)
fun clang_Type_getClassType(T: CXType): CXType =
    CXType(
        `clang_Type_getClassType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as
                MemorySegment
    )

fun clang_Type_getSizeOf(T: CXType): Long = `clang_Type_getSizeOf$mh`.invokeExact(T.`$mem`)
        as Long

fun clang_Type_getOffsetOf(T: CXType, S: Pointer<Byte>): Long =
    `clang_Type_getOffsetOf$mh`.invokeExact(T.`$mem`, S) as Long

context(SegmentAllocator)
fun clang_Type_getModifiedType(T: CXType): CXType =
    CXType(
        `clang_Type_getModifiedType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_Type_getValueType(CT: CXType): CXType =
    CXType(
        `clang_Type_getValueType$mh`.invokeExact(this@SegmentAllocator, CT.`$mem`) as
                MemorySegment
    )

fun clang_Cursor_getOffsetOfField(C: CXCursor): Long =
    `clang_Cursor_getOffsetOfField$mh`.invokeExact(C.`$mem`) as Long

fun clang_Cursor_isAnonymous(C: CXCursor): UInt =
    (`clang_Cursor_isAnonymous$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Cursor_isAnonymousRecordDecl(C: CXCursor): UInt =
    (`clang_Cursor_isAnonymousRecordDecl$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Cursor_isInlineNamespace(C: CXCursor): UInt =
    (`clang_Cursor_isInlineNamespace$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Type_getNumTemplateArguments(T: CXType): Int =
    `clang_Type_getNumTemplateArguments$mh`.invokeExact(T.`$mem`) as Int

context(SegmentAllocator)
fun clang_Type_getTemplateArgumentAsType(T: CXType, i: UInt): CXType =
    CXType(
        `clang_Type_getTemplateArgumentAsType$mh`.invokeExact(this@SegmentAllocator, T.`$mem`, i.toInt())
                as MemorySegment
    )

fun clang_Type_getCXXRefQualifier(T: CXType): CXRefQualifierKind =
    CXRefQualifierKind.fromInt(`clang_Type_getCXXRefQualifier$mh`.invokeExact(T.`$mem`) as Int)

fun clang_isVirtualBase(`$p0`: CXCursor): UInt =
    (`clang_isVirtualBase$mh`.invokeExact(`$p0`.`$mem`) as Int).toUInt()

fun clang_getCXXAccessSpecifier(`$p0`: CXCursor): CX_CXXAccessSpecifier =
    CX_CXXAccessSpecifier.fromInt(
        `clang_getCXXAccessSpecifier$mh`.invokeExact(`$p0`.`$mem`) as
                Int
    )

fun clang_Cursor_getStorageClass(`$p0`: CXCursor): CX_StorageClass =
    CX_StorageClass.fromInt(`clang_Cursor_getStorageClass$mh`.invokeExact(`$p0`.`$mem`) as Int)

fun clang_getNumOverloadedDecls(cursor: CXCursor): UInt =
    (`clang_getNumOverloadedDecls$mh`.invokeExact(cursor.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getOverloadedDecl(cursor: CXCursor, index: UInt): CXCursor =
    CXCursor(
        `clang_getOverloadedDecl$mh`.invokeExact(this@SegmentAllocator, cursor.`$mem`, index.toInt())
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getIBOutletCollectionType(`$p0`: CXCursor): CXType =
    CXType(
        `clang_getIBOutletCollectionType$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

fun clang_visitChildren(
    parent: CXCursor,
    visitor: CXCursorVisitor,
    client_data: CXClientData,
): UInt = (`clang_visitChildren$mh`.invokeExact(parent.`$mem`, visitor, client_data) as Int).toUInt()

fun clang_visitChildrenWithBlock(parent: CXCursor, block: CXCursorVisitorBlock): UInt =
    (`clang_visitChildrenWithBlock$mh`.invokeExact(parent.`$mem`, block) as Int).toUInt()

context(SegmentAllocator)
fun clang_getCursorUSR(`$p0`: CXCursor): CXString =
    CXString(
        `clang_getCursorUSR$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_constructUSR_ObjCClass(class_name: Pointer<Byte>): CXString =
    CXString(
        `clang_constructUSR_ObjCClass$mh`.invokeExact(this@SegmentAllocator, class_name) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_constructUSR_ObjCCategory(class_name: Pointer<Byte>, category_name: Pointer<Byte>):
        CXString =
    CXString(
        `clang_constructUSR_ObjCCategory$mh`.invokeExact(this@SegmentAllocator, class_name, category_name)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_constructUSR_ObjCProtocol(protocol_name: Pointer<Byte>): CXString =
    CXString(
        `clang_constructUSR_ObjCProtocol$mh`.invokeExact(this@SegmentAllocator, protocol_name)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_constructUSR_ObjCIvar(name: Pointer<Byte>, classUSR: CXString): CXString =
    CXString(
        `clang_constructUSR_ObjCIvar$mh`.invokeExact(this@SegmentAllocator, name, classUSR.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_constructUSR_ObjCMethod(
    name: Pointer<Byte>,
    isInstanceMethod: UInt,
    classUSR: CXString,
): CXString =
    CXString(
        `clang_constructUSR_ObjCMethod$mh`.invokeExact(
            this@SegmentAllocator,
            name,
            isInstanceMethod.toInt(),
            classUSR.`$mem`,
        )
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_constructUSR_ObjCProperty(`property`: Pointer<Byte>, classUSR: CXString): CXString =
    CXString(
        `clang_constructUSR_ObjCProperty$mh`.invokeExact(this@SegmentAllocator, `property`, classUSR.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorSpelling(`$p0`: CXCursor): CXString =
    CXString(
        `clang_getCursorSpelling$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_Cursor_getSpellingNameRange(
    `$p0`: CXCursor,
    pieceIndex: UInt,
    options: UInt,
): CXSourceRange =
    CXSourceRange(
        `clang_Cursor_getSpellingNameRange$mh`.invokeExact(
            this@SegmentAllocator,
            `$p0`.`$mem`,
            pieceIndex.toInt(),
            options.toInt(),
        )
                as MemorySegment
    )

fun clang_PrintingPolicy_getProperty(
    Policy: CXPrintingPolicy,
    Property: CXPrintingPolicyProperty
): UInt =
    (`clang_PrintingPolicy_getProperty$mh`.invokeExact(Policy, Property.value) as Int).toUInt()

fun clang_PrintingPolicy_setProperty(
    Policy: CXPrintingPolicy,
    Property: CXPrintingPolicyProperty,
    Value: UInt,
): Unit = `clang_PrintingPolicy_setProperty$mh`.invokeExact(Policy, Property.value, Value.toInt()) as
        Unit

fun clang_getCursorPrintingPolicy(`$p0`: CXCursor): CXPrintingPolicy =
    `clang_getCursorPrintingPolicy$mh`.invokeExact(`$p0`.`$mem`) as MemorySegment

fun clang_PrintingPolicy_dispose(Policy: CXPrintingPolicy): Unit =
    `clang_PrintingPolicy_dispose$mh`.invokeExact(Policy) as Unit

context(SegmentAllocator)
fun clang_getCursorPrettyPrinted(Cursor: CXCursor, Policy: CXPrintingPolicy): CXString =
    CXString(
        `clang_getCursorPrettyPrinted$mh`.invokeExact(this@SegmentAllocator, Cursor.`$mem`, Policy)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorDisplayName(`$p0`: CXCursor): CXString =
    CXString(
        `clang_getCursorDisplayName$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorReferenced(`$p0`: CXCursor): CXCursor =
    CXCursor(
        `clang_getCursorReferenced$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorDefinition(`$p0`: CXCursor): CXCursor =
    CXCursor(
        `clang_getCursorDefinition$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

fun clang_isCursorDefinition(`$p0`: CXCursor): UInt =
    (`clang_isCursorDefinition$mh`.invokeExact(`$p0`.`$mem`) as Int).toUInt()

context(SegmentAllocator)
fun clang_getCanonicalCursor(`$p0`: CXCursor): CXCursor =
    CXCursor(
        `clang_getCanonicalCursor$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

fun clang_Cursor_getObjCSelectorIndex(`$p0`: CXCursor): Int =
    `clang_Cursor_getObjCSelectorIndex$mh`.invokeExact(`$p0`.`$mem`) as Int

fun clang_Cursor_isDynamicCall(C: CXCursor): Int =
    `clang_Cursor_isDynamicCall$mh`.invokeExact(C.`$mem`) as Int

context(SegmentAllocator)
fun clang_Cursor_getReceiverType(C: CXCursor): CXType =
    CXType(
        `clang_Cursor_getReceiverType$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

fun clang_Cursor_getObjCPropertyAttributes(C: CXCursor, reserved: UInt): UInt =
    (`clang_Cursor_getObjCPropertyAttributes$mh`.invokeExact(C.`$mem`, reserved.toInt()) as
            Int).toUInt()

context(SegmentAllocator)
fun clang_Cursor_getObjCPropertyGetterName(C: CXCursor): CXString =
    CXString(
        `clang_Cursor_getObjCPropertyGetterName$mh`.invokeExact(this@SegmentAllocator, C.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_Cursor_getObjCPropertySetterName(C: CXCursor): CXString =
    CXString(
        `clang_Cursor_getObjCPropertySetterName$mh`.invokeExact(this@SegmentAllocator, C.`$mem`)
                as MemorySegment
    )

fun clang_Cursor_getObjCDeclQualifiers(C: CXCursor): UInt =
    (`clang_Cursor_getObjCDeclQualifiers$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Cursor_isObjCOptional(C: CXCursor): UInt =
    (`clang_Cursor_isObjCOptional$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Cursor_isVariadic(C: CXCursor): UInt =
    (`clang_Cursor_isVariadic$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_Cursor_isExternalSymbol(
    C: CXCursor,
    language: Pointer<CXString>,
    definedIn: Pointer<CXString>,
    isGenerated: Pointer<UInt>,
): UInt = (`clang_Cursor_isExternalSymbol$mh`.invokeExact(C.`$mem`, language, definedIn, isGenerated)
        as Int).toUInt()

context(SegmentAllocator)
fun clang_Cursor_getCommentRange(C: CXCursor): CXSourceRange =
    CXSourceRange(
        `clang_Cursor_getCommentRange$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_Cursor_getRawCommentText(C: CXCursor): CXString =
    CXString(
        `clang_Cursor_getRawCommentText$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_Cursor_getBriefCommentText(C: CXCursor): CXString =
    CXString(
        `clang_Cursor_getBriefCommentText$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_Cursor_getMangling(`$p0`: CXCursor): CXString =
    CXString(
        `clang_Cursor_getMangling$mh`.invokeExact(this@SegmentAllocator, `$p0`.`$mem`) as
                MemorySegment
    )

fun clang_Cursor_getCXXManglings(`$p0`: CXCursor): Pointer<CXStringSet> =
    `clang_Cursor_getCXXManglings$mh`.invokeExact(`$p0`.`$mem`) as MemorySegment

fun clang_Cursor_getObjCManglings(`$p0`: CXCursor): Pointer<CXStringSet> =
    `clang_Cursor_getObjCManglings$mh`.invokeExact(`$p0`.`$mem`) as MemorySegment

fun clang_Cursor_getModule(C: CXCursor): CXModule =
    `clang_Cursor_getModule$mh`.invokeExact(C.`$mem`) as MemorySegment

fun clang_getModuleForFile(`$p0`: CXTranslationUnit, `$p1`: CXFile): CXModule =
    `clang_getModuleForFile$mh`.invokeExact(`$p0`, `$p1`) as MemorySegment

fun clang_Module_getASTFile(Module: CXModule): CXFile =
    `clang_Module_getASTFile$mh`.invokeExact(Module) as MemorySegment

fun clang_Module_getParent(Module: CXModule): CXModule =
    `clang_Module_getParent$mh`.invokeExact(Module) as MemorySegment

context(SegmentAllocator)
fun clang_Module_getName(Module: CXModule): CXString =
    CXString(`clang_Module_getName$mh`.invokeExact(this@SegmentAllocator, Module) as MemorySegment)

context(SegmentAllocator)
fun clang_Module_getFullName(Module: CXModule): CXString =
    CXString(
        `clang_Module_getFullName$mh`.invokeExact(this@SegmentAllocator, Module) as
                MemorySegment
    )

fun clang_Module_isSystem(Module: CXModule): Int =
    `clang_Module_isSystem$mh`.invokeExact(Module) as Int

fun clang_Module_getNumTopLevelHeaders(`$p0`: CXTranslationUnit, Module: CXModule): UInt =
    (`clang_Module_getNumTopLevelHeaders$mh`.invokeExact(`$p0`, Module) as Int).toUInt()

fun clang_Module_getTopLevelHeader(
    `$p0`: CXTranslationUnit,
    Module: CXModule,
    Index: UInt,
): CXFile = `clang_Module_getTopLevelHeader$mh`.invokeExact(`$p0`, Module, Index.toInt()) as
        MemorySegment

fun clang_CXXConstructor_isConvertingConstructor(C: CXCursor): UInt =
    (`clang_CXXConstructor_isConvertingConstructor$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXConstructor_isCopyConstructor(C: CXCursor): UInt =
    (`clang_CXXConstructor_isCopyConstructor$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXConstructor_isDefaultConstructor(C: CXCursor): UInt =
    (`clang_CXXConstructor_isDefaultConstructor$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXConstructor_isMoveConstructor(C: CXCursor): UInt =
    (`clang_CXXConstructor_isMoveConstructor$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXField_isMutable(C: CXCursor): UInt =
    (`clang_CXXField_isMutable$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isDefaulted(C: CXCursor): UInt =
    (`clang_CXXMethod_isDefaulted$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isDeleted(C: CXCursor): UInt =
    (`clang_CXXMethod_isDeleted$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isPureVirtual(C: CXCursor): UInt =
    (`clang_CXXMethod_isPureVirtual$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isStatic(C: CXCursor): UInt =
    (`clang_CXXMethod_isStatic$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isVirtual(C: CXCursor): UInt =
    (`clang_CXXMethod_isVirtual$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isCopyAssignmentOperator(C: CXCursor): UInt =
    (`clang_CXXMethod_isCopyAssignmentOperator$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isMoveAssignmentOperator(C: CXCursor): UInt =
    (`clang_CXXMethod_isMoveAssignmentOperator$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isExplicit(C: CXCursor): UInt =
    (`clang_CXXMethod_isExplicit$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXRecord_isAbstract(C: CXCursor): UInt =
    (`clang_CXXRecord_isAbstract$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_EnumDecl_isScoped(C: CXCursor): UInt =
    (`clang_EnumDecl_isScoped$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_CXXMethod_isConst(C: CXCursor): UInt =
    (`clang_CXXMethod_isConst$mh`.invokeExact(C.`$mem`) as Int).toUInt()

fun clang_getTemplateCursorKind(C: CXCursor): CXCursorKind =
    CXCursorKind.fromInt(`clang_getTemplateCursorKind$mh`.invokeExact(C.`$mem`) as Int)

context(SegmentAllocator)
fun clang_getSpecializedCursorTemplate(C: CXCursor): CXCursor =
    CXCursor(
        `clang_getSpecializedCursorTemplate$mh`.invokeExact(this@SegmentAllocator, C.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getCursorReferenceNameRange(
    C: CXCursor,
    NameFlags: UInt,
    PieceIndex: UInt,
): CXSourceRange =
    CXSourceRange(
        `clang_getCursorReferenceNameRange$mh`.invokeExact(
            this@SegmentAllocator,
            C.`$mem`,
            NameFlags.toInt(),
            PieceIndex.toInt(),
        )
                as MemorySegment
    )

fun clang_getToken(TU: CXTranslationUnit, Location: CXSourceLocation): Pointer<CXToken> =
    `clang_getToken$mh`.invokeExact(TU, Location.`$mem`) as MemorySegment

fun clang_getTokenKind(`$p0`: CXToken): CXTokenKind =
    CXTokenKind.fromInt(`clang_getTokenKind$mh`.invokeExact(`$p0`.`$mem`) as Int)

context(SegmentAllocator)
fun clang_getTokenSpelling(`$p0`: CXTranslationUnit, `$p1`: CXToken): CXString =
    CXString(
        `clang_getTokenSpelling$mh`.invokeExact(this@SegmentAllocator, `$p0`, `$p1`.`$mem`) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getTokenLocation(`$p0`: CXTranslationUnit, `$p1`: CXToken): CXSourceLocation =
    CXSourceLocation(
        `clang_getTokenLocation$mh`.invokeExact(this@SegmentAllocator, `$p0`, `$p1`.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getTokenExtent(`$p0`: CXTranslationUnit, `$p1`: CXToken): CXSourceRange =
    CXSourceRange(
        `clang_getTokenExtent$mh`.invokeExact(this@SegmentAllocator, `$p0`, `$p1`.`$mem`)
                as MemorySegment
    )

fun clang_tokenize(
    TU: CXTranslationUnit,
    Range: CXSourceRange,
    Tokens: Pointer<Pointer<CXToken>>,
    NumTokens: Pointer<UInt>,
): Unit = `clang_tokenize$mh`.invokeExact(TU, Range.`$mem`, Tokens, NumTokens) as Unit

fun clang_annotateTokens(
    TU: CXTranslationUnit,
    Tokens: Pointer<CXToken>,
    NumTokens: UInt,
    Cursors: Pointer<CXCursor>,
): Unit = `clang_annotateTokens$mh`.invokeExact(TU, Tokens, NumTokens.toInt(), Cursors) as Unit

fun clang_disposeTokens(
    TU: CXTranslationUnit,
    Tokens: Pointer<CXToken>,
    NumTokens: UInt,
): Unit = `clang_disposeTokens$mh`.invokeExact(TU, Tokens, NumTokens.toInt()) as Unit

context(SegmentAllocator)
fun clang_getCursorKindSpelling(Kind: CXCursorKind): CXString =
    CXString(
        `clang_getCursorKindSpelling$mh`.invokeExact(this@SegmentAllocator, Kind.value) as
                MemorySegment
    )

fun clang_getDefinitionSpellingAndExtent(
    `$p0`: CXCursor,
    startBuf: Pointer<Pointer<Byte>>,
    endBuf: Pointer<Pointer<Byte>>,
    startLine: Pointer<UInt>,
    startColumn: Pointer<UInt>,
    endLine: Pointer<UInt>,
    endColumn: Pointer<UInt>,
): Unit =
    `clang_getDefinitionSpellingAndExtent$mh`.invokeExact(
        `$p0`.`$mem`,
        startBuf,
        endBuf,
        startLine,
        startColumn,
        endLine,
        endColumn,
    )
            as Unit

fun clang_enableStackTraces(): Unit = `clang_enableStackTraces$mh`.invokeExact() as Unit

fun clang_executeOnThread(
    fn: Pointer<(`$p0`: Pointer<Unit>) -> Unit>,
    user_data: Pointer<Unit>,
    stack_size: UInt,
): Unit = `clang_executeOnThread$mh`.invokeExact(fn, user_data, stack_size.toInt()) as Unit

fun clang_getCompletionChunkKind(completion_string: CXCompletionString, chunk_number: UInt):
        CXCompletionChunkKind =
    CXCompletionChunkKind.fromInt(
        `clang_getCompletionChunkKind$mh`.invokeExact(completion_string, chunk_number.toInt())
                as Int
    )

context(SegmentAllocator)
fun clang_getCompletionChunkText(completion_string: CXCompletionString, chunk_number: UInt):
        CXString =
    CXString(
        `clang_getCompletionChunkText$mh`.invokeExact(this@SegmentAllocator, completion_string, chunk_number.toInt())
                as MemorySegment
    )

fun clang_getCompletionChunkCompletionString(
    completion_string: CXCompletionString,
    chunk_number: UInt
): CXCompletionString =
    `clang_getCompletionChunkCompletionString$mh`.invokeExact(completion_string, chunk_number.toInt())
            as MemorySegment

fun clang_getNumCompletionChunks(completion_string: CXCompletionString): UInt =
    (`clang_getNumCompletionChunks$mh`.invokeExact(completion_string) as Int).toUInt()

fun clang_getCompletionPriority(completion_string: CXCompletionString): UInt =
    (`clang_getCompletionPriority$mh`.invokeExact(completion_string) as Int).toUInt()

fun clang_getCompletionAvailability(completion_string: CXCompletionString):
        CXAvailabilityKind =
    CXAvailabilityKind.fromInt(
        `clang_getCompletionAvailability$mh`.invokeExact(completion_string)
                as Int
    )

fun clang_getCompletionNumAnnotations(completion_string: CXCompletionString): UInt =
    (`clang_getCompletionNumAnnotations$mh`.invokeExact(completion_string) as Int).toUInt()

context(SegmentAllocator)
fun clang_getCompletionAnnotation(
    completion_string: CXCompletionString,
    annotation_number: UInt
): CXString =
    CXString(
        `clang_getCompletionAnnotation$mh`.invokeExact(
            this@SegmentAllocator,
            completion_string,
            annotation_number.toInt(),
        )
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getCompletionParent(
    completion_string: CXCompletionString,
    kind: Pointer<CXCursorKind>
): CXString =
    CXString(
        `clang_getCompletionParent$mh`.invokeExact(this@SegmentAllocator, completion_string, kind)
                as MemorySegment
    )

context(SegmentAllocator)
fun clang_getCompletionBriefComment(completion_string: CXCompletionString): CXString =
    CXString(
        `clang_getCompletionBriefComment$mh`.invokeExact(this@SegmentAllocator, completion_string)
                as MemorySegment
    )

fun clang_getCursorCompletionString(cursor: CXCursor): CXCompletionString =
    `clang_getCursorCompletionString$mh`.invokeExact(cursor.`$mem`) as MemorySegment

fun clang_getCompletionNumFixIts(
    results: Pointer<CXCodeCompleteResults>,
    completion_index: UInt
): UInt =
    (`clang_getCompletionNumFixIts$mh`.invokeExact(results, completion_index.toInt()) as
            Int).toUInt()

context(SegmentAllocator)
fun clang_getCompletionFixIt(
    results: Pointer<CXCodeCompleteResults>,
    completion_index: UInt,
    fixit_index: UInt,
    replacement_range: Pointer<CXSourceRange>,
): CXString =
    CXString(
        `clang_getCompletionFixIt$mh`.invokeExact(
            this@SegmentAllocator,
            results,
            completion_index.toInt(),
            fixit_index.toInt(),
            replacement_range,
        )
                as MemorySegment
    )

fun clang_defaultCodeCompleteOptions(): UInt =
    (`clang_defaultCodeCompleteOptions$mh`.invokeExact() as Int).toUInt()

fun clang_codeCompleteAt(
    TU: CXTranslationUnit,
    complete_filename: Pointer<Byte>,
    complete_line: UInt,
    complete_column: UInt,
    unsaved_files: Pointer<CXUnsavedFile>,
    num_unsaved_files: UInt,
    options: UInt,
): Pointer<CXCodeCompleteResults> =
    `clang_codeCompleteAt$mh`.invokeExact(
        TU,
        complete_filename,
        complete_line.toInt(),
        complete_column.toInt(),
        unsaved_files,
        num_unsaved_files.toInt(),
        options.toInt(),
    )
            as MemorySegment

fun clang_sortCodeCompletionResults(Results: Pointer<CXCompletionResult>, NumResults: UInt):
        Unit = `clang_sortCodeCompletionResults$mh`.invokeExact(Results, NumResults.toInt()) as Unit

fun clang_disposeCodeCompleteResults(Results: Pointer<CXCodeCompleteResults>): Unit =
    `clang_disposeCodeCompleteResults$mh`.invokeExact(Results) as Unit

fun clang_codeCompleteGetNumDiagnostics(Results: Pointer<CXCodeCompleteResults>): UInt =
    (`clang_codeCompleteGetNumDiagnostics$mh`.invokeExact(Results) as Int).toUInt()

fun clang_codeCompleteGetDiagnostic(Results: Pointer<CXCodeCompleteResults>, Index: UInt):
        CXDiagnostic = `clang_codeCompleteGetDiagnostic$mh`.invokeExact(Results, Index.toInt()) as
        MemorySegment

fun clang_codeCompleteGetContexts(Results: Pointer<CXCodeCompleteResults>): ULong =
    (`clang_codeCompleteGetContexts$mh`.invokeExact(Results) as Long).toULong()

fun clang_codeCompleteGetContainerKind(
    Results: Pointer<CXCodeCompleteResults>,
    IsIncomplete: Pointer<UInt>
): CXCursorKind =
    CXCursorKind.fromInt(
        `clang_codeCompleteGetContainerKind$mh`.invokeExact(Results, IsIncomplete)
                as Int
    )

context(SegmentAllocator)
fun clang_codeCompleteGetContainerUSR(Results: Pointer<CXCodeCompleteResults>): CXString =
    CXString(
        `clang_codeCompleteGetContainerUSR$mh`.invokeExact(this@SegmentAllocator, Results) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_codeCompleteGetObjCSelector(Results: Pointer<CXCodeCompleteResults>): CXString =
    CXString(
        `clang_codeCompleteGetObjCSelector$mh`.invokeExact(this@SegmentAllocator, Results) as
                MemorySegment
    )

context(SegmentAllocator)
fun clang_getClangVersion(): CXString =
    CXString(`clang_getClangVersion$mh`.invokeExact(this@SegmentAllocator) as MemorySegment)

fun clang_toggleCrashRecovery(isEnabled: UInt): Unit =
    `clang_toggleCrashRecovery$mh`.invokeExact(isEnabled.toInt()) as Unit

fun clang_getInclusions(
    tu: CXTranslationUnit,
    visitor: CXInclusionVisitor,
    client_data: CXClientData,
): Unit = `clang_getInclusions$mh`.invokeExact(tu, visitor, client_data) as Unit

fun clang_Cursor_Evaluate(C: CXCursor): CXEvalResult =
    `clang_Cursor_Evaluate$mh`.invokeExact(C.`$mem`) as MemorySegment

fun clang_EvalResult_getKind(E: CXEvalResult): CXEvalResultKind =
    CXEvalResultKind.fromInt(`clang_EvalResult_getKind$mh`.invokeExact(E) as Int)

fun clang_EvalResult_getAsInt(E: CXEvalResult): Int =
    `clang_EvalResult_getAsInt$mh`.invokeExact(E) as Int

fun clang_EvalResult_getAsLongLong(E: CXEvalResult): Long =
    `clang_EvalResult_getAsLongLong$mh`.invokeExact(E) as Long

fun clang_EvalResult_isUnsignedInt(E: CXEvalResult): UInt =
    (`clang_EvalResult_isUnsignedInt$mh`.invokeExact(E) as Int).toUInt()

fun clang_EvalResult_getAsUnsigned(E: CXEvalResult): ULong =
    (`clang_EvalResult_getAsUnsigned$mh`.invokeExact(E) as Long).toULong()

fun clang_EvalResult_getAsDouble(E: CXEvalResult): Double =
    `clang_EvalResult_getAsDouble$mh`.invokeExact(E) as Double

fun clang_EvalResult_getAsStr(E: CXEvalResult): Pointer<Byte> =
    `clang_EvalResult_getAsStr$mh`.invokeExact(E) as MemorySegment

fun clang_EvalResult_dispose(E: CXEvalResult): Unit =
    `clang_EvalResult_dispose$mh`.invokeExact(E) as Unit

fun clang_getRemappings(path: Pointer<Byte>): CXRemapping =
    `clang_getRemappings$mh`.invokeExact(path) as MemorySegment

fun clang_getRemappingsFromFileList(filePaths: Pointer<Pointer<Byte>>, numFiles: UInt):
        CXRemapping = `clang_getRemappingsFromFileList$mh`.invokeExact(filePaths, numFiles.toInt()) as
        MemorySegment

fun clang_remap_getNumFiles(`$p0`: CXRemapping): UInt =
    (`clang_remap_getNumFiles$mh`.invokeExact(`$p0`) as Int).toUInt()

fun clang_remap_getFilenames(
    `$p0`: CXRemapping,
    index: UInt,
    original: Pointer<CXString>,
    transformed: Pointer<CXString>,
): Unit = `clang_remap_getFilenames$mh`.invokeExact(`$p0`, index.toInt(), original, transformed) as
        Unit

fun clang_remap_dispose(`$p0`: CXRemapping): Unit =
    `clang_remap_dispose$mh`.invokeExact(`$p0`) as Unit

fun clang_findReferencesInFile(
    cursor: CXCursor,
    `file`: CXFile,
    visitor: CXCursorAndRangeVisitor,
): CXResult =
    CXResult.fromInt(
        `clang_findReferencesInFile$mh`.invokeExact(cursor.`$mem`, `file`, visitor.`$mem`)
                as Int
    )

fun clang_findIncludesInFile(
    TU: CXTranslationUnit,
    `file`: CXFile,
    visitor: CXCursorAndRangeVisitor,
): CXResult = CXResult.fromInt(
    `clang_findIncludesInFile$mh`.invokeExact(TU, `file`, visitor.`$mem`)
            as Int
)

fun clang_findReferencesInFileWithBlock(
    `$p0`: CXCursor,
    `$p1`: CXFile,
    `$p2`: CXCursorAndRangeVisitorBlock,
): CXResult =
    CXResult.fromInt(
        `clang_findReferencesInFileWithBlock$mh`.invokeExact(`$p0`.`$mem`, `$p1`, `$p2`)
                as Int
    )

fun clang_findIncludesInFileWithBlock(
    `$p0`: CXTranslationUnit,
    `$p1`: CXFile,
    `$p2`: CXCursorAndRangeVisitorBlock,
): CXResult =
    CXResult.fromInt(`clang_findIncludesInFileWithBlock$mh`.invokeExact(`$p0`, `$p1`, `$p2`) as Int)

fun clang_index_isEntityObjCContainerKind(`$p0`: CXIdxEntityKind): Int =
    `clang_index_isEntityObjCContainerKind$mh`.invokeExact(`$p0`.value) as Int

fun clang_index_getObjCContainerDeclInfo(`$p0`: Pointer<CXIdxDeclInfo>):
        Pointer<CXIdxObjCContainerDeclInfo> =
    `clang_index_getObjCContainerDeclInfo$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_getObjCInterfaceDeclInfo(`$p0`: Pointer<CXIdxDeclInfo>):
        Pointer<CXIdxObjCInterfaceDeclInfo> =
    `clang_index_getObjCInterfaceDeclInfo$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_getObjCCategoryDeclInfo(`$p0`: Pointer<CXIdxDeclInfo>):
        Pointer<CXIdxObjCCategoryDeclInfo> =
    `clang_index_getObjCCategoryDeclInfo$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_getObjCProtocolRefListInfo(`$p0`: Pointer<CXIdxDeclInfo>):
        Pointer<CXIdxObjCProtocolRefListInfo> =
    `clang_index_getObjCProtocolRefListInfo$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_getObjCPropertyDeclInfo(`$p0`: Pointer<CXIdxDeclInfo>):
        Pointer<CXIdxObjCPropertyDeclInfo> =
    `clang_index_getObjCPropertyDeclInfo$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_getIBOutletCollectionAttrInfo(`$p0`: Pointer<CXIdxAttrInfo>):
        Pointer<CXIdxIBOutletCollectionAttrInfo> =
    `clang_index_getIBOutletCollectionAttrInfo$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_getCXXClassDeclInfo(`$p0`: Pointer<CXIdxDeclInfo>):
        Pointer<CXIdxCXXClassDeclInfo> = `clang_index_getCXXClassDeclInfo$mh`.invokeExact(`$p0`) as
        MemorySegment

fun clang_index_getClientContainer(`$p0`: Pointer<CXIdxContainerInfo>): CXIdxClientContainer =
    `clang_index_getClientContainer$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_setClientContainer(
    `$p0`: Pointer<CXIdxContainerInfo>,
    `$p1`: CXIdxClientContainer
): Unit =
    `clang_index_setClientContainer$mh`.invokeExact(`$p0`, `$p1`) as Unit

fun clang_index_getClientEntity(`$p0`: Pointer<CXIdxEntityInfo>): CXIdxClientEntity =
    `clang_index_getClientEntity$mh`.invokeExact(`$p0`) as MemorySegment

fun clang_index_setClientEntity(`$p0`: Pointer<CXIdxEntityInfo>, `$p1`: CXIdxClientEntity):
        Unit = `clang_index_setClientEntity$mh`.invokeExact(`$p0`, `$p1`) as Unit

fun clang_IndexAction_create(CIdx: CXIndex): CXIndexAction =
    `clang_IndexAction_create$mh`.invokeExact(CIdx) as MemorySegment

fun clang_IndexAction_dispose(`$p0`: CXIndexAction): Unit =
    `clang_IndexAction_dispose$mh`.invokeExact(`$p0`) as Unit

fun clang_indexSourceFile(
    `$p0`: CXIndexAction,
    client_data: CXClientData,
    index_callbacks: Pointer<IndexerCallbacks>,
    index_callbacks_size: UInt,
    index_options: UInt,
    source_filename: Pointer<Byte>,
    command_line_args: Pointer<Pointer<Byte>>,
    num_command_line_args: Int,
    unsaved_files: Pointer<CXUnsavedFile>,
    num_unsaved_files: UInt,
    out_TU: Pointer<CXTranslationUnit>,
    TU_options: UInt,
): Int =
    `clang_indexSourceFile$mh`.invokeExact(
        `$p0`,
        client_data,
        index_callbacks,
        index_callbacks_size.toInt(),
        index_options.toInt(),
        source_filename,
        command_line_args,
        num_command_line_args,
        unsaved_files,
        num_unsaved_files.toInt(),
        out_TU,
        TU_options.toInt(),
    )
            as Int

fun clang_indexSourceFileFullArgv(
    `$p0`: CXIndexAction,
    client_data: CXClientData,
    index_callbacks: Pointer<IndexerCallbacks>,
    index_callbacks_size: UInt,
    index_options: UInt,
    source_filename: Pointer<Byte>,
    command_line_args: Pointer<Pointer<Byte>>,
    num_command_line_args: Int,
    unsaved_files: Pointer<CXUnsavedFile>,
    num_unsaved_files: UInt,
    out_TU: Pointer<CXTranslationUnit>,
    TU_options: UInt,
): Int =
    `clang_indexSourceFileFullArgv$mh`.invokeExact(
        `$p0`,
        client_data,
        index_callbacks,
        index_callbacks_size.toInt(),
        index_options.toInt(),
        source_filename,
        command_line_args,
        num_command_line_args,
        unsaved_files,
        num_unsaved_files.toInt(),
        out_TU,
        TU_options.toInt(),
    )
            as Int

fun clang_indexTranslationUnit(
    `$p0`: CXIndexAction,
    client_data: CXClientData,
    index_callbacks: Pointer<IndexerCallbacks>,
    index_callbacks_size: UInt,
    index_options: UInt,
    `$p5`: CXTranslationUnit,
): Int =
    `clang_indexTranslationUnit$mh`.invokeExact(
        `$p0`,
        client_data,
        index_callbacks,
        index_callbacks_size.toInt(),
        index_options.toInt(),
        `$p5`,
    )
            as Int

fun clang_indexLoc_getFileLocation(
    loc: CXIdxLoc,
    indexFile: Pointer<CXIdxClientFile>,
    `file`: Pointer<CXFile>,
    line: Pointer<UInt>,
    column: Pointer<UInt>,
    offset: Pointer<UInt>,
): Unit =
    `clang_indexLoc_getFileLocation$mh`.invokeExact(loc.`$mem`, indexFile, `file`, line, column, offset)
            as Unit

context(SegmentAllocator)
fun clang_indexLoc_getCXSourceLocation(loc: CXIdxLoc): CXSourceLocation =
    CXSourceLocation(
        `clang_indexLoc_getCXSourceLocation$mh`.invokeExact(this@SegmentAllocator, loc.`$mem`)
                as MemorySegment
    )

fun clang_Type_visitFields(
    T: CXType,
    visitor: CXFieldVisitor,
    client_data: CXClientData,
): UInt = (`clang_Type_visitFields$mh`.invokeExact(T.`$mem`, visitor, client_data) as Int).toUInt()

context(SegmentAllocator)
fun clang_getBinaryOperatorKindSpelling(kind: CXBinaryOperatorKind): CXString =
    CXString(
        `clang_getBinaryOperatorKindSpelling$mh`.invokeExact(this@SegmentAllocator, kind.value)
                as MemorySegment
    )

fun clang_getCursorBinaryOperatorKind(cursor: CXCursor): CXBinaryOperatorKind =
    CXBinaryOperatorKind.fromInt(
        `clang_getCursorBinaryOperatorKind$mh`.invokeExact(cursor.`$mem`)
                as Int
    )

context(SegmentAllocator)
fun clang_getUnaryOperatorKindSpelling(kind: CXUnaryOperatorKind): CXString =
    CXString(
        `clang_getUnaryOperatorKindSpelling$mh`.invokeExact(this@SegmentAllocator, kind.value)
                as MemorySegment
    )

fun clang_getCursorUnaryOperatorKind(cursor: CXCursor): CXUnaryOperatorKind =
    CXUnaryOperatorKind.fromInt(
        `clang_getCursorUnaryOperatorKind$mh`.invokeExact(cursor.`$mem`) as
                Int
    )
