// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
value class CXIdxObjCPropertyDeclInfo(
    val `$mem`: MemorySegment,
) {
    var declInfo: Pointer<CXIdxDeclInfo>
        get() = declInfoHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            declInfoHandle.set(this.`$mem`, 0L, value)
        }

    var getter: Pointer<CXIdxEntityInfo>
        get() = getterHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            getterHandle.set(this.`$mem`, 0L, value)
        }

    var setter: Pointer<CXIdxEntityInfo>
        get() = setterHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            setterHandle.set(this.`$mem`, 0L, value)
        }

    constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    companion object {
        val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("declInfo"),
            `$RuntimeHelper`.POINTER.withName("getter"),
            `$RuntimeHelper`.POINTER.withName("setter"),
        ).withName("CXIdxObjCPropertyDeclInfo")

        @JvmField
        val declInfoHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("declInfo"))

        @JvmField
        val getterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("getter"))

        @JvmField
        val setterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("setter"))

        @JvmStatic
        fun allocate(alloc: SegmentAllocator): CXIdxObjCPropertyDeclInfo =
            CXIdxObjCPropertyDeclInfo(alloc.allocate(layout))
    }
}
