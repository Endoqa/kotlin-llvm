// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 *
 * Index initialization options.
 *
 * 0 is the default value of each member of this struct except for Size.
 * Initialize the struct in one of the following three ways to avoid adapting
 * code each time a new member is added to it:
 * \code
 * CXIndexOptions Opts;
 * memset(&Opts, 0, sizeof(Opts));
 * Opts.Size = sizeof(CXIndexOptions);
 * \endcode
 * or explicitly initialize the first data member and zero-initialize the rest:
 * \code
 * CXIndexOptions Opts = { sizeof(CXIndexOptions) };
 * \endcode
 * or to prevent the -Wmissing-field-initializers warning for the above version:
 * \code
 * CXIndexOptions Opts{};
 * Opts.Size = sizeof(CXIndexOptions);
 * \endcode
 */
@JvmInline
public value class CXIndexOptions(
    public val `$mem`: MemorySegment,
) {
    public var Size: UInt
        get() = (SizeHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            SizeHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var ThreadBackgroundPriorityForIndexing: UByte
        get() = (ThreadBackgroundPriorityForIndexingHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            ThreadBackgroundPriorityForIndexingHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public var ThreadBackgroundPriorityForEditing: UByte
        get() = (ThreadBackgroundPriorityForEditingHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            ThreadBackgroundPriorityForEditingHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public val _bit_field_pad: NativeArray<UInt>
        get() = _bit_field_padHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public var PreambleStoragePath: Pointer<Byte>
        get() = PreambleStoragePathHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            PreambleStoragePathHandle.set(this.`$mem`, 0L, value)
        }

    public var InvocationEmissionPath: Pointer<Byte>
        get() = InvocationEmissionPathHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            InvocationEmissionPathHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("Size"),
            ValueLayout.JAVA_BYTE.withName("ThreadBackgroundPriorityForIndexing"),
            ValueLayout.JAVA_BYTE.withName("ThreadBackgroundPriorityForEditing"),
            MemoryLayout.paddingLayout(2),
            MemoryLayout.sequenceLayout(4L, ValueLayout.JAVA_INT).withName("_bit_field_pad"),
            `$RuntimeHelper`.POINTER.withName("PreambleStoragePath"),
            `$RuntimeHelper`.POINTER.withName("InvocationEmissionPath"),
        ).withName("CXIndexOptions")

        @JvmField
        public val SizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Size"))

        @JvmField
        public val ThreadBackgroundPriorityForIndexingHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("ThreadBackgroundPriorityForIndexing"))

        @JvmField
        public val ThreadBackgroundPriorityForEditingHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("ThreadBackgroundPriorityForEditing"))

        @JvmField
        public val _bit_field_padHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("_bit_field_pad"))

        @JvmField
        public val PreambleStoragePathHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("PreambleStoragePath"))

        @JvmField
        public val InvocationEmissionPathHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("InvocationEmissionPath"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXIndexOptions =
            CXIndexOptions(alloc.allocate(layout))
    }
}
