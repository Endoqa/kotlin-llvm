// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 *
 * A cursor representing some element in the abstract syntax tree for
 * a translation unit.
 *
 * The cursor abstraction unifies the different kinds of entities in a
 * program--declaration, statements, expressions, references to declarations,
 * etc.--under a single "cursor" abstraction with a common set of operations.
 * Common operation for a cursor include: getting the physical location in
 * a source file where the cursor points, getting the name associated with a
 * cursor, and retrieving cursors for any child nodes of a particular cursor.
 *
 * Cursors can be produced in two specific ways.
 * clang_getTranslationUnitCursor() produces a cursor for a translation unit,
 * from which one can use clang_visitChildren() to explore the rest of the
 * translation unit. clang_getCursor() maps from a physical source location
 * to the entity that resides at that location, allowing one to map from the
 * source code into the AST.
 */
@JvmInline
public value class CXCursor(
    public val `$mem`: MemorySegment,
) {
    public var kind: CXCursorKind
        get() = CXCursorKind.fromInt(kindHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            kindHandle.set(this.`$mem`, 0L, value.value)
        }

    public var xdata: Int
        get() = xdataHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            xdataHandle.set(this.`$mem`, 0L, value)
        }

    public val `data`: NativeArray<Pointer<Unit>>
        get() = dataHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("kind"),
            ValueLayout.JAVA_INT.withName("xdata"),
            MemoryLayout.sequenceLayout(3L, `$RuntimeHelper`.POINTER).withName("data"),
        ).withName("CXCursor")

        @JvmField
        public val kindHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("kind"))

        @JvmField
        public val xdataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("xdata"))

        @JvmField
        public val dataHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("data"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXCursor = CXCursor(alloc.allocate(layout))
    }
}
