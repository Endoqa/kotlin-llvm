// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Describes the type of the comment AST node (\c CXComment).  A comment
 * node can be considered block content (e. g., paragraph), inline content
 * (plain text) or neither (the root AST node).
 */
public enum class CXCommentKind(
    public val `value`: Int,
) {
    /**
     *
     * Null comment.  No AST node is constructed at the requested location
     * because there is no text or a syntax error.
     */
    Null(0),

    /**
     *
     * Plain text.  Inline content.
     */
    Text(1),

    /**
     *
     * A command with word-like arguments that is considered inline content.
     *
     * For example: \\c command.
     */
    InlineCommand(2),

    /**
     *
     * HTML start tag with attributes (name-value pairs).  Considered
     * inline content.
     *
     * For example:
     * \verbatim
     * <br> <br /> <a href="http://example.org/">
     * \endverbatim
     */
    HTMLStartTag(3),

    /**
     *
     * HTML end tag.  Considered inline content.
     *
     * For example:
     * \verbatim
     * </a>
     * \endverbatim
     */
    HTMLEndTag(4),

    /**
     *
     * A paragraph, contains inline comment.  The paragraph itself is
     * block content.
     */
    Paragraph(5),

    /**
     *
     * A command that has zero or more word-like arguments (number of
     * word-like arguments depends on command name) and a paragraph as an
     * argument.  Block command is block content.
     *
     * Paragraph argument is also a child of the block command.
     *
     * For example: \has 0 word-like arguments and a paragraph argument.
     *
     * AST nodes of special kinds that parser knows about (e. g., \\param
     * command) have their own node kinds.
     */
    BlockCommand(6),

    /**
     *
     * A \\param or \\arg command that describes the function parameter
     * (name, passing direction, description).
     *
     * For example: \\param [in] ParamName description.
     */
    ParamCommand(7),

    /**
     *
     * A \\tparam command that describes a template parameter (name and
     * description).
     *
     * For example: \\tparam T description.
     */
    TParamCommand(8),

    /**
     *
     * A verbatim block command (e. g., preformatted code).  Verbatim
     * block has an opening and a closing command and contains multiple lines of
     * text (\c CXComment_VerbatimBlockLine child nodes).
     *
     * For example:
     * \\verbatim
     * aaa
     * \\endverbatim
     */
    VerbatimBlockCommand(9),

    /**
     *
     * A line of text that is contained within a
     * CXComment_VerbatimBlockCommand node.
     */
    VerbatimBlockLine(10),

    /**
     *
     * A verbatim line command.  Verbatim line has an opening command,
     * a single line of text (up to the newline after the opening command) and
     * has no closing command.
     */
    VerbatimLine(11),

    /**
     *
     * A full comment attached to a declaration, contains block content.
     */
    FullComment(12),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXCommentKind::class.java,
            "fromInt",
            MethodType.methodType(CXCommentKind::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXCommentKind::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXCommentKind = when (value) {
            Null.value -> Null
            Text.value -> Text
            InlineCommand.value -> InlineCommand
            HTMLStartTag.value -> HTMLStartTag
            HTMLEndTag.value -> HTMLEndTag
            Paragraph.value -> Paragraph
            BlockCommand.value -> BlockCommand
            ParamCommand.value -> ParamCommand
            TParamCommand.value -> TParamCommand
            VerbatimBlockCommand.value -> VerbatimBlockCommand
            VerbatimBlockLine.value -> VerbatimBlockLine
            VerbatimLine.value -> VerbatimLine
            FullComment.value -> FullComment
            else -> error("enum not found")
        }
    }
}
