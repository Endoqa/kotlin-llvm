// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Describes the kind of error that occurred (if any) in a call to
 * \c clang_loadDiagnostics.
 */
public enum class CXLoadDiag_Error(
    public val `value`: Int,
) {
    /**
     *
     * Indicates that no error occurred.
     */
    None(0),

    /**
     *
     * Indicates that an unknown error occurred while attempting to
     * deserialize diagnostics.
     */
    Unknown(1),

    /**
     *
     * Indicates that the file containing the serialized diagnostics
     * could not be opened.
     */
    CannotLoad(2),

    /**
     *
     * Indicates that the serialized diagnostics file is invalid or
     * corrupt.
     */
    InvalidFile(3),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXLoadDiag_Error::class.java,
            "fromInt",
            MethodType.methodType(CXLoadDiag_Error::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXLoadDiag_Error::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXLoadDiag_Error = when (value) {
            None.value -> None
            Unknown.value -> Unknown
            CannotLoad.value -> CannotLoad
            InvalidFile.value -> InvalidFile
            else -> error("enum not found")
        }
    }
}
