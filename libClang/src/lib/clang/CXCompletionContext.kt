// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Bits that represent the context under which completion is occurring.
 *
 * The enumerators in this enumeration may be bitwise-OR'd together if multiple
 * contexts are occurring simultaneously.
 */
public enum class CXCompletionContext(
    public val `value`: Int,
) {
    /**
     *
     * The context for completions is unexposed, as only Clang results
     * should be included. (This is equivalent to having no context bits set.)
     */
    Unexposed(0),

    /**
     *
     * Completions for any possible type should be included in the results.
     */
    AnyType(1),

    /**
     *
     * Completions for any possible value (variables, function calls, etc.)
     * should be included in the results.
     */
    AnyValue(2),

    /**
     *
     * Completions for values that resolve to an Objective-C object should
     * be included in the results.
     */
    ObjCObjectValue(4),

    /**
     *
     * Completions for values that resolve to an Objective-C selector
     * should be included in the results.
     */
    ObjCSelectorValue(8),

    /**
     *
     * Completions for values that resolve to a C++ class type should be
     * included in the results.
     */
    CXXClassTypeValue(16),

    /**
     *
     * Completions for fields of the member being accessed using the dot
     * operator should be included in the results.
     */
    DotMemberAccess(32),

    /**
     *
     * Completions for fields of the member being accessed using the arrow
     * operator should be included in the results.
     */
    ArrowMemberAccess(64),

    /**
     *
     * Completions for properties of the Objective-C object being accessed
     * using the dot operator should be included in the results.
     */
    ObjCPropertyAccess(128),

    /**
     *
     * Completions for enum tags should be included in the results.
     */
    EnumTag(256),

    /**
     *
     * Completions for union tags should be included in the results.
     */
    UnionTag(512),

    /**
     *
     * Completions for struct tags should be included in the results.
     */
    StructTag(1024),

    /**
     *
     * Completions for C++ class names should be included in the results.
     */
    ClassTag(2048),

    /**
     *
     * Completions for C++ namespaces and namespace aliases should be
     * included in the results.
     */
    Namespace(4096),

    /**
     *
     * Completions for C++ nested name specifiers should be included in
     * the results.
     */
    NestedNameSpecifier(8192),

    /**
     *
     * Completions for Objective-C interfaces (classes) should be included
     * in the results.
     */
    ObjCInterface(16384),

    /**
     *
     * Completions for Objective-C protocols should be included in
     * the results.
     */
    ObjCProtocol(32768),

    /**
     *
     * Completions for Objective-C categories should be included in
     * the results.
     */
    ObjCCategory(65536),

    /**
     *
     * Completions for Objective-C instance messages should be included
     * in the results.
     */
    ObjCInstanceMessage(131072),

    /**
     *
     * Completions for Objective-C class messages should be included in
     * the results.
     */
    ObjCClassMessage(262144),

    /**
     *
     * Completions for Objective-C selector names should be included in
     * the results.
     */
    ObjCSelectorName(524288),

    /**
     *
     * Completions for preprocessor macro names should be included in
     * the results.
     */
    MacroName(1048576),

    /**
     *
     * Natural language completions should be included in the results.
     */
    NaturalLanguage(2097152),

    /**
     *
     * #include file completions should be included in the results.
     */
    IncludedFile(4194304),

    /**
     *
     * The current context is unknown, so set all contexts.
     */
    Unknown(8388607),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXCompletionContext::class.java,
            "fromInt",
            MethodType.methodType(CXCompletionContext::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXCompletionContext::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXCompletionContext = when (value) {
            Unexposed.value -> Unexposed
            AnyType.value -> AnyType
            AnyValue.value -> AnyValue
            ObjCObjectValue.value -> ObjCObjectValue
            ObjCSelectorValue.value -> ObjCSelectorValue
            CXXClassTypeValue.value -> CXXClassTypeValue
            DotMemberAccess.value -> DotMemberAccess
            ArrowMemberAccess.value -> ArrowMemberAccess
            ObjCPropertyAccess.value -> ObjCPropertyAccess
            EnumTag.value -> EnumTag
            UnionTag.value -> UnionTag
            StructTag.value -> StructTag
            ClassTag.value -> ClassTag
            Namespace.value -> Namespace
            NestedNameSpecifier.value -> NestedNameSpecifier
            ObjCInterface.value -> ObjCInterface
            ObjCProtocol.value -> ObjCProtocol
            ObjCCategory.value -> ObjCCategory
            ObjCInstanceMessage.value -> ObjCInstanceMessage
            ObjCClassMessage.value -> ObjCClassMessage
            ObjCSelectorName.value -> ObjCSelectorName
            MacroName.value -> MacroName
            NaturalLanguage.value -> NaturalLanguage
            IncludedFile.value -> IncludedFile
            Unknown.value -> Unknown
            else -> error("enum not found")
        }
    }
}
