// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 *
 * Describes the availability of a given entity on a particular platform, e.g.,
 * a particular class might only be available on Mac OS 10.7 or newer.
 */
@JvmInline
public value class CXPlatformAvailability(
    public val `$mem`: MemorySegment,
) {
    public var Platform: CXString
        get() = CXString(PlatformHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Platform.`$mem`, 0L, CXString.layout.byteSize())
        }

    public var Introduced: CXVersion
        get() = CXVersion(IntroducedHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Introduced.`$mem`, 0L, CXVersion.layout.byteSize())
        }

    public var Deprecated: CXVersion
        get() = CXVersion(DeprecatedHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Deprecated.`$mem`, 0L, CXVersion.layout.byteSize())
        }

    public var Obsoleted: CXVersion
        get() = CXVersion(ObsoletedHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Obsoleted.`$mem`, 0L, CXVersion.layout.byteSize())
        }

    public var Unavailable: Int
        get() = UnavailableHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            UnavailableHandle.set(this.`$mem`, 0L, value)
        }

    public var Message: CXString
        get() = CXString(MessageHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Message.`$mem`, 0L, CXString.layout.byteSize())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            CXString.layout.withName("Platform"),
            CXVersion.layout.withName("Introduced"),
            CXVersion.layout.withName("Deprecated"),
            CXVersion.layout.withName("Obsoleted"),
            ValueLayout.JAVA_INT.withName("Unavailable"),
            CXString.layout.withName("Message"),
        ).withName("CXPlatformAvailability")

        @JvmField
        public val PlatformHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Platform"))

        @JvmField
        public val IntroducedHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Introduced"))

        @JvmField
        public val DeprecatedHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Deprecated"))

        @JvmField
        public val ObsoletedHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Obsoleted"))

        @JvmField
        public val UnavailableHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Unavailable"))

        @JvmField
        public val MessageHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Message"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXPlatformAvailability =
            CXPlatformAvailability(alloc.allocate(layout))
    }
}
