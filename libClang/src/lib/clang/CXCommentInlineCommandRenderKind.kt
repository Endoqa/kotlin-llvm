// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * The most appropriate rendering mode for an inline command, chosen on
 * command semantics in Doxygen.
 */
public enum class CXCommentInlineCommandRenderKind(
    public val `value`: Int,
) {
    /**
     *
     * Command argument should be rendered in a normal font.
     */
    Normal(0),

    /**
     *
     * Command argument should be rendered in a bold font.
     */
    Bold(1),

    /**
     *
     * Command argument should be rendered in a monospaced font.
     */
    Monospaced(2),

    /**
     *
     * Command argument should be rendered emphasized (typically italic
     * font).
     */
    Emphasized(3),

    /**
     *
     * Command argument should not be rendered (since it only defines an anchor).
     */
    Anchor(4),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXCommentInlineCommandRenderKind::class.java,
            "fromInt",
            MethodType.methodType(CXCommentInlineCommandRenderKind::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXCommentInlineCommandRenderKind::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXCommentInlineCommandRenderKind = when (value) {
            Normal.value -> Normal
            Bold.value -> Bold
            Monospaced.value -> Monospaced
            Emphasized.value -> Emphasized
            Anchor.value -> Anchor
            else -> error("enum not found")
        }
    }
}
