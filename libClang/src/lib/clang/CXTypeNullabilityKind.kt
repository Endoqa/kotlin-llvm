// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

public enum class CXTypeNullabilityKind(
    public val `value`: Int,
) {
    /**
     *
     * Values of this type can never be null.
     */
    NonNull(0),

    /**
     *
     * Values of this type can be null.
     */
    Nullable(1),

    /**
     *
     * Whether values of this type can be null is (explicitly)
     * unspecified. This captures a (fairly rare) case where we
     * can't conclude anything about the nullability of the type even
     * though it has been considered.
     */
    Unspecified(2),

    /**
     *
     * Nullability is not applicable to this type.
     */
    Invalid(3),

    /**
     *
     * Generally behaves like Nullable, except when used in a block parameter that
     * was imported into a swift async method. There, swift will assume that the
     * parameter can get null even if no error occurred. _Nullable parameters are
     * assumed to only get null on error.
     */
    NullableResult(4),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXTypeNullabilityKind::class.java,
            "fromInt",
            MethodType.methodType(CXTypeNullabilityKind::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXTypeNullabilityKind::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXTypeNullabilityKind = when (value) {
            NonNull.value -> NonNull
            Nullable.value -> Nullable
            Unspecified.value -> Unspecified
            Invalid.value -> Invalid
            NullableResult.value -> NullableResult
            else -> error("enum not found")
        }
    }
}
