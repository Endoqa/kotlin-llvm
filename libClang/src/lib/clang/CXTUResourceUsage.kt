// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.VarHandle

/**
 *
 * The memory usage of a CXTranslationUnit, broken into categories.
 */
@JvmInline
public value class CXTUResourceUsage(
    public val `$mem`: MemorySegment,
) {
    public var `data`: Pointer<Unit>
        get() = dataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            dataHandle.set(this.`$mem`, 0L, value)
        }

    public var numEntries: UInt
        get() = (numEntriesHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            numEntriesHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var entries: Pointer<CXTUResourceUsageEntry>
        get() = entriesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            entriesHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("data"),
            ValueLayout.JAVA_INT.withName("numEntries"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("entries"),
        ).withName("CXTUResourceUsage")

        @JvmField
        public val dataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("data"))

        @JvmField
        public val numEntriesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numEntries"))

        @JvmField
        public val entriesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("entries"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXTUResourceUsage =
            CXTUResourceUsage(alloc.allocate(layout))
    }
}
