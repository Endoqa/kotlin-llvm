// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

public typealias CXVirtualFileOverlay = Pointer<CXVirtualFileOverlayImpl>

public typealias CXModuleMapDescriptor = Pointer<CXModuleMapDescriptorImpl>

public typealias CXCompilationDatabase = Pointer<Unit>

public typealias CXCompileCommands = Pointer<Unit>

public typealias CXCompileCommand = Pointer<Unit>

public typealias __time_t = Long

public typealias time_t = __time_t

public typealias CXFile = Pointer<Unit>

public typealias CXDiagnostic = Pointer<Unit>

public typealias CXDiagnosticSet = Pointer<Unit>

public typealias CXIndex = Pointer<Unit>

public typealias CXTargetInfo = Pointer<CXTargetInfoImpl>

public typealias CXTranslationUnit = Pointer<CXTranslationUnitImpl>

public typealias CXClientData = Pointer<Unit>

public typealias CXCursorSet = Pointer<CXCursorSetImpl>

public typealias CXCursorVisitor = Pointer<(
    cursor: CXCursor,
    parent: CXCursor,
    client_data: CXClientData,
) -> CXChildVisitResult>

public typealias CXCursorVisitorBlock = Pointer<_CXChildVisitResult>

public typealias CXPrintingPolicy = Pointer<Unit>

public typealias CXModule = Pointer<Unit>

public typealias CXCompletionString = Pointer<Unit>

public typealias CXInclusionVisitor = Pointer<(
    included_file: CXFile,
    inclusion_stack: Pointer<CXSourceLocation>,
    include_len: UInt,
    client_data: CXClientData,
) -> Unit>

public typealias CXEvalResult = Pointer<Unit>

public typealias CXRemapping = Pointer<Unit>

public typealias CXCursorAndRangeVisitorBlock = Pointer<_CXCursorAndRangeVisitorBlock>

public typealias CXIdxClientFile = Pointer<Unit>

public typealias CXIdxClientEntity = Pointer<Unit>

public typealias CXIdxClientContainer = Pointer<Unit>

public typealias CXIdxClientASTFile = Pointer<Unit>

public typealias CXIndexAction = Pointer<Unit>

public typealias CXFieldVisitor = Pointer<(C: CXCursor, client_data: CXClientData) -> CXVisitorResult>

public typealias CXAPISet = Pointer<CXAPISetImpl>

public typealias CXRewriter = Pointer<Unit>

public typealias clang_executeOnThread_fn = Pointer<(`$p0`: Pointer<Unit>) -> Unit>
