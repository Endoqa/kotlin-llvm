// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class CXIdxObjCInterfaceDeclInfo(
    public val `$mem`: MemorySegment,
) {
    public var containerInfo: Pointer<CXIdxObjCContainerDeclInfo>
        get() = containerInfoHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            containerInfoHandle.set(this.`$mem`, 0L, value)
        }

    public var superInfo: Pointer<CXIdxBaseClassInfo>
        get() = superInfoHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            superInfoHandle.set(this.`$mem`, 0L, value)
        }

    public var protocols: Pointer<CXIdxObjCProtocolRefListInfo>
        get() = protocolsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            protocolsHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("containerInfo"),
            `$RuntimeHelper`.POINTER.withName("superInfo"),
            `$RuntimeHelper`.POINTER.withName("protocols"),
        ).withName("CXIdxObjCInterfaceDeclInfo")

        @JvmField
        public val containerInfoHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("containerInfo"))

        @JvmField
        public val superInfoHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("superInfo"))

        @JvmField
        public val protocolsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("protocols"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXIdxObjCInterfaceDeclInfo =
            CXIdxObjCInterfaceDeclInfo(alloc.allocate(layout))
    }
}
