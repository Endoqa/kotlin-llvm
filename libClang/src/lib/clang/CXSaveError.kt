// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Describes the kind of error that occurred (if any) in a call to
 * \c clang_saveTranslationUnit().
 */
public enum class CXSaveError(
    public val `value`: Int,
) {
    /**
     *
     * Indicates that no error occurred while saving a translation unit.
     */
    None(0),

    /**
     *
     * Indicates that an unknown error occurred while attempting to save
     * the file.
     *
     * This error typically indicates that file I/O failed when attempting to
     * write the file.
     */
    Unknown(1),

    /**
     *
     * Indicates that errors during translation prevented this attempt
     * to save the translation unit.
     *
     * Errors that prevent the translation unit from being saved can be
     * extracted using \c clang_getNumDiagnostics() and \c clang_getDiagnostic().
     */
    TranslationErrors(2),

    /**
     *
     * Indicates that the translation unit to be saved was somehow
     * invalid (e.g., NULL).
     */
    InvalidTU(3),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXSaveError::class.java,
            "fromInt",
            MethodType.methodType(CXSaveError::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXSaveError::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXSaveError = when (value) {
            None.value -> None
            Unknown.value -> Unknown
            TranslationErrors.value -> TranslationErrors
            InvalidTU.value -> InvalidTU
            else -> error("enum not found")
        }
    }
}
