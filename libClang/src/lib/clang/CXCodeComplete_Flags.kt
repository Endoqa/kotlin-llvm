// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Flags that can be passed to \c clang_codeCompleteAt() to
 * modify its behavior.
 *
 * The enumerators in this enumeration can be bitwise-OR'd together to
 * provide multiple options to \c clang_codeCompleteAt().
 */
public enum class CXCodeComplete_Flags(
    public val `value`: Int,
) {
    /**
     *
     * Whether to include macros within the set of code
     * completions returned.
     */
    IncludeMacros(0x01),

    /**
     *
     * Whether to include code patterns for language constructs
     * within the set of code completions, e.g., for loops.
     */
    IncludeCodePatterns(0x02),

    /**
     *
     * Whether to include brief documentation within the set of code
     * completions returned.
     */
    IncludeBriefComments(0x04),

    /**
     *
     * Whether to speed up completion by omitting top- or namespace-level entities
     * defined in the preamble. There's no guarantee any particular entity is
     * omitted. This may be useful if the headers are indexed externally.
     */
    SkipPreamble(0x08),

    /**
     *
     * Whether to include completions with small
     * fix-its, e.g. change '.' to '->' on member access, etc.
     */
    IncludeCompletionsWithFixIts(0x10),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXCodeComplete_Flags::class.java,
            "fromInt",
            MethodType.methodType(CXCodeComplete_Flags::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXCodeComplete_Flags::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXCodeComplete_Flags = when (value) {
            IncludeMacros.value -> IncludeMacros
            IncludeCodePatterns.value -> IncludeCodePatterns
            IncludeBriefComments.value -> IncludeBriefComments
            SkipPreamble.value -> SkipPreamble
            IncludeCompletionsWithFixIts.value -> IncludeCompletionsWithFixIts
            else -> error("enum not found")
        }
    }
}
