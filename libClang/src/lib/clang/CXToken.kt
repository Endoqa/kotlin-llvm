// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 *
 * Describes a single preprocessing token.
 */
@JvmInline
public value class CXToken(
    public val `$mem`: MemorySegment,
) {
    public val int_data: NativeArray<UInt>
        get() = int_dataHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

    public var ptr_data: Pointer<Unit>
        get() = ptr_dataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            ptr_dataHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4L, ValueLayout.JAVA_INT).withName("int_data"),
            `$RuntimeHelper`.POINTER.withName("ptr_data"),
        ).withName("CXToken")

        @JvmField
        public val int_dataHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("int_data"))

        @JvmField
        public val ptr_dataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("ptr_data"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXToken = CXToken(alloc.allocate(layout))
    }
}
