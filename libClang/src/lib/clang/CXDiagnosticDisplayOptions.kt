// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Options to control the display of diagnostics.
 *
 * The values in this enum are meant to be combined to customize the
 * behavior of \c clang_formatDiagnostic().
 */
public enum class CXDiagnosticDisplayOptions(
    public val `value`: Int,
) {
    /**
     *
     * Display the source-location information where the
     * diagnostic was located.
     *
     * When set, diagnostics will be prefixed by the file, line, and
     * (optionally) column to which the diagnostic refers. For example,
     *
     * \code
     * test.c:28: warning: extra tokens at end of #endif directive
     * \endcode
     *
     * This option corresponds to the clang flag \c -fshow-source-location.
     */
    DisplaySourceLocation(0x01),

    /**
     *
     * If displaying the source-location information of the
     * diagnostic, also include the column number.
     *
     * This option corresponds to the clang flag \c -fshow-column.
     */
    DisplayColumn(0x02),

    /**
     *
     * If displaying the source-location information of the
     * diagnostic, also include information about source ranges in a
     * machine-parsable format.
     *
     * This option corresponds to the clang flag
     * \c -fdiagnostics-print-source-range-info.
     */
    DisplaySourceRanges(0x04),

    /**
     *
     * Display the option name associated with this diagnostic, if any.
     *
     * The option name displayed (e.g., -Wconversion) will be placed in brackets
     * after the diagnostic text. This option corresponds to the clang flag
     * \c -fdiagnostics-show-option.
     */
    DisplayOption(0x08),

    /**
     *
     * Display the category number associated with this diagnostic, if any.
     *
     * The category number is displayed within brackets after the diagnostic text.
     * This option corresponds to the clang flag
     * \c -fdiagnostics-show-category=id.
     */
    DisplayCategoryId(0x10),

    /**
     *
     * Display the category name associated with this diagnostic, if any.
     *
     * The category name is displayed within brackets after the diagnostic text.
     * This option corresponds to the clang flag
     * \c -fdiagnostics-show-category=name.
     */
    DisplayCategoryName(0x20),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXDiagnosticDisplayOptions::class.java,
            "fromInt",
            MethodType.methodType(CXDiagnosticDisplayOptions::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXDiagnosticDisplayOptions::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXDiagnosticDisplayOptions = when (value) {
            DisplaySourceLocation.value -> DisplaySourceLocation
            DisplayColumn.value -> DisplayColumn
            DisplaySourceRanges.value -> DisplaySourceRanges
            DisplayOption.value -> DisplayOption
            DisplayCategoryId.value -> DisplayCategoryId
            DisplayCategoryName.value -> DisplayCategoryName
            else -> error("enum not found")
        }
    }
}
