// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class CXIdxDeclInfo(
    public val `$mem`: MemorySegment,
) {
    public var entityInfo: Pointer<CXIdxEntityInfo>
        get() = entityInfoHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            entityInfoHandle.set(this.`$mem`, 0L, value)
        }

    public var cursor: CXCursor
        get() = CXCursor(cursorHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.cursor.`$mem`, 0L, CXCursor.layout.byteSize())
        }

    public var loc: CXIdxLoc
        get() = CXIdxLoc(locHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.loc.`$mem`, 0L, CXIdxLoc.layout.byteSize())
        }

    public var semanticContainer: Pointer<CXIdxContainerInfo>
        get() = semanticContainerHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            semanticContainerHandle.set(this.`$mem`, 0L, value)
        }

    public var lexicalContainer: Pointer<CXIdxContainerInfo>
        get() = lexicalContainerHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            lexicalContainerHandle.set(this.`$mem`, 0L, value)
        }

    public var isRedeclaration: Int
        get() = isRedeclarationHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isRedeclarationHandle.set(this.`$mem`, 0L, value)
        }

    public var isDefinition: Int
        get() = isDefinitionHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isDefinitionHandle.set(this.`$mem`, 0L, value)
        }

    public var isContainer: Int
        get() = isContainerHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isContainerHandle.set(this.`$mem`, 0L, value)
        }

    public var declAsContainer: Pointer<CXIdxContainerInfo>
        get() = declAsContainerHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            declAsContainerHandle.set(this.`$mem`, 0L, value)
        }

    public var isImplicit: Int
        get() = isImplicitHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isImplicitHandle.set(this.`$mem`, 0L, value)
        }

    public var attributes: Pointer<Pointer<CXIdxAttrInfo>>
        get() = attributesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            attributesHandle.set(this.`$mem`, 0L, value)
        }

    public var numAttributes: UInt
        get() = (numAttributesHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            numAttributesHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var flags: UInt
        get() = (flagsHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            flagsHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("entityInfo"),
            CXCursor.layout.withName("cursor"),
            CXIdxLoc.layout.withName("loc"),
            `$RuntimeHelper`.POINTER.withName("semanticContainer"),
            `$RuntimeHelper`.POINTER.withName("lexicalContainer"),
            ValueLayout.JAVA_INT.withName("isRedeclaration"),
            ValueLayout.JAVA_INT.withName("isDefinition"),
            ValueLayout.JAVA_INT.withName("isContainer"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("declAsContainer"),
            ValueLayout.JAVA_INT.withName("isImplicit"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("attributes"),
            ValueLayout.JAVA_INT.withName("numAttributes"),
            ValueLayout.JAVA_INT.withName("flags"),
        ).withName("CXIdxDeclInfo")

        @JvmField
        public val entityInfoHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("entityInfo"))

        @JvmField
        public val cursorHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("cursor"))

        @JvmField
        public val locHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("loc"))

        @JvmField
        public val semanticContainerHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("semanticContainer"))

        @JvmField
        public val lexicalContainerHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("lexicalContainer"))

        @JvmField
        public val isRedeclarationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isRedeclaration"))

        @JvmField
        public val isDefinitionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isDefinition"))

        @JvmField
        public val isContainerHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isContainer"))

        @JvmField
        public val declAsContainerHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("declAsContainer"))

        @JvmField
        public val isImplicitHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isImplicit"))

        @JvmField
        public val attributesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("attributes"))

        @JvmField
        public val numAttributesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("numAttributes"))

        @JvmField
        public val flagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("flags"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXIdxDeclInfo =
            CXIdxDeclInfo(alloc.allocate(layout))
    }
}
