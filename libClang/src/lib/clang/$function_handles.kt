// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle

internal val `clang_getCString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXString.layout,
        )
    )
}

internal val `clang_disposeString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeString"),
        FunctionDescriptor.ofVoid(
            CXString.layout,
        )
    )
}

internal val `clang_disposeStringSet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeStringSet"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getBuildSessionTimestamp$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getBuildSessionTimestamp"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `clang_VirtualFileOverlay_create$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_VirtualFileOverlay_create"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_VirtualFileOverlay_addFileMapping$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_VirtualFileOverlay_addFileMapping"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_VirtualFileOverlay_setCaseSensitivity$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_VirtualFileOverlay_setCaseSensitivity"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_VirtualFileOverlay_writeToBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_VirtualFileOverlay_writeToBuffer"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_free$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_free"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_VirtualFileOverlay_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_VirtualFileOverlay_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_ModuleMapDescriptor_create$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ModuleMapDescriptor_create"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_ModuleMapDescriptor_setFrameworkModuleName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ModuleMapDescriptor_setFrameworkModuleName"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_ModuleMapDescriptor_setUmbrellaHeader$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ModuleMapDescriptor_setUmbrellaHeader"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_ModuleMapDescriptor_writeToBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ModuleMapDescriptor_writeToBuffer"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_ModuleMapDescriptor_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ModuleMapDescriptor_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompilationDatabase_fromDirectory$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompilationDatabase_fromDirectory"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompilationDatabase_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompilationDatabase_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompilationDatabase_getCompileCommands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompilationDatabase_getCompileCommands"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompilationDatabase_getAllCompileCommands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompilationDatabase_getAllCompileCommands"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompileCommands_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommands_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompileCommands_getSize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommands_getSize"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompileCommands_getCommand$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommands_getCommand"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_CompileCommand_getDirectory$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommand_getDirectory"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompileCommand_getFilename$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommand_getFilename"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompileCommand_getNumArgs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommand_getNumArgs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompileCommand_getArg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommand_getArg"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_CompileCommand_getNumMappedSources$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommand_getNumMappedSources"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CompileCommand_getMappedSourcePath$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommand_getMappedSourcePath"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_CompileCommand_getMappedSourceContent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CompileCommand_getMappedSourceContent"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getFileName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFileName"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getFileTime$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFileTime"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getFileUniqueID$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFileUniqueID"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_File_isEqual$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_File_isEqual"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_File_tryGetRealPathName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_File_tryGetRealPathName"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getNullLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNullLocation"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
        )
    )
}

internal val `clang_equalLocations$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_equalLocations"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXSourceLocation.layout,
            CXSourceLocation.layout,
        )
    )
}

internal val `clang_Location_isInSystemHeader$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Location_isInSystemHeader"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXSourceLocation.layout,
        )
    )
}

internal val `clang_Location_isFromMainFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Location_isFromMainFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXSourceLocation.layout,
        )
    )
}

internal val `clang_getNullRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNullRange"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
        )
    )
}

internal val `clang_getRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getRange"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
            CXSourceLocation.layout,
            CXSourceLocation.layout,
        )
    )
}

internal val `clang_equalRanges$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_equalRanges"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXSourceRange.layout,
            CXSourceRange.layout,
        )
    )
}

internal val `clang_Range_isNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Range_isNull"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXSourceRange.layout,
        )
    )
}

internal val `clang_getExpansionLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getExpansionLocation"),
        FunctionDescriptor.ofVoid(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getPresumedLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getPresumedLocation"),
        FunctionDescriptor.ofVoid(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getInstantiationLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getInstantiationLocation"),
        FunctionDescriptor.ofVoid(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getSpellingLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getSpellingLocation"),
        FunctionDescriptor.ofVoid(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getFileLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFileLocation"),
        FunctionDescriptor.ofVoid(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getRangeStart$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getRangeStart"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            CXSourceRange.layout,
        )
    )
}

internal val `clang_getRangeEnd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getRangeEnd"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            CXSourceRange.layout,
        )
    )
}

internal val `clang_disposeSourceRangeList$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeSourceRangeList"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getNumDiagnosticsInSet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNumDiagnosticsInSet"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticInSet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticInSet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_loadDiagnostics$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_loadDiagnostics"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeDiagnosticSet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeDiagnosticSet"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getChildDiagnostics$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getChildDiagnostics"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeDiagnostic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeDiagnostic"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_formatDiagnostic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_formatDiagnostic"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_defaultDiagnosticDisplayOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_defaultDiagnosticDisplayOptions"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getDiagnosticSeverity$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticSeverity"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticLocation"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticOption$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticOption"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticCategory$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticCategory"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticCategoryName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticCategoryName"),
        FunctionDescriptor.of(
            CXString.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getDiagnosticCategoryText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticCategoryText"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticNumRanges$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticNumRanges"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticRange"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getDiagnosticNumFixIts$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticNumFixIts"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnosticFixIt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticFixIt"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_createIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_createIndex"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_disposeIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeIndex"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_createIndexWithOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_createIndexWithOptions"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXIndex_setGlobalOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXIndex_setGlobalOptions"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_CXIndex_getGlobalOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXIndex_getGlobalOptions"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXIndex_setInvocationEmissionPathOption$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXIndex_setInvocationEmissionPathOption"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_isFileMultipleIncludeGuarded$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isFileMultipleIncludeGuarded"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFile"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getFileContents$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFileContents"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getLocation"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getLocationForOffset$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getLocationForOffset"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getSkippedRanges$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getSkippedRanges"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getAllSkippedRanges$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getAllSkippedRanges"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getNumDiagnostics$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNumDiagnostics"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getDiagnostic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnostic"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getDiagnosticSetFromTU$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDiagnosticSetFromTU"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getTranslationUnitSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTranslationUnitSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_createTranslationUnitFromSourceFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_createTranslationUnitFromSourceFile"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_createTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_createTranslationUnit"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_createTranslationUnit2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_createTranslationUnit2"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_defaultEditingTranslationUnitOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_defaultEditingTranslationUnitOptions"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_parseTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_parseTranslationUnit"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_parseTranslationUnit2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_parseTranslationUnit2"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_parseTranslationUnit2FullArgv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_parseTranslationUnit2FullArgv"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_defaultSaveOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_defaultSaveOptions"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_saveTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_saveTranslationUnit"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_suspendTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_suspendTranslationUnit"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeTranslationUnit"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_defaultReparseOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_defaultReparseOptions"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_reparseTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_reparseTranslationUnit"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getTUResourceUsageName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTUResourceUsageName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCXTUResourceUsage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCXTUResourceUsage"),
        FunctionDescriptor.of(
            CXTUResourceUsage.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeCXTUResourceUsage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeCXTUResourceUsage"),
        FunctionDescriptor.ofVoid(
            CXTUResourceUsage.layout,
        )
    )
}

internal val `clang_getTranslationUnitTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTranslationUnitTargetInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_TargetInfo_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TargetInfo_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_TargetInfo_getTriple$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TargetInfo_getTriple"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_TargetInfo_getPointerWidth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TargetInfo_getPointerWidth"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getNullCursor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNullCursor"),
        FunctionDescriptor.of(
            CXCursor.layout,
        )
    )
}

internal val `clang_getTranslationUnitCursor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTranslationUnitCursor"),
        FunctionDescriptor.of(
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_equalCursors$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_equalCursors"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isNull"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_hashCursor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_hashCursor"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_isDeclaration$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isDeclaration"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isInvalidDeclaration$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isInvalidDeclaration"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_isReference$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isReference"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isExpression$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isExpression"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isStatement$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isStatement"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isAttribute"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Cursor_hasAttrs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_hasAttrs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_isInvalid$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isInvalid"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isTranslationUnit"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isPreprocessing$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isPreprocessing"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isUnexposed$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isUnexposed"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCursorLinkage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorLinkage"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorVisibility$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorVisibility"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorAvailability$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorAvailability"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorPlatformAvailability$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorPlatformAvailability"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_disposeCXPlatformAvailability$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeCXPlatformAvailability"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Cursor_getVarDeclInitializer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getVarDeclInitializer"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_hasVarDeclGlobalStorage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_hasVarDeclGlobalStorage"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_hasVarDeclExternalStorage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_hasVarDeclExternalStorage"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorLanguage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorLanguage"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorTLSKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorTLSKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getTranslationUnit"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_createCXCursorSet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_createCXCursorSet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeCXCursorSet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeCXCursorSet"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXCursorSet_contains$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXCursorSet_contains"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXCursorSet_insert$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXCursorSet_insert"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorSemanticParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorSemanticParent"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorLexicalParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorLexicalParent"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getOverriddenCursors$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getOverriddenCursors"),
        FunctionDescriptor.ofVoid(
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeOverriddenCursors$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeOverriddenCursors"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getIncludedFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getIncludedFile"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursor"),
        FunctionDescriptor.of(
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            CXSourceLocation.layout,
        )
    )
}

internal val `clang_getCursorLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorLocation"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorExtent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorExtent"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getTypeSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTypeSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getTypedefDeclUnderlyingType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTypedefDeclUnderlyingType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getEnumDeclIntegerType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getEnumDeclIntegerType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getEnumConstantDeclValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getEnumConstantDeclValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXCursor.layout,
        )
    )
}

internal val `clang_getEnumConstantDeclUnsignedValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getEnumConstantDeclUnsignedValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isBitField$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isBitField"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getFieldDeclBitWidth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFieldDeclBitWidth"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getNumArguments$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getNumArguments"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getArgument$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getArgument"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Cursor_getNumTemplateArguments$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getNumTemplateArguments"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getTemplateArgumentKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getTemplateArgumentKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Cursor_getTemplateArgumentType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getTemplateArgumentType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Cursor_getTemplateArgumentValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getTemplateArgumentValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Cursor_getTemplateArgumentUnsignedValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getTemplateArgumentUnsignedValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_equalTypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_equalTypes"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getCanonicalType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCanonicalType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_isConstQualifiedType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isConstQualifiedType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_Cursor_isMacroFunctionLike$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isMacroFunctionLike"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isMacroBuiltin$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isMacroBuiltin"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isFunctionInlined$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isFunctionInlined"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_isVolatileQualifiedType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isVolatileQualifiedType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_isRestrictQualifiedType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isRestrictQualifiedType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_getAddressSpace$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getAddressSpace"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_getTypedefName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTypedefName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getPointeeType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getPointeeType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getUnqualifiedType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getUnqualifiedType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getNonReferenceType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNonReferenceType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getTypeDeclaration$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTypeDeclaration"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getDeclObjCTypeEncoding$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDeclObjCTypeEncoding"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Type_getObjCEncoding$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getObjCEncoding"),
        FunctionDescriptor.of(
            CXString.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getTypeKindSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTypeKindSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getFunctionTypeCallingConv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getFunctionTypeCallingConv"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_getResultType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getResultType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getExceptionSpecificationType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getExceptionSpecificationType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_getNumArgTypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNumArgTypes"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_getArgType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getArgType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Type_getObjCObjectBaseType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getObjCObjectBaseType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getNumObjCProtocolRefs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getNumObjCProtocolRefs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getObjCProtocolDecl$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getObjCProtocolDecl"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXType.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Type_getNumObjCTypeArgs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getNumObjCTypeArgs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getObjCTypeArg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getObjCTypeArg"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_isFunctionTypeVariadic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isFunctionTypeVariadic"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_getCursorResultType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorResultType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorExceptionSpecificationType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorExceptionSpecificationType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_isPODType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isPODType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_getElementType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getElementType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getNumElements$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNumElements"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXType.layout,
        )
    )
}

internal val `clang_getArrayElementType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getArrayElementType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_getArraySize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getArraySize"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getNamedType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getNamedType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_Type_isTransparentTagTypedef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_isTransparentTagTypedef"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getNullability$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getNullability"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getAlignOf$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getAlignOf"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getClassType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getClassType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getSizeOf$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getSizeOf"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getOffsetOf$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getOffsetOf"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXType.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Type_getModifiedType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getModifiedType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getValueType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getValueType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
        )
    )
}

internal val `clang_Cursor_getOffsetOfField$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getOffsetOfField"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isAnonymous$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isAnonymous"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isAnonymousRecordDecl$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isAnonymousRecordDecl"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isInlineNamespace$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isInlineNamespace"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Type_getNumTemplateArguments$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getNumTemplateArguments"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_Type_getTemplateArgumentAsType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getTemplateArgumentAsType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXType.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Type_getCXXRefQualifier$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_getCXXRefQualifier"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
        )
    )
}

internal val `clang_isVirtualBase$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isVirtualBase"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCXXAccessSpecifier$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCXXAccessSpecifier"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getBinaryOpcode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getBinaryOpcode"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getBinaryOpcodeStr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getBinaryOpcodeStr"),
        FunctionDescriptor.of(
            CXString.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Cursor_getStorageClass$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getStorageClass"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getNumOverloadedDecls$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNumOverloadedDecls"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getOverloadedDecl$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getOverloadedDecl"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getIBOutletCollectionType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getIBOutletCollectionType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_visitChildren$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_visitChildren"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_visitChildrenWithBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_visitChildrenWithBlock"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCursorUSR$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorUSR"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_constructUSR_ObjCClass$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_constructUSR_ObjCClass"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_constructUSR_ObjCCategory$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_constructUSR_ObjCCategory"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_constructUSR_ObjCProtocol$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_constructUSR_ObjCProtocol"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_constructUSR_ObjCIvar$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_constructUSR_ObjCIvar"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            CXString.layout,
        )
    )
}

internal val `clang_constructUSR_ObjCMethod$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_constructUSR_ObjCMethod"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            CXString.layout,
        )
    )
}

internal val `clang_constructUSR_ObjCProperty$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_constructUSR_ObjCProperty"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            CXString.layout,
        )
    )
}

internal val `clang_getCursorSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getSpellingNameRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getSpellingNameRange"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_PrintingPolicy_getProperty$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_PrintingPolicy_getProperty"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_PrintingPolicy_setProperty$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_PrintingPolicy_setProperty"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCursorPrintingPolicy$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorPrintingPolicy"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_PrintingPolicy_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_PrintingPolicy_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCursorPrettyPrinted$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorPrettyPrinted"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCursorDisplayName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorDisplayName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorReferenced$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorReferenced"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorDefinition$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorDefinition"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_isCursorDefinition$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_isCursorDefinition"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCanonicalCursor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCanonicalCursor"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getObjCSelectorIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getObjCSelectorIndex"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isDynamicCall$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isDynamicCall"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getReceiverType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getReceiverType"),
        FunctionDescriptor.of(
            CXType.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getObjCPropertyAttributes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getObjCPropertyAttributes"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Cursor_getObjCPropertyGetterName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getObjCPropertyGetterName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getObjCPropertySetterName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getObjCPropertySetterName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getObjCDeclQualifiers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getObjCDeclQualifiers"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isObjCOptional$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isObjCOptional"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isVariadic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isVariadic"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_isExternalSymbol$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_isExternalSymbol"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Cursor_getCommentRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getCommentRange"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getRawCommentText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getRawCommentText"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getBriefCommentText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getBriefCommentText"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getMangling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getMangling"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getCXXManglings$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getCXXManglings"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getObjCManglings$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getObjCManglings"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getModule"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_getModuleForFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getModuleForFile"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Module_getASTFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Module_getASTFile"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Module_getParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Module_getParent"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Module_getName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Module_getName"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Module_getFullName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Module_getFullName"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Module_isSystem$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Module_isSystem"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Module_getNumTopLevelHeaders$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Module_getNumTopLevelHeaders"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Module_getTopLevelHeader$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Module_getTopLevelHeader"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_CXXConstructor_isConvertingConstructor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXConstructor_isConvertingConstructor"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXConstructor_isCopyConstructor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXConstructor_isCopyConstructor"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXConstructor_isDefaultConstructor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXConstructor_isDefaultConstructor"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXConstructor_isMoveConstructor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXConstructor_isMoveConstructor"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXField_isMutable$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXField_isMutable"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isDefaulted$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isDefaulted"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isDeleted$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isDeleted"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isPureVirtual$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isPureVirtual"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isStatic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isStatic"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isVirtual$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isVirtual"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isCopyAssignmentOperator$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isCopyAssignmentOperator"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isMoveAssignmentOperator$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isMoveAssignmentOperator"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isExplicit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isExplicit"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXRecord_isAbstract$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXRecord_isAbstract"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_EnumDecl_isScoped$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EnumDecl_isScoped"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_CXXMethod_isConst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXXMethod_isConst"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getTemplateCursorKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTemplateCursorKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getSpecializedCursorTemplate$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getSpecializedCursorTemplate"),
        FunctionDescriptor.of(
            CXCursor.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCursorReferenceNameRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorReferenceNameRange"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
            CXCursor.layout,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getToken$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getToken"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            CXSourceLocation.layout,
        )
    )
}

internal val `clang_getTokenKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTokenKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXToken.layout,
        )
    )
}

internal val `clang_getTokenSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTokenSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            CXToken.layout,
        )
    )
}

internal val `clang_getTokenLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTokenLocation"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
            CXToken.layout,
        )
    )
}

internal val `clang_getTokenExtent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getTokenExtent"),
        FunctionDescriptor.of(
            CXSourceRange.layout,
            `$RuntimeHelper`.POINTER,
            CXToken.layout,
        )
    )
}

internal val `clang_tokenize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_tokenize"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            CXSourceRange.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_annotateTokens$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_annotateTokens"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeTokens$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeTokens"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCursorKindSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorKindSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getDefinitionSpellingAndExtent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getDefinitionSpellingAndExtent"),
        FunctionDescriptor.ofVoid(
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_enableStackTraces$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_enableStackTraces"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `clang_executeOnThread$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_executeOnThread"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCompletionChunkKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionChunkKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCompletionChunkText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionChunkText"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCompletionChunkCompletionString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionChunkCompletionString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getNumCompletionChunks$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getNumCompletionChunks"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCompletionPriority$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionPriority"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCompletionAvailability$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionAvailability"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCompletionNumAnnotations$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionNumAnnotations"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCompletionAnnotation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionAnnotation"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCompletionParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionParent"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCompletionBriefComment$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionBriefComment"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getCursorCompletionString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorCompletionString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_getCompletionNumFixIts$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionNumFixIts"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCompletionFixIt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCompletionFixIt"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_defaultCodeCompleteOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_defaultCodeCompleteOptions"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_codeCompleteAt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_codeCompleteAt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_sortCodeCompletionResults$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_sortCodeCompletionResults"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_disposeCodeCompleteResults$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeCodeCompleteResults"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_codeCompleteGetNumDiagnostics$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_codeCompleteGetNumDiagnostics"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_codeCompleteGetDiagnostic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_codeCompleteGetDiagnostic"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_codeCompleteGetContexts$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_codeCompleteGetContexts"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_codeCompleteGetContainerKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_codeCompleteGetContainerKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_codeCompleteGetContainerUSR$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_codeCompleteGetContainerUSR"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_codeCompleteGetObjCSelector$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_codeCompleteGetObjCSelector"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getClangVersion$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getClangVersion"),
        FunctionDescriptor.of(
            CXString.layout,
        )
    )
}

internal val `clang_toggleCrashRecovery$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_toggleCrashRecovery"),
        FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getInclusions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getInclusions"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_Cursor_Evaluate$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_Evaluate"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            CXCursor.layout,
        )
    )
}

internal val `clang_EvalResult_getKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_getKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_EvalResult_getAsInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_getAsInt"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_EvalResult_getAsLongLong$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_getAsLongLong"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_EvalResult_isUnsignedInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_isUnsignedInt"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_EvalResult_getAsUnsigned$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_getAsUnsigned"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_EvalResult_getAsDouble$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_getAsDouble"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_DOUBLE,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_EvalResult_getAsStr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_getAsStr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_EvalResult_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_EvalResult_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getRemappings$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getRemappings"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getRemappingsFromFileList$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getRemappingsFromFileList"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_remap_getNumFiles$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_remap_getNumFiles"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_remap_getFilenames$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_remap_getFilenames"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_remap_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_remap_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_findReferencesInFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_findReferencesInFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            CXCursorAndRangeVisitor.layout,
        )
    )
}

internal val `clang_findIncludesInFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_findIncludesInFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            CXCursorAndRangeVisitor.layout,
        )
    )
}

internal val `clang_findReferencesInFileWithBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_findReferencesInFileWithBlock"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_findIncludesInFileWithBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_findIncludesInFileWithBlock"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_isEntityObjCContainerKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_isEntityObjCContainerKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_index_getObjCContainerDeclInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getObjCContainerDeclInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getObjCInterfaceDeclInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getObjCInterfaceDeclInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getObjCCategoryDeclInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getObjCCategoryDeclInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getObjCProtocolRefListInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getObjCProtocolRefListInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getObjCPropertyDeclInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getObjCPropertyDeclInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getIBOutletCollectionAttrInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getIBOutletCollectionAttrInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getCXXClassDeclInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getCXXClassDeclInfo"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getClientContainer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getClientContainer"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_setClientContainer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_setClientContainer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_getClientEntity$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_getClientEntity"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_index_setClientEntity$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_index_setClientEntity"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_IndexAction_create$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_IndexAction_create"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_IndexAction_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_IndexAction_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_indexSourceFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_indexSourceFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_indexSourceFileFullArgv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_indexSourceFileFullArgv"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_indexTranslationUnit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_indexTranslationUnit"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_indexLoc_getFileLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_indexLoc_getFileLocation"),
        FunctionDescriptor.ofVoid(
            CXIdxLoc.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_indexLoc_getCXSourceLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_indexLoc_getCXSourceLocation"),
        FunctionDescriptor.of(
            CXSourceLocation.layout,
            CXIdxLoc.layout,
        )
    )
}

internal val `clang_Type_visitFields$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Type_visitFields"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXType.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getBinaryOperatorKindSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getBinaryOperatorKindSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCursorBinaryOperatorKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorBinaryOperatorKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_getUnaryOperatorKindSpelling$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getUnaryOperatorKindSpelling"),
        FunctionDescriptor.of(
            CXString.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_getCursorUnaryOperatorKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getCursorUnaryOperatorKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXCursor.layout,
        )
    )
}

internal val `clang_Cursor_getParsedComment$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Cursor_getParsedComment"),
        FunctionDescriptor.of(
            CXComment.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_Comment_getKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Comment_getKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_Comment_getNumChildren$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Comment_getNumChildren"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_Comment_getChild$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Comment_getChild"),
        FunctionDescriptor.of(
            CXComment.layout,
            CXComment.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_Comment_isWhitespace$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_Comment_isWhitespace"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_InlineContentComment_hasTrailingNewline$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_InlineContentComment_hasTrailingNewline"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_TextComment_getText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TextComment_getText"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_InlineCommandComment_getCommandName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_InlineCommandComment_getCommandName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_InlineCommandComment_getRenderKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_InlineCommandComment_getRenderKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_InlineCommandComment_getNumArgs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_InlineCommandComment_getNumArgs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_InlineCommandComment_getArgText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_InlineCommandComment_getArgText"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_HTMLTagComment_getTagName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_HTMLTagComment_getTagName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_HTMLStartTagComment_isSelfClosing$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_HTMLStartTagComment_isSelfClosing"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_HTMLStartTag_getNumAttrs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_HTMLStartTag_getNumAttrs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_HTMLStartTag_getAttrName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_HTMLStartTag_getAttrName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_HTMLStartTag_getAttrValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_HTMLStartTag_getAttrValue"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_BlockCommandComment_getCommandName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_BlockCommandComment_getCommandName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_BlockCommandComment_getNumArgs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_BlockCommandComment_getNumArgs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_BlockCommandComment_getArgText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_BlockCommandComment_getArgText"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_BlockCommandComment_getParagraph$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_BlockCommandComment_getParagraph"),
        FunctionDescriptor.of(
            CXComment.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_ParamCommandComment_getParamName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ParamCommandComment_getParamName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_ParamCommandComment_isParamIndexValid$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ParamCommandComment_isParamIndexValid"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_ParamCommandComment_getParamIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ParamCommandComment_getParamIndex"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_ParamCommandComment_isDirectionExplicit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ParamCommandComment_isDirectionExplicit"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_ParamCommandComment_getDirection$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_ParamCommandComment_getDirection"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_TParamCommandComment_getParamName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TParamCommandComment_getParamName"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_TParamCommandComment_isParamPositionValid$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TParamCommandComment_isParamPositionValid"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_TParamCommandComment_getDepth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TParamCommandComment_getDepth"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
        )
    )
}

internal val `clang_TParamCommandComment_getIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_TParamCommandComment_getIndex"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            CXComment.layout,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `clang_VerbatimBlockLineComment_getText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_VerbatimBlockLineComment_getText"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_VerbatimLineComment_getText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_VerbatimLineComment_getText"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_HTMLTagComment_getAsString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_HTMLTagComment_getAsString"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_FullComment_getAsHTML$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_FullComment_getAsHTML"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_FullComment_getAsXML$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_FullComment_getAsXML"),
        FunctionDescriptor.of(
            CXString.layout,
            CXComment.layout,
        )
    )
}

internal val `clang_createAPISet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_createAPISet"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_disposeAPISet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_disposeAPISet"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getSymbolGraphForUSR$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getSymbolGraphForUSR"),
        FunctionDescriptor.of(
            CXString.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_getSymbolGraphForCursor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_getSymbolGraphForCursor"),
        FunctionDescriptor.of(
            CXString.layout,
            CXCursor.layout,
        )
    )
}

internal val `clang_install_aborting_llvm_fatal_error_handler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_install_aborting_llvm_fatal_error_handler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `clang_uninstall_llvm_fatal_error_handler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_uninstall_llvm_fatal_error_handler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `clang_CXRewriter_create$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXRewriter_create"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXRewriter_insertTextBefore$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXRewriter_insertTextBefore"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            CXSourceLocation.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXRewriter_replaceText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXRewriter_replaceText"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            CXSourceRange.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXRewriter_removeText$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXRewriter_removeText"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            CXSourceRange.layout,
        )
    )
}

internal val `clang_CXRewriter_overwriteChangedFiles$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXRewriter_overwriteChangedFiles"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXRewriter_writeMainFileToStdOut$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXRewriter_writeMainFileToStdOut"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `clang_CXRewriter_dispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("clang_CXRewriter_dispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}
