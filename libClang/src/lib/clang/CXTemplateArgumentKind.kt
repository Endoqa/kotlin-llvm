// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Describes the kind of a template argument.
 *
 * See the definition of llvm::clang::TemplateArgument::ArgKind for full
 * element descriptions.
 */
public enum class CXTemplateArgumentKind(
    public val `value`: Int,
) {
    Null(0),
    Type(1),
    Declaration(2),
    NullPtr(3),
    Integral(4),
    Template(5),
    TemplateExpansion(6),
    Expression(7),
    Pack(8),

    /**
     * Indicates an error case, preventing the kind from being deduced.
     */
    Invalid(9),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXTemplateArgumentKind::class.java,
            "fromInt",
            MethodType.methodType(CXTemplateArgumentKind::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXTemplateArgumentKind::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXTemplateArgumentKind = when (value) {
            Null.value -> Null
            Type.value -> Type
            Declaration.value -> Declaration
            NullPtr.value -> NullPtr
            Integral.value -> Integral
            Template.value -> Template
            TemplateExpansion.value -> TemplateExpansion
            Expression.value -> Expression
            Pack.value -> Pack
            Invalid.value -> Invalid
            else -> error("enum not found")
        }
    }
}
