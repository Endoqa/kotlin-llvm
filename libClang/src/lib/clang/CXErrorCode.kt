// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Error codes returned by libclang routines.
 *
 * Zero (\c CXError_Success) is the only error code indicating success.  Other
 * error codes, including not yet assigned non-zero values, indicate errors.
 */
public enum class CXErrorCode(
    public val `value`: Int,
) {
    /**
     *
     * No error.
     */
    Success(0),

    /**
     *
     * A generic error code, no further details are available.
     *
     * Errors of this kind can get their own specific error codes in future
     * libclang versions.
     */
    Failure(1),

    /**
     *
     * libclang crashed while performing the requested operation.
     */
    Crashed(2),

    /**
     *
     * The function detected that the arguments violate the function
     * contract.
     */
    InvalidArguments(3),

    /**
     *
     * An AST deserialization error has occurred.
     */
    ASTReadError(4),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXErrorCode::class.java,
            "fromInt",
            MethodType.methodType(CXErrorCode::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXErrorCode::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXErrorCode = when (value) {
            Success.value -> Success
            Failure.value -> Failure
            Crashed.value -> Crashed
            InvalidArguments.value -> InvalidArguments
            ASTReadError.value -> ASTReadError
            else -> error("enum not found")
        }
    }
}
