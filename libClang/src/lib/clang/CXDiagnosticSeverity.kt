// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 *
 * Describes the severity of a particular diagnostic.
 */
public enum class CXDiagnosticSeverity(
    public val `value`: Int,
) {
    /**
     *
     * A diagnostic that has been suppressed, e.g., by a command-line
     * option.
     */
    Ignored(0),

    /**
     *
     * This diagnostic is a note that should be attached to the
     * previous (non-note) diagnostic.
     */
    Note(1),

    /**
     *
     * This diagnostic indicates suspicious code that may not be
     * wrong.
     */
    Warning(2),

    /**
     *
     * This diagnostic indicates that the code is ill-formed.
     */
    Error(3),

    /**
     *
     * This diagnostic indicates that the code is ill-formed such
     * that future parser recovery is unlikely to produce useful
     * results.
     */
    Fatal(4),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXDiagnosticSeverity::class.java,
            "fromInt",
            MethodType.methodType(CXDiagnosticSeverity::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXDiagnosticSeverity::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): CXDiagnosticSeverity = when (value) {
            Ignored.value -> Ignored
            Note.value -> Note
            Warning.value -> Warning
            Error.value -> Error
            Fatal.value -> Fatal
            else -> error("enum not found")
        }
    }
}
