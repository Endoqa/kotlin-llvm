// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 *
 * Data for ppIncludedFile callback.
 */
@JvmInline
public value class CXIdxIncludedFileInfo(
    public val `$mem`: MemorySegment,
) {
    public var hashLoc: CXIdxLoc
        get() = CXIdxLoc(hashLocHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.hashLoc.`$mem`, 0L, CXIdxLoc.layout.byteSize())
        }

    public var filename: Pointer<Byte>
        get() = filenameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            filenameHandle.set(this.`$mem`, 0L, value)
        }

    public var `file`: CXFile
        get() = fileHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            fileHandle.set(this.`$mem`, 0L, value)
        }

    public var isImport: Int
        get() = isImportHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isImportHandle.set(this.`$mem`, 0L, value)
        }

    public var isAngled: Int
        get() = isAngledHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isAngledHandle.set(this.`$mem`, 0L, value)
        }

    public var isModuleImport: Int
        get() = isModuleImportHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isModuleImportHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            CXIdxLoc.layout.withName("hashLoc"),
            `$RuntimeHelper`.POINTER.withName("filename"),
            `$RuntimeHelper`.POINTER.withName("file"),
            ValueLayout.JAVA_INT.withName("isImport"),
            ValueLayout.JAVA_INT.withName("isAngled"),
            ValueLayout.JAVA_INT.withName("isModuleImport"),
            MemoryLayout.paddingLayout(4),
        ).withName("CXIdxIncludedFileInfo")

        @JvmField
        public val hashLocHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("hashLoc"))

        @JvmField
        public val filenameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("filename"))

        @JvmField
        public val fileHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("file"))

        @JvmField
        public val isImportHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isImport"))

        @JvmField
        public val isAngledHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isAngled"))

        @JvmField
        public val isModuleImportHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isModuleImport"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXIdxIncludedFileInfo =
            CXIdxIncludedFileInfo(alloc.allocate(layout))
    }
}
