// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.clang

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class CXCursorAndRangeVisitor(
    public val `$mem`: MemorySegment,
) {
    public var context: Pointer<Unit>
        get() = contextHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            contextHandle.set(this.`$mem`, 0L, value)
        }

    public var visit: Pointer<(
        context: Pointer<Unit>,
        `$p1`: CXCursor,
        `$p2`: CXSourceRange,
    ) -> CXVisitorResult>
        get() = visitHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            visitHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("context"),
            `$RuntimeHelper`.POINTER.withName("visit"),
        ).withName("CXCursorAndRangeVisitor")

        @JvmField
        public val contextHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("context"))

        @JvmField
        public val visitHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("visit"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): CXCursorAndRangeVisitor =
            CXCursorAndRangeVisitor(alloc.allocate(layout))

        public fun interface visit {
            @CFunctionInvoke
            public fun invoke(
                context: Pointer<Unit>,
                `$p1`: CXCursor,
                `$p2`: CXSourceRange,
            ): CXVisitorResult

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.filterReturnValue(MethodHandles.lookup().unreflect(visit::class.java.methods.find {
                        it.getAnnotation(CFunctionInvoke::class.java) != null
                    }
                    ), CXVisitorResult.toInt)

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_INT,
                    `$RuntimeHelper`.POINTER,
                    CXCursor.layout,
                    CXSourceRange.layout,
                )
            }
        }
    }
}
