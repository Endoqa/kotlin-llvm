// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
value class CXPlatformAvailability(
    val `$mem`: MemorySegment,
) {
    var Platform: CXString
        get() = CXString(
            PlatformHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Platform.`$mem`, 0L, CXString.layout.byteSize())
        }

    var Introduced: CXVersion
        get() = CXVersion(
            IntroducedHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Introduced.`$mem`, 0L, CXVersion.layout.byteSize())
        }

    var Deprecated: CXVersion
        get() = CXVersion(
            DeprecatedHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Deprecated.`$mem`, 0L, CXVersion.layout.byteSize())
        }

    var Obsoleted: CXVersion
        get() = CXVersion(
            ObsoletedHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Obsoleted.`$mem`, 0L, CXVersion.layout.byteSize())
        }

    var Unavailable: Int
        get() = UnavailableHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            UnavailableHandle.set(this.`$mem`, 0L, value)
        }

    var Message: CXString
        get() = CXString(
            MessageHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.Message.`$mem`, 0L, CXString.layout.byteSize())
        }

    constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    companion object {
        val layout: StructLayout = MemoryLayout.structLayout(
            CXString.layout.withName("Platform"),
            CXVersion.layout.withName("Introduced"),
            CXVersion.layout.withName("Deprecated"),
            CXVersion.layout.withName("Obsoleted"),
            ValueLayout.JAVA_INT.withName("Unavailable"),
            CXString.layout.withName("Message"),
        ).withName("CXPlatformAvailability")

        @JvmField
        val PlatformHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Platform"))

        @JvmField
        val IntroducedHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Introduced"))

        @JvmField
        val DeprecatedHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Deprecated"))

        @JvmField
        val ObsoletedHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Obsoleted"))

        @JvmField
        val UnavailableHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Unavailable"))

        @JvmField
        val MessageHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Message"))

        @JvmStatic
        fun allocate(alloc: SegmentAllocator): CXPlatformAvailability =
            CXPlatformAvailability(alloc.allocate(layout))
    }
}
