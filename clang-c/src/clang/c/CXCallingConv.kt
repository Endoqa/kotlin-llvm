// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

enum class CXCallingConv(
    val `value`: Int,
) {
    Default(0x00000000),
    C(0x00000001),
    X86StdCall(0x00000002),
    X86FastCall(0x00000003),
    X86ThisCall(0x00000004),
    X86Pascal(0x00000005),
    AAPCS(0x00000006),
    AAPCS_VFP(0x00000007),
    X86RegCall(0x00000008),
    IntelOclBicc(0x00000009),
    Win64(0x0000000a),
    X86_64Win64(0x0000000a),
    X86_64SysV(0x0000000b),
    X86VectorCall(0x0000000c),
    Swift(0x0000000d),
    PreserveMost(0x0000000e),
    PreserveAll(0x0000000f),
    AArch64VectorCall(0x00000010),
    SwiftAsync(0x00000011),
    AArch64SVEPCS(0x00000012),
    M68kRTD(0x00000013),
    Invalid(0x00000064),
    Unexposed(0x000000c8),
    ;

    companion object {
        @JvmStatic
        val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            CXCallingConv::class.java,
            "fromInt",
            MethodType.methodType(CXCallingConv::class.java, Int::class.java)
        )

        @JvmStatic
        val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            CXCallingConv::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        fun fromInt(`value`: Int): CXCallingConv = when (value) {
            0x00000000 -> Default
            0x00000001 -> C
            0x00000002 -> X86StdCall
            0x00000003 -> X86FastCall
            0x00000004 -> X86ThisCall
            0x00000005 -> X86Pascal
            0x00000006 -> AAPCS
            0x00000007 -> AAPCS_VFP
            0x00000008 -> X86RegCall
            0x00000009 -> IntelOclBicc
            0x0000000a -> Win64
            0x0000000a -> X86_64Win64
            0x0000000b -> X86_64SysV
            0x0000000c -> X86VectorCall
            0x0000000d -> Swift
            0x0000000e -> PreserveMost
            0x0000000f -> PreserveAll
            0x00000010 -> AArch64VectorCall
            0x00000011 -> SwiftAsync
            0x00000012 -> AArch64SVEPCS
            0x00000013 -> M68kRTD
            0x00000064 -> Invalid
            0x000000c8 -> Unexposed
            else -> error("enum not found")
        }
    }
}
