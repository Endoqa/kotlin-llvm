// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
value class CXUnsavedFile(
    val `$mem`: MemorySegment,
) {
    var Filename: Pointer<Byte>
        get() = FilenameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            FilenameHandle.set(this.`$mem`, 0L, value)
        }

    var Contents: Pointer<Byte>
        get() = ContentsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            ContentsHandle.set(this.`$mem`, 0L, value)
        }

    var Length: ULong
        get() = (LengthHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            LengthHandle.set(this.`$mem`, 0L, value.toLong())
        }

    constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    companion object {
        val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("Filename"),
            `$RuntimeHelper`.POINTER.withName("Contents"),
            ValueLayout.JAVA_LONG.withName("Length"),
        ).withName("CXUnsavedFile")

        @JvmField
        val FilenameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Filename"))

        @JvmField
        val ContentsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Contents"))

        @JvmField
        val LengthHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Length"))

        @JvmStatic
        fun allocate(alloc: SegmentAllocator): CXUnsavedFile =
            CXUnsavedFile(alloc.allocate(layout))
    }
}
