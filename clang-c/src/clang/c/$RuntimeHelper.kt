// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.*
import kotlin.jvm.optionals.getOrElse

typealias Pointer<T> = MemorySegment

typealias NativeArray<T> = MemorySegment

typealias Void = Unit

typealias NativeMemory<T> = MemorySegment

object `$RuntimeHelper` {
    @JvmStatic
    val linker: Linker = Linker.nativeLinker()

    @JvmStatic
    val loaderLookup: SymbolLookup = SymbolLookup.loaderLookup()

    @JvmStatic
    val POINTER: AddressLayout =
        ValueLayout.ADDRESS.withTargetLayout(
            MemoryLayout.sequenceLayout(
                Long.MAX_VALUE,
                ValueLayout.JAVA_BYTE
            )
        )

    @JvmStatic
    val symbolLookup: SymbolLookup = SymbolLookup { name ->
        val inLoader = loaderLookup.find(name)
        if (inLoader.isEmpty) {
            loaderLookup.find(name)
        } else {
            inLoader
        }
    }

    @JvmStatic
    fun findSymbol(symbol: String): MemorySegment = symbolLookup.find(symbol).getOrElse {
        error("unable to find symbol $symbol")
    }
}
