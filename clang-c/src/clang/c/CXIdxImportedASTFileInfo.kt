// this file is auto generated by endoqa kotlin ffi, modify it with caution
package clang.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
value class CXIdxImportedASTFileInfo(
    val `$mem`: MemorySegment,
) {
    var `file`: CXFile
        get() = fileHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            fileHandle.set(this.`$mem`, 0L, value)
        }

    var module: CXModule
        get() = moduleHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            moduleHandle.set(this.`$mem`, 0L, value)
        }

    var loc: CXIdxLoc
        get() = CXIdxLoc(
            locHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.loc.`$mem`, 0L, CXIdxLoc.layout.byteSize())
        }

    var isImplicit: Int
        get() = isImplicitHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            isImplicitHandle.set(this.`$mem`, 0L, value)
        }

    constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    companion object {
        val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("file"),
            `$RuntimeHelper`.POINTER.withName("module"),
            CXIdxLoc.layout.withName("loc"),
            ValueLayout.JAVA_INT.withName("isImplicit"),
            MemoryLayout.paddingLayout(4),
        ).withName("CXIdxImportedASTFileInfo")

        @JvmField
        val fileHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("file"))

        @JvmField
        val moduleHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("module"))

        @JvmField
        val locHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("loc"))

        @JvmField
        val isImplicitHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isImplicit"))

        @JvmStatic
        fun allocate(alloc: SegmentAllocator): CXIdxImportedASTFileInfo =
            CXIdxImportedASTFileInfo(alloc.allocate(layout))
    }
}
