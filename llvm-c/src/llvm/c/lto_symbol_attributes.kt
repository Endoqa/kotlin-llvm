// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

public enum class lto_symbol_attributes(
    public val `value`: Int,
) {
    SYMBOLALIGNMENTMASK(0x0000001F),
    SYMBOLPERMISSIONSMASK(0x000000E0),
    SYMBOLPERMISSIONSCODE(0x000000A0),
    SYMBOLPERMISSIONSDATA(0x000000C0),
    SYMBOLPERMISSIONSRODATA(0x00000080),
    SYMBOLDEFINITIONMASK(0x00000700),
    SYMBOLDEFINITIONREGULAR(0x00000100),
    SYMBOLDEFINITIONTENTATIVE(0x00000200),
    SYMBOLDEFINITIONWEAK(0x00000300),
    SYMBOLDEFINITIONUNDEFINED(0x00000400),
    SYMBOLDEFINITIONWEAKUNDEF(0x00000500),
    SYMBOLSCOPEMASK(0x00003800),
    SYMBOLSCOPEINTERNAL(0x00000800),
    SYMBOLSCOPEHIDDEN(0x00001000),
    SYMBOLSCOPEPROTECTED(0x00002000),
    SYMBOLSCOPEDEFAULT(0x00001800),
    SYMBOLSCOPEDEFAULTCANBEHIDDEN(0x00002800),
    SYMBOLCOMDAT(0x00004000),
    SYMBOLALIAS(0x00008000),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            lto_symbol_attributes::class.java,
            "fromInt",
            MethodType.methodType(lto_symbol_attributes::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            lto_symbol_attributes::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): lto_symbol_attributes = when (value) {
            SYMBOLALIGNMENTMASK.value -> SYMBOLALIGNMENTMASK
            SYMBOLPERMISSIONSMASK.value -> SYMBOLPERMISSIONSMASK
            SYMBOLPERMISSIONSCODE.value -> SYMBOLPERMISSIONSCODE
            SYMBOLPERMISSIONSDATA.value -> SYMBOLPERMISSIONSDATA
            SYMBOLPERMISSIONSRODATA.value -> SYMBOLPERMISSIONSRODATA
            SYMBOLDEFINITIONMASK.value -> SYMBOLDEFINITIONMASK
            SYMBOLDEFINITIONREGULAR.value -> SYMBOLDEFINITIONREGULAR
            SYMBOLDEFINITIONTENTATIVE.value -> SYMBOLDEFINITIONTENTATIVE
            SYMBOLDEFINITIONWEAK.value -> SYMBOLDEFINITIONWEAK
            SYMBOLDEFINITIONUNDEFINED.value -> SYMBOLDEFINITIONUNDEFINED
            SYMBOLDEFINITIONWEAKUNDEF.value -> SYMBOLDEFINITIONWEAKUNDEF
            SYMBOLSCOPEMASK.value -> SYMBOLSCOPEMASK
            SYMBOLSCOPEINTERNAL.value -> SYMBOLSCOPEINTERNAL
            SYMBOLSCOPEHIDDEN.value -> SYMBOLSCOPEHIDDEN
            SYMBOLSCOPEPROTECTED.value -> SYMBOLSCOPEPROTECTED
            SYMBOLSCOPEDEFAULT.value -> SYMBOLSCOPEDEFAULT
            SYMBOLSCOPEDEFAULTCANBEHIDDEN.value -> SYMBOLSCOPEDEFAULTCANBEHIDDEN
            SYMBOLCOMDAT.value -> SYMBOLCOMDAT
            SYMBOLALIAS.value -> SYMBOLALIAS
            else -> error("enum not found")
        }
    }
}
