// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class LLVMOrcCLookupSetElement(
    public val `$mem`: MemorySegment,
) {
    public var Name: LLVMOrcSymbolStringPoolEntryRef
        get() = LLVMOrcCLookupSetElement.NameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            LLVMOrcCLookupSetElement.NameHandle.set(this.`$mem`, 0L, value)
        }

    public var LookupFlags: LLVMOrcSymbolLookupFlags
        get() =
            LLVMOrcSymbolLookupFlags.fromInt(
                LLVMOrcCLookupSetElement.LookupFlagsHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            LLVMOrcCLookupSetElement.LookupFlagsHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(LLVMOrcCLookupSetElement.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("Name"),
            ValueLayout.JAVA_INT.withName("LookupFlags"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("LLVMOrcCLookupSetElement")

        @JvmField
        public val NameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Name"))

        @JvmField
        public val LookupFlagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("LookupFlags"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): LLVMOrcCLookupSetElement =
            LLVMOrcCLookupSetElement(alloc.allocate(LLVMOrcCLookupSetElement.layout))
    }
}
