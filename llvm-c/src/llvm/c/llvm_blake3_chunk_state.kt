// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Byte
import kotlin.Long
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class llvm_blake3_chunk_state(
  public val `$mem`: MemorySegment,
) {
  public val cv: NativeArray<uint32_t>
    get() = llvm_blake3_chunk_state.cvHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

  public var chunk_counter: uint64_t
    get() = (llvm_blake3_chunk_state.chunk_counterHandle.get(this.`$mem`, 0L) as Long).toULong()
    set(`value`) {
      llvm_blake3_chunk_state.chunk_counterHandle.set(this.`$mem`, 0L,value.toLong())
    }

  public val buf: NativeArray<uint8_t>
    get() = llvm_blake3_chunk_state.bufHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

  public var buf_len: uint8_t
    get() = (llvm_blake3_chunk_state.buf_lenHandle.get(this.`$mem`, 0L) as Byte).toUByte()
    set(`value`) {
      llvm_blake3_chunk_state.buf_lenHandle.set(this.`$mem`, 0L,value.toByte())
    }

  public var blocks_compressed: uint8_t
    get() = (llvm_blake3_chunk_state.blocks_compressedHandle.get(this.`$mem`, 0L) as Byte).toUByte()
    set(`value`) {
      llvm_blake3_chunk_state.blocks_compressedHandle.set(this.`$mem`, 0L,value.toByte())
    }

  public var flags: uint8_t
    get() = (llvm_blake3_chunk_state.flagsHandle.get(this.`$mem`, 0L) as Byte).toUByte()
    set(`value`) {
      llvm_blake3_chunk_state.flagsHandle.set(this.`$mem`, 0L,value.toByte())
    }

  public constructor(gc: Boolean) : this(kotlin.run {
      require(gc) { "Do not call this if gc is not want" }
      Arena.ofAuto().allocate(llvm_blake3_chunk_state.layout)
  })

  public companion object {
    public val layout: StructLayout = MemoryLayout.structLayout(
      MemoryLayout.sequenceLayout(8L,ValueLayout.JAVA_INT).withName("cv"),
      ValueLayout.JAVA_LONG.withName("chunk_counter"),
      MemoryLayout.sequenceLayout(64L,ValueLayout.JAVA_BYTE).withName("buf"),
      ValueLayout.JAVA_BYTE.withName("buf_len"),
      ValueLayout.JAVA_BYTE.withName("blocks_compressed"),
      ValueLayout.JAVA_BYTE.withName("flags"),
      java.lang.foreign.MemoryLayout.paddingLayout(5),
    ).withName("llvm_blake3_chunk_state")

    @JvmField
    public val cvHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("cv"))

    @JvmField
    public val chunk_counterHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("chunk_counter"))

    @JvmField
    public val bufHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("buf"))

    @JvmField
    public val buf_lenHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("buf_len"))

    @JvmField
    public val blocks_compressedHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("blocks_compressed"))

    @JvmField
    public val flagsHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("flags"))

    @JvmStatic
    public fun allocate(alloc: SegmentAllocator): llvm_blake3_chunk_state =
        llvm_blake3_chunk_state(alloc.allocate(llvm_blake3_chunk_state.layout))
  }
}
