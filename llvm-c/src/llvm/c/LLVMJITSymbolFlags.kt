// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class LLVMJITSymbolFlags(
    public val `$mem`: MemorySegment,
) {
    public var GenericFlags: uint8_t
        get() = (LLVMJITSymbolFlags.GenericFlagsHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            LLVMJITSymbolFlags.GenericFlagsHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public var TargetFlags: uint8_t
        get() = (LLVMJITSymbolFlags.TargetFlagsHandle.get(this.`$mem`, 0L) as Byte).toUByte()
        set(`value`) {
            LLVMJITSymbolFlags.TargetFlagsHandle.set(this.`$mem`, 0L, value.toByte())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(LLVMJITSymbolFlags.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_BYTE.withName("GenericFlags"),
            ValueLayout.JAVA_BYTE.withName("TargetFlags"),
        ).withName("LLVMJITSymbolFlags")

        @JvmField
        public val GenericFlagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("GenericFlags"))

        @JvmField
        public val TargetFlagsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("TargetFlags"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): LLVMJITSymbolFlags =
            LLVMJITSymbolFlags(alloc.allocate(LLVMJITSymbolFlags.layout))
    }
}
