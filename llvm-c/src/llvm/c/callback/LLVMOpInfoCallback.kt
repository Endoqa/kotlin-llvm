// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c.callback

import llvm.c.`$RuntimeHelper`
import llvm.c.Pointer
import llvm.c.uint64_t
import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles

public fun interface LLVMOpInfoCallback {
    public fun invoke(
        DisInfo: Pointer<Unit>,
        PC: uint64_t,
        Offset: uint64_t,
        OpSize: uint64_t,
        InstSize: uint64_t,
        TagType: Int,
        TagBuf: Pointer<Unit>,
    ): Int

    public fun allocate(arena: Arena): MemorySegment =
        Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

    public companion object {
        @JvmStatic
        public val invokeHandle: MethodHandle =
            MethodHandles.lookup().unreflect(LLVMOpInfoCallback::class.java.methods.find {
                it.name == "invoke"
            }
            )

        @JvmStatic
        public val fd: FunctionDescriptor = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    }
}
