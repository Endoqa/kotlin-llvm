// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Byte
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class llvm_blake3_hasher(
  public val `$mem`: MemorySegment,
) {
  public val key: NativeArray<uint32_t>
    get() = llvm_blake3_hasher.keyHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

  public var chunk: llvm_blake3_chunk_state
    get() = llvm_blake3_chunk_state(llvm_blake3_hasher.chunkHandle.invokeExact(this.`$mem`, 0L) as
          MemorySegment)
    set(`value`) {
      MemorySegment.copy(value.`$mem`, 0L, this.chunk.`$mem`, 0L,
          llvm_blake3_chunk_state.layout.byteSize())
    }

  public var cv_stack_len: uint8_t
    get() = (llvm_blake3_hasher.cv_stack_lenHandle.get(this.`$mem`, 0L) as Byte).toUByte()
    set(`value`) {
      llvm_blake3_hasher.cv_stack_lenHandle.set(this.`$mem`, 0L,value.toByte())
    }

  public val cv_stack: NativeArray<uint8_t>
    get() = llvm_blake3_hasher.cv_stackHandle.invokeExact(this.`$mem`, 0L) as MemorySegment

  public constructor(gc: Boolean) : this(kotlin.run {
      require(gc) { "Do not call this if gc is not want" }
      Arena.ofAuto().allocate(llvm_blake3_hasher.layout)
  })

  public companion object {
    public val layout: StructLayout = MemoryLayout.structLayout(
      MemoryLayout.sequenceLayout(8L,ValueLayout.JAVA_INT).withName("key"),
      llvm_blake3_chunk_state.layout.withName("chunk"),
      ValueLayout.JAVA_BYTE.withName("cv_stack_len"),
      MemoryLayout.sequenceLayout(1760L,ValueLayout.JAVA_BYTE).withName("cv_stack"),
      java.lang.foreign.MemoryLayout.paddingLayout(7),
    ).withName("llvm_blake3_hasher")

    @JvmField
    public val keyHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("key"))

    @JvmField
    public val chunkHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("chunk"))

    @JvmField
    public val cv_stack_lenHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("cv_stack_len"))

    @JvmField
    public val cv_stackHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("cv_stack"))

    @JvmStatic
    public fun allocate(alloc: SegmentAllocator): llvm_blake3_hasher =
        llvm_blake3_hasher(alloc.allocate(llvm_blake3_hasher.layout))
  }
}
