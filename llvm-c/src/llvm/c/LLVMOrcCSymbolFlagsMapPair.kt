// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class LLVMOrcCSymbolFlagsMapPair(
    public val `$mem`: MemorySegment,
) {
    public var Name: LLVMOrcSymbolStringPoolEntryRef
        get() = LLVMOrcCSymbolFlagsMapPair.NameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            LLVMOrcCSymbolFlagsMapPair.NameHandle.set(this.`$mem`, 0L, value)
        }

    public var Flags: LLVMJITSymbolFlags
        get() = LLVMJITSymbolFlags(
            LLVMOrcCSymbolFlagsMapPair.FlagsHandle.invokeExact(this.`$mem`, 0L)
                as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.Flags.`$mem`, 0L,
                LLVMJITSymbolFlags.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(LLVMOrcCSymbolFlagsMapPair.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("Name"),
            LLVMJITSymbolFlags.layout.withName("Flags"),
            java.lang.foreign.MemoryLayout.paddingLayout(6),
        ).withName("LLVMOrcCSymbolFlagsMapPair")

        @JvmField
        public val NameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Name"))

        @JvmField
        public val FlagsHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Flags"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): LLVMOrcCSymbolFlagsMapPair =
            LLVMOrcCSymbolFlagsMapPair(alloc.allocate(LLVMOrcCSymbolFlagsMapPair.layout))
    }
}
