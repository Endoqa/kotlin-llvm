// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class LLVMOrcCSymbolsList(
    public val `$mem`: MemorySegment,
) {
    public var Symbols: Pointer<LLVMOrcSymbolStringPoolEntryRef>
        get() = LLVMOrcCSymbolsList.SymbolsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            LLVMOrcCSymbolsList.SymbolsHandle.set(this.`$mem`, 0L, value)
        }

    public var Length: ULong
        get() = (LLVMOrcCSymbolsList.LengthHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            LLVMOrcCSymbolsList.LengthHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(LLVMOrcCSymbolsList.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("Symbols"),
            ValueLayout.JAVA_LONG.withName("Length"),
        ).withName("LLVMOrcCSymbolsList")

        @JvmField
        public val SymbolsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Symbols"))

        @JvmField
        public val LengthHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Length"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): LLVMOrcCSymbolsList =
            LLVMOrcCSymbolsList(alloc.allocate(LLVMOrcCSymbolsList.layout))
    }
}
