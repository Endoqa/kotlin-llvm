// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class LLVMJITEvaluatedSymbol(
    public val `$mem`: MemorySegment,
) {
    public var Address: LLVMOrcExecutorAddress
        get() = (LLVMJITEvaluatedSymbol.AddressHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            LLVMJITEvaluatedSymbol.AddressHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var Flags: LLVMJITSymbolFlags
        get() = LLVMJITSymbolFlags(
            LLVMJITEvaluatedSymbol.FlagsHandle.invokeExact(this.`$mem`, 0L) as
                MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.Flags.`$mem`, 0L,
                LLVMJITSymbolFlags.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(LLVMJITEvaluatedSymbol.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_LONG.withName("Address"),
            LLVMJITSymbolFlags.layout.withName("Flags"),
            java.lang.foreign.MemoryLayout.paddingLayout(6),
        ).withName("LLVMJITEvaluatedSymbol")

        @JvmField
        public val AddressHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Address"))

        @JvmField
        public val FlagsHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("Flags"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): LLVMJITEvaluatedSymbol =
            LLVMJITEvaluatedSymbol(alloc.allocate(LLVMJITEvaluatedSymbol.layout))
    }
}
