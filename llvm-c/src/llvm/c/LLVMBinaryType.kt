// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

public enum class LLVMBinaryType(
    public val `value`: Int,
) {
    Archive(0),
    MachOUniversalBinary(1),
    COFFImportFile(2),
    IR(3),
    WinRes(4),
    COFF(5),
    ELF32L(6),
    ELF32B(7),
    ELF64L(8),
    ELF64B(9),
    MachO32L(10),
    MachO32B(11),
    MachO64L(12),
    MachO64B(13),
    Wasm(14),
    Offload(15),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            LLVMBinaryType::class.java,
            "fromInt",
            MethodType.methodType(LLVMBinaryType::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            LLVMBinaryType::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): LLVMBinaryType = when (value) {
            Archive.value -> Archive
            MachOUniversalBinary.value -> MachOUniversalBinary
            COFFImportFile.value -> COFFImportFile
            IR.value -> IR
            WinRes.value -> WinRes
            COFF.value -> COFF
            ELF32L.value -> ELF32L
            ELF32B.value -> ELF32B
            ELF64L.value -> ELF64L
            ELF64B.value -> ELF64B
            MachO32L.value -> MachO32L
            MachO32B.value -> MachO32B
            MachO64L.value -> MachO64L
            MachO64B.value -> MachO64B
            Wasm.value -> Wasm
            Offload.value -> Offload
            else -> error("enum not found")
        }
    }
}
