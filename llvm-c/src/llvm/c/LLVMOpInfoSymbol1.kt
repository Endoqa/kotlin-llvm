// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class LLVMOpInfoSymbol1(
    public val `$mem`: MemorySegment,
) {
    public var Present: uint64_t
        get() = (LLVMOpInfoSymbol1.PresentHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            LLVMOpInfoSymbol1.PresentHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var Name: Pointer<Byte>
        get() = LLVMOpInfoSymbol1.NameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            LLVMOpInfoSymbol1.NameHandle.set(this.`$mem`, 0L, value)
        }

    public var Value: uint64_t
        get() = (LLVMOpInfoSymbol1.ValueHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            LLVMOpInfoSymbol1.ValueHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(LLVMOpInfoSymbol1.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_LONG.withName("Present"),
            `$RuntimeHelper`.POINTER.withName("Name"),
            ValueLayout.JAVA_LONG.withName("Value"),
        ).withName("LLVMOpInfoSymbol1")

        @JvmField
        public val PresentHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Present"))

        @JvmField
        public val NameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Name"))

        @JvmField
        public val ValueHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("Value"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): LLVMOpInfoSymbol1 =
            LLVMOpInfoSymbol1(alloc.allocate(LLVMOpInfoSymbol1.layout))
    }
}
