// this file is auto generated by endoqa kotlin ffi, modify it with caution
package llvm.c

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int
import kotlin.jvm.JvmStatic
import llvm.c.LLVMAtomicOrdering.Acquire
import llvm.c.LLVMAtomicOrdering.AcquireRelease
import llvm.c.LLVMAtomicOrdering.Monotonic
import llvm.c.LLVMAtomicOrdering.NotAtomic
import llvm.c.LLVMAtomicOrdering.Release
import llvm.c.LLVMAtomicOrdering.SequentiallyConsistent
import llvm.c.LLVMAtomicOrdering.Unordered

public enum class LLVMAtomicOrdering(
  public val `value`: Int,
) {
  NotAtomic(0),
  Unordered(1),
  Monotonic(2),
  Acquire(4),
  Release(5),
  AcquireRelease(6),
  SequentiallyConsistent(7),
  ;

  public companion object {
    @JvmStatic
    public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            LLVMAtomicOrdering::class.java,
            "fromInt",
            MethodType.methodType(LLVMAtomicOrdering::class.java, Int::class.java)
        )

    @JvmStatic
    public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            LLVMAtomicOrdering::class.java,
            "value",
            Int::class.java
        )

    @JvmStatic
    public fun fromInt(`value`: Int): LLVMAtomicOrdering = when (value) {
      NotAtomic.value -> NotAtomic
      Unordered.value -> Unordered
      Monotonic.value -> Monotonic
      Acquire.value -> Acquire
      Release.value -> Release
      AcquireRelease.value -> AcquireRelease
      SequentiallyConsistent.value -> SequentiallyConsistent
      else -> error("enum not found")
    }
  }
}
