// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm.proc

import lib.llvm.`$RuntimeHelper`
import lib.llvm.CFunctionInvoke
import lib.llvm.Pointer
import lib.llvm.lto_codegen_diagnostic_severity_t
import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles

/**
 *
 * Diagnostic handler type.
 * \p severity defines the severity.
 * \p diag is the actual diagnostic.
 * The diagnostic is not prefixed by any of severity keyword, e.g., 'error: '.
 * \p ctxt is used to pass the context set with the diagnostic handler.
 *
 * \since LTO_API_VERSION=7
 */
public fun interface lto_diagnostic_handler_t {
    @CFunctionInvoke
    public fun invoke(
        severity: lto_codegen_diagnostic_severity_t,
        diag: Pointer<Byte>,
        ctxt: Pointer<Unit>,
    )

    public fun allocate(arena: Arena): MemorySegment =
        Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

    public companion object {
        @JvmStatic
        public val invokeHandle: MethodHandle =
            MethodHandles.filterArguments(
                MethodHandles.lookup().unreflect(lto_diagnostic_handler_t::class.java.methods.find {
                    it.getAnnotation(CFunctionInvoke::class.java) != null
                }
                ),
                1, lto_codegen_diagnostic_severity_t.fromInt, null, null,
            )

        @JvmStatic
        public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    }
}
