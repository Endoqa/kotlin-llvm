// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm.proc

import lib.llvm.`$RuntimeHelper`
import lib.llvm.CFunctionInvoke
import lib.llvm.LLVMDiagnosticInfoRef
import lib.llvm.Pointer
import java.lang.foreign.Arena
import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.MemorySegment
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles

/**
 *
 * @defgroup LLVMCCoreContext Contexts
 *
 * Contexts are execution states for the core LLVM IR system.
 *
 * Most types are tied to a context instance. Multiple contexts can
 * exist simultaneously. A single context is not thread safe. However,
 * different contexts can execute on different threads simultaneously.
 *
 * @{
 */
public fun interface LLVMDiagnosticHandler {
    @CFunctionInvoke
    public fun invoke(`$p0`: LLVMDiagnosticInfoRef, `$p1`: Pointer<Unit>)

    public fun allocate(arena: Arena): MemorySegment =
        Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

    public companion object {
        @JvmStatic
        public val invokeHandle: MethodHandle =
            MethodHandles.lookup().unreflect(LLVMDiagnosticHandler::class.java.methods.find {
                it.getAnnotation(CFunctionInvoke::class.java) != null
            }
            )

        @JvmStatic
        public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    }
}
