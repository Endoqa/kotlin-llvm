// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm.proc

import java.lang.foreign.Arena
import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.MemorySegment
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import kotlin.ULong
import kotlin.Unit
import kotlin.jvm.JvmStatic
import lib.llvm.LLVMErrorRef
import lib.llvm.LLVMOrcCLookupSet
import lib.llvm.LLVMOrcDefinitionGeneratorRef
import lib.llvm.LLVMOrcJITDylibLookupFlags
import lib.llvm.LLVMOrcJITDylibRef
import lib.llvm.LLVMOrcLookupKind
import lib.llvm.LLVMOrcLookupStateRef
import lib.llvm.Pointer
import lib.llvm.`$RuntimeHelper`

public fun interface LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction {
  public fun invoke(
    GeneratorObj: LLVMOrcDefinitionGeneratorRef,
    Ctx: Pointer<Unit>,
    LookupState: Pointer<LLVMOrcLookupStateRef>,
    Kind: LLVMOrcLookupKind,
    JD: LLVMOrcJITDylibRef,
    JDLookupFlags: LLVMOrcJITDylibLookupFlags,
    LookupSet: LLVMOrcCLookupSet,
    LookupSetSize: ULong,
  ): LLVMErrorRef

  public fun allocate(arena: Arena): MemorySegment =
      Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

  public companion object {
    @JvmStatic
    public val invokeHandle: MethodHandle =
        MethodHandles.filterArguments(MethodHandles.lookup().unreflect(LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction::class.java.methods.find {
          it.name == "invoke"}
        ),
            1,null,null,null,LLVMOrcLookupKind.fromInt,null,LLVMOrcJITDylibLookupFlags.fromInt,null,null,)

    @JvmStatic
    public val fd: FunctionDescriptor = FunctionDescriptor.of(
      `$RuntimeHelper`.POINTER,
      `$RuntimeHelper`.POINTER,
      `$RuntimeHelper`.POINTER,
      `$RuntimeHelper`.POINTER,
      ValueLayout.JAVA_INT,
      `$RuntimeHelper`.POINTER,
      ValueLayout.JAVA_INT,
      `$RuntimeHelper`.POINTER,
      ValueLayout.JAVA_LONG,
    )
  }
}
