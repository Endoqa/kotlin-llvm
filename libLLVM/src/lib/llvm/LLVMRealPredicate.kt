// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType

public enum class LLVMRealPredicate(
    public val `value`: Int,
) {
    PredicateFalse(0),

    /**
     * < Always false (always folded)
     */
    OEQ(1),

    /**
     * < True if ordered and equal
     */
    OGT(2),

    /**
     * < True if ordered and greater than
     */
    OGE(3),

    /**
     * < True if ordered and greater than or equal
     */
    OLT(4),

    /**
     * < True if ordered and less than
     */
    OLE(5),

    /**
     * < True if ordered and less than or equal
     */
    ONE(6),

    /**
     * < True if ordered and operands are unequal
     */
    ORD(7),

    /**
     * < True if ordered (no nans)
     */
    UNO(8),

    /**
     * < True if unordered: isnan(X) | isnan(Y)
     */
    UEQ(9),

    /**
     * < True if unordered or equal
     */
    UGT(10),

    /**
     * < True if unordered or greater than
     */
    UGE(11),

    /**
     * < True if unordered, greater than, or equal
     */
    ULT(12),

    /**
     * < True if unordered or less than
     */
    ULE(13),

    /**
     * < True if unordered, less than, or equal
     */
    UNE(14),

    /**
     * < True if unordered or not equal
     */
    PredicateTrue(15),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            LLVMRealPredicate::class.java,
            "fromInt",
            MethodType.methodType(LLVMRealPredicate::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            LLVMRealPredicate::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): LLVMRealPredicate = when (value) {
            PredicateFalse.value -> PredicateFalse
            OEQ.value -> OEQ
            OGT.value -> OGT
            OGE.value -> OGE
            OLT.value -> OLT
            OLE.value -> OLE
            ONE.value -> ONE
            ORD.value -> ORD
            UNO.value -> UNO
            UEQ.value -> UEQ
            UGT.value -> UGT
            UGE.value -> UGE
            ULT.value -> ULT
            ULE.value -> ULE
            UNE.value -> UNE
            PredicateTrue.value -> PredicateTrue
            else -> error("enum not found")
        }
    }
}
