// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle

internal val `LLVMInstallFatalErrorHandler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInstallFatalErrorHandler"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMResetFatalErrorHandler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMResetFatalErrorHandler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMEnablePrettyStackTrace$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMEnablePrettyStackTrace"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMShutdown$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMShutdown"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMGetVersion$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetVersion"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateMessage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateMessage"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeMessage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeMessage"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMContextCreate$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextCreate"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetGlobalContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetGlobalContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMContextSetDiagnosticHandler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextSetDiagnosticHandler"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMContextGetDiagnosticHandler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextGetDiagnosticHandler"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMContextGetDiagnosticContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextGetDiagnosticContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMContextSetYieldCallback$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextSetYieldCallback"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMContextShouldDiscardValueNames$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextShouldDiscardValueNames"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMContextSetDiscardValueNames$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextSetDiscardValueNames"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMContextDispose$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMContextDispose"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDiagInfoDescription$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDiagInfoDescription"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDiagInfoSeverity$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDiagInfoSeverity"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetMDKindIDInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetMDKindIDInContext"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetMDKindID$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetMDKindID"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetSyncScopeID$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetSyncScopeID"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetEnumAttributeKindForName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetEnumAttributeKindForName"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetLastEnumAttributeKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastEnumAttributeKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCreateEnumAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateEnumAttribute"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetEnumAttributeKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetEnumAttributeKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetEnumAttributeValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetEnumAttributeValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateTypeAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateTypeAttribute"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTypeAttributeValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTypeAttributeValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateConstantRangeAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateConstantRangeAttribute"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateStringAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateStringAttribute"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetStringAttributeKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetStringAttributeKind"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetStringAttributeValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetStringAttributeValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsEnumAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsEnumAttribute"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsStringAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsStringAttribute"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsTypeAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsTypeAttribute"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTypeByName2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTypeByName2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMModuleCreateWithName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMModuleCreateWithName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMModuleCreateWithNameInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMModuleCreateWithNameInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCloneModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCloneModule"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeModule"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsNewDbgInfoFormat$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsNewDbgInfoFormat"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetIsNewDbgInfoFormat$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetIsNewDbgInfoFormat"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetModuleIdentifier$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetModuleIdentifier"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetModuleIdentifier$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetModuleIdentifier"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetSourceFileName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetSourceFileName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetSourceFileName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetSourceFileName"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetDataLayoutStr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDataLayoutStr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDataLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDataLayout"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetDataLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetDataLayout"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTarget"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTarget"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCopyModuleFlagsMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCopyModuleFlagsMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeModuleFlagsMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeModuleFlagsMetadata"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMModuleFlagEntriesGetFlagBehavior$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMModuleFlagEntriesGetFlagBehavior"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMModuleFlagEntriesGetKey$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMModuleFlagEntriesGetKey"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMModuleFlagEntriesGetMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMModuleFlagEntriesGetMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetModuleFlag$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetModuleFlag"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMAddModuleFlag$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddModuleFlag"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDumpModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDumpModule"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPrintModuleToFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPrintModuleToFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPrintModuleToString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPrintModuleToString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetModuleInlineAsm$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetModuleInlineAsm"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetModuleInlineAsm2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetModuleInlineAsm2"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMAppendModuleInlineAsm$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAppendModuleInlineAsm"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetInlineAsm$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsm"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetInlineAsmAsmString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsmAsmString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInlineAsmConstraintString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsmConstraintString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInlineAsmDialect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsmDialect"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInlineAsmFunctionType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsmFunctionType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInlineAsmHasSideEffects$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsmHasSideEffects"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInlineAsmNeedsAlignedStack$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsmNeedsAlignedStack"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInlineAsmCanUnwind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInlineAsmCanUnwind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetModuleContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetModuleContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTypeByName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTypeByName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFirstNamedMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstNamedMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastNamedMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastNamedMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextNamedMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextNamedMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousNamedMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousNamedMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetOrInsertNamedMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetOrInsertNamedMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetNamedMetadataName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedMetadataName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedMetadataNumOperands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedMetadataNumOperands"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedMetadataOperands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedMetadataOperands"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddNamedMetadataOperand$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddNamedMetadataOperand"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDebugLocDirectory$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDebugLocDirectory"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDebugLocFilename$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDebugLocFilename"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDebugLocLine$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDebugLocLine"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDebugLocColumn$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDebugLocColumn"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedFunctionWithLength$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedFunctionWithLength"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetFirstFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetModuleInlineAsm$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetModuleInlineAsm"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTypeKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTypeKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTypeIsSized$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTypeIsSized"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTypeContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTypeContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDumpType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDumpType"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPrintTypeToString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPrintTypeToString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt1TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt1TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt8TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt8TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt16TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt16TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt32TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt32TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt64TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt64TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt128TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt128TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIntTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMInt1Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt1Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt8Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt8Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt16Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt16Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt32Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt32Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt64Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt64Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInt128Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInt128Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIntType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetIntTypeWidth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetIntTypeWidth"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMHalfTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMHalfTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBFloatTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBFloatTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFloatTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFloatTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDoubleTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDoubleTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMX86FP80TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMX86FP80TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFP128TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFP128TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPPCFP128TypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPPCFP128TypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMHalfType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMHalfType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBFloatType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBFloatType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFloatType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFloatType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDoubleType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDoubleType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMX86FP80Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMX86FP80Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFP128Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFP128Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPPCFP128Type$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPPCFP128Type"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFunctionType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFunctionType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsFunctionVarArg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsFunctionVarArg"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetReturnType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetReturnType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCountParamTypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCountParamTypes"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetParamTypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetParamTypes"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMStructTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStructTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMStructType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStructType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMStructCreateNamed$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStructCreateNamed"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetStructName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetStructName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMStructSetBody$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStructSetBody"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCountStructElementTypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCountStructElementTypes"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetStructElementTypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetStructElementTypes"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMStructGetTypeAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStructGetTypeAtIndex"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsPackedStruct$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsPackedStruct"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsOpaqueStruct$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsOpaqueStruct"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsLiteralStruct$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsLiteralStruct"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetElementType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetElementType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetSubtypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetSubtypes"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNumContainedTypes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumContainedTypes"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMArrayType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMArrayType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMArrayType2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMArrayType2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetArrayLength$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetArrayLength"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetArrayLength2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetArrayLength2"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPointerType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPointerType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMPointerTypeIsOpaque$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPointerTypeIsOpaque"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPointerTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPointerTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetPointerAddressSpace$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPointerAddressSpace"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMVectorType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMVectorType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMScalableVectorType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMScalableVectorType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetVectorSize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetVectorSize"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetConstantPtrAuthPointer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetConstantPtrAuthPointer"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetConstantPtrAuthKey$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetConstantPtrAuthKey"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetConstantPtrAuthDiscriminator$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetConstantPtrAuthDiscriminator"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetConstantPtrAuthAddrDiscriminator$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetConstantPtrAuthAddrDiscriminator"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMVoidTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMVoidTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMLabelTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMLabelTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMX86AMXTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMX86AMXTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTokenTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTokenTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMMetadataTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMetadataTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMVoidType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMVoidType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMLabelType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMLabelType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMX86AMXType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMX86AMXType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetExtTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetExtTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetTargetExtTypeName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetExtTypeName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetExtTypeNumTypeParams$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetExtTypeNumTypeParams"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetExtTypeTypeParam$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetExtTypeTypeParam"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetTargetExtTypeNumIntParams$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetExtTypeNumIntParams"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetExtTypeIntParam$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetExtTypeIntParam"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMTypeOf$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTypeOf"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetValueKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetValueKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetValueName2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetValueName2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetValueName2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetValueName2"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMDumpValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDumpValue"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPrintValueToString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPrintValueToString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetValueContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetValueContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPrintDbgRecordToString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPrintDbgRecordToString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMReplaceAllUsesWith$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMReplaceAllUsesWith"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsConstant$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsConstant"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsUndef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsUndef"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsPoison$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsPoison"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAArgument$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAArgument"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsABasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsABasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAInlineAsm$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAInlineAsm"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAUser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAUser"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstant$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstant"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsABlockAddress$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsABlockAddress"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantAggregateZero$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantAggregateZero"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantArray$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantArray"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantDataSequential$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantDataSequential"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantDataArray$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantDataArray"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantDataVector$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantDataVector"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantExpr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantExpr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantFP$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantFP"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantInt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantPointerNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantPointerNull"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantStruct$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantStruct"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantTokenNone$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantTokenNone"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantVector$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantVector"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAConstantPtrAuth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAConstantPtrAuth"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAGlobalValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAGlobalValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAGlobalAlias$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAGlobalAlias"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAGlobalObject$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAGlobalObject"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAGlobalVariable$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAGlobalVariable"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAGlobalIFunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAUndefValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAUndefValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAPoisonValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAPoisonValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAInstruction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAInstruction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAUnaryOperator$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAUnaryOperator"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsABinaryOperator$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsABinaryOperator"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACallInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACallInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAIntrinsicInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAIntrinsicInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsADbgInfoIntrinsic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsADbgInfoIntrinsic"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsADbgVariableIntrinsic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsADbgVariableIntrinsic"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsADbgDeclareInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsADbgDeclareInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsADbgLabelInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsADbgLabelInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAMemIntrinsic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAMemIntrinsic"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAMemCpyInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAMemCpyInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAMemMoveInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAMemMoveInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAMemSetInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAMemSetInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACmpInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACmpInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFCmpInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFCmpInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAICmpInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAICmpInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAExtractElementInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAExtractElementInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAGetElementPtrInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAGetElementPtrInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAInsertElementInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAInsertElementInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAInsertValueInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAInsertValueInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsALandingPadInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsALandingPadInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAPHINode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAPHINode"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsASelectInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsASelectInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAShuffleVectorInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAShuffleVectorInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAStoreInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAStoreInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsABranchInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsABranchInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAIndirectBrInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAIndirectBrInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAInvokeInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAInvokeInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAReturnInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAReturnInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsASwitchInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsASwitchInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAUnreachableInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAUnreachableInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAResumeInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAResumeInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACleanupReturnInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACleanupReturnInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACatchReturnInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACatchReturnInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACatchSwitchInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACatchSwitchInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACallBrInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACallBrInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFuncletPadInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFuncletPadInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACatchPadInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACatchPadInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACleanupPadInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACleanupPadInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAUnaryInstruction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAUnaryInstruction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAAllocaInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAAllocaInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsACastInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsACastInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAAddrSpaceCastInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAAddrSpaceCastInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsABitCastInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsABitCastInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFPExtInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFPExtInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFPToSIInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFPToSIInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFPToUIInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFPToUIInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFPTruncInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFPTruncInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAIntToPtrInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAIntToPtrInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAPtrToIntInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAPtrToIntInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsASExtInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsASExtInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsASIToFPInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsASIToFPInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsATruncInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsATruncInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAUIToFPInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAUIToFPInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAZExtInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAZExtInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAExtractValueInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAExtractValueInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsALoadInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsALoadInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAVAArgInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAVAArgInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFreezeInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFreezeInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAAtomicCmpXchgInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAAtomicCmpXchgInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAAtomicRMWInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAAtomicRMWInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAFenceInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAFenceInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAMDNode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAMDNode"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAValueAsMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAValueAsMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsAMDString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAMDString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetValueName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetValueName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetValueName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetValueName"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFirstUse$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstUse"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextUse$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextUse"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetUser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetUser"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetUsedValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetUsedValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetOperand$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetOperand"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetOperandUse$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetOperandUse"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetOperand$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetOperand"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNumOperands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumOperands"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNull"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstAllOnes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstAllOnes"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetUndef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetUndef"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPoison$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPoison"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsNull"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstPointerNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstPointerNull"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstInt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstIntOfArbitraryPrecision$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstIntOfArbitraryPrecision"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstIntOfString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstIntOfString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_BYTE,
        )
    )
}

internal val `LLVMConstIntOfStringAndSize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstIntOfStringAndSize"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
        )
    )
}

internal val `LLVMConstReal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstReal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_DOUBLE,
        )
    )
}

internal val `LLVMConstRealOfString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstRealOfString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstRealOfStringAndSize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstRealOfStringAndSize"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstIntGetZExtValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstIntGetZExtValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstIntGetSExtValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstIntGetSExtValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstRealGetDouble$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstRealGetDouble"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_DOUBLE,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstStringInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstStringInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstStringInContext2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstStringInContext2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsConstantString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsConstantString"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetAsString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAsString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstStructInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstStructInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstStruct$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstStruct"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstArray$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstArray"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstArray2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstArray2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMConstNamedStruct$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNamedStruct"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetAggregateElement$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAggregateElement"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetElementAsConstant$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetElementAsConstant"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstVector$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstVector"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstantPtrAuth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstantPtrAuth"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetConstOpcode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetConstOpcode"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAlignOf$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAlignOf"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSizeOf$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSizeOf"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNeg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNSWNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNSWNeg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNUWNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNUWNeg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNot$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNot"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstAdd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstAdd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNSWAdd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNSWAdd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNUWAdd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNUWAdd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstSub$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstSub"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNSWSub$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNSWSub"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNUWSub$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNUWSub"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstMul$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstMul"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNSWMul$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNSWMul"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstNUWMul$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstNUWMul"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstXor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstXor"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstGEP2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstGEP2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstInBoundsGEP2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstInBoundsGEP2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstGEPWithNoWrapFlags$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstGEPWithNoWrapFlags"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMConstTrunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstTrunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstPtrToInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstPtrToInt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstIntToPtr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstIntToPtr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstBitCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstBitCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstAddrSpaceCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstAddrSpaceCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstTruncOrBitCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstTruncOrBitCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstPointerCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstPointerCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstExtractElement$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstExtractElement"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstInsertElement$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstInsertElement"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstShuffleVector$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstShuffleVector"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBlockAddress$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBlockAddress"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBlockAddressFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBlockAddressFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBlockAddressBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBlockAddressBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMConstInlineAsm$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMConstInlineAsm"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetGlobalParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetGlobalParent"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsDeclaration$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsDeclaration"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLinkage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLinkage"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetLinkage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetLinkage"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetSection$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetSection"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetSection$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetSection"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetVisibility$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetVisibility"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetVisibility$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetVisibility"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetDLLStorageClass$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDLLStorageClass"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetDLLStorageClass$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetDLLStorageClass"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetUnnamedAddress$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetUnnamedAddress"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetUnnamedAddress$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetUnnamedAddress"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGlobalGetValueType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGlobalGetValueType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMHasUnnamedAddr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMHasUnnamedAddr"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetUnnamedAddr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetUnnamedAddr"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetAlignment$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAlignment"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetAlignment$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetAlignment"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGlobalSetMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGlobalSetMetadata"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGlobalEraseMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGlobalEraseMetadata"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGlobalClearMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGlobalClearMetadata"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGlobalCopyAllMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGlobalCopyAllMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeValueMetadataEntries$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeValueMetadataEntries"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMValueMetadataEntriesGetKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMValueMetadataEntriesGetKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMValueMetadataEntriesGetMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMValueMetadataEntriesGetMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddGlobal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddGlobalInAddressSpace$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddGlobalInAddressSpace"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetNamedGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedGlobal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedGlobalWithLength$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedGlobalWithLength"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetFirstGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstGlobal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastGlobal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextGlobal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousGlobal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDeleteGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDeleteGlobal"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInitializer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInitializer"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetInitializer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetInitializer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsThreadLocal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsThreadLocal"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetThreadLocal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetThreadLocal"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsGlobalConstant$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsGlobalConstant"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetGlobalConstant$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetGlobalConstant"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetThreadLocalMode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetThreadLocalMode"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetThreadLocalMode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetThreadLocalMode"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsExternallyInitialized$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsExternallyInitialized"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetExternallyInitialized$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetExternallyInitialized"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddAlias2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddAlias2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedGlobalAlias$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedGlobalAlias"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetFirstGlobalAlias$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstGlobalAlias"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastGlobalAlias$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastGlobalAlias"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextGlobalAlias$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextGlobalAlias"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousGlobalAlias$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousGlobalAlias"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAliasGetAliasee$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAliasGetAliasee"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAliasSetAliasee$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAliasSetAliasee"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDeleteFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDeleteFunction"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMHasPersonalityFn$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMHasPersonalityFn"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPersonalityFn$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPersonalityFn"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetPersonalityFn$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetPersonalityFn"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMLookupIntrinsicID$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMLookupIntrinsicID"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetIntrinsicID$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetIntrinsicID"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetIntrinsicDeclaration$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetIntrinsicDeclaration"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMIntrinsicGetType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntrinsicGetType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMIntrinsicGetName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntrinsicGetName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIntrinsicCopyOverloadedName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntrinsicCopyOverloadedName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIntrinsicCopyOverloadedName2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntrinsicCopyOverloadedName2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIntrinsicIsOverloaded$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntrinsicIsOverloaded"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetFunctionCallConv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFunctionCallConv"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetFunctionCallConv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetFunctionCallConv"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetGC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetGC"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetGC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetGC"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPrefixData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPrefixData"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMHasPrefixData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMHasPrefixData"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetPrefixData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetPrefixData"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPrologueData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPrologueData"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMHasPrologueData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMHasPrologueData"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetPrologueData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetPrologueData"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddAttributeAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddAttributeAtIndex"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetAttributeCountAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAttributeCountAtIndex"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetAttributesAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAttributesAtIndex"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetEnumAttributeAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetEnumAttributeAtIndex"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetStringAttributeAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetStringAttributeAtIndex"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMRemoveEnumAttributeAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRemoveEnumAttributeAtIndex"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMRemoveStringAttributeAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRemoveStringAttributeAtIndex"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddTargetDependentFunctionAttr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddTargetDependentFunctionAttr"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCountParams$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCountParams"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetParams$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetParams"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetParam$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetParam"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetParamParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetParamParent"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFirstParam$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstParam"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastParam$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastParam"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextParam$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextParam"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousParam$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousParam"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetParamAlignment$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetParamAlignment"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddGlobalIFunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNamedGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNamedGlobalIFunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMGetFirstGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstGlobalIFunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastGlobalIFunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextGlobalIFunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousGlobalIFunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetGlobalIFuncResolver$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetGlobalIFuncResolver"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetGlobalIFuncResolver$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetGlobalIFuncResolver"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMEraseGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMEraseGlobalIFunc"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRemoveGlobalIFunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRemoveGlobalIFunc"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMMDStringInContext2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMDStringInContext2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMMDNodeInContext2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMDNodeInContext2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMMetadataAsValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMetadataAsValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMValueAsMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMValueAsMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetMDString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetMDString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetMDNodeNumOperands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetMDNodeNumOperands"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetMDNodeOperands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetMDNodeOperands"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMReplaceMDNodeOperandWith$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMReplaceMDNodeOperandWith"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMMDStringInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMDStringInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMMDString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMDString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMMDNodeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMDNodeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMMDNode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMDNode"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCreateOperandBundle$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateOperandBundle"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMDisposeOperandBundle$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeOperandBundle"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetOperandBundleTag$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetOperandBundleTag"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNumOperandBundleArgs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumOperandBundleArgs"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetOperandBundleArgAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetOperandBundleArgAtIndex"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBasicBlockAsValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBasicBlockAsValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMValueIsBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMValueIsBasicBlock"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMValueAsBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMValueAsBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBasicBlockName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBasicBlockName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBasicBlockParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBasicBlockParent"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBasicBlockTerminator$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBasicBlockTerminator"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCountBasicBlocks$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCountBasicBlocks"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBasicBlocks$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBasicBlocks"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFirstBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetEntryBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetEntryBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInsertExistingBasicBlockAfterInsertBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInsertExistingBasicBlockAfterInsertBlock"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAppendExistingBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAppendExistingBasicBlock"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateBasicBlockInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateBasicBlockInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAppendBasicBlockInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAppendBasicBlockInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAppendBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAppendBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInsertBasicBlockInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInsertBasicBlockInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInsertBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInsertBasicBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDeleteBasicBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDeleteBasicBlock"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRemoveBasicBlockFromParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRemoveBasicBlockFromParent"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMMoveBasicBlockBefore$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMoveBasicBlockBefore"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMMoveBasicBlockAfter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMMoveBasicBlockAfter"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFirstInstruction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstInstruction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastInstruction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastInstruction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMHasMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMHasMetadata"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetMetadata"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetMetadata$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetMetadata"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInstructionGetAllMetadataOtherThanDebugLoc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInstructionGetAllMetadataOtherThanDebugLoc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInstructionParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInstructionParent"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextInstruction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextInstruction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousInstruction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousInstruction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInstructionRemoveFromParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInstructionRemoveFromParent"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInstructionEraseFromParent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInstructionEraseFromParent"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDeleteInstruction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDeleteInstruction"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInstructionOpcode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInstructionOpcode"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetICmpPredicate$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetICmpPredicate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFCmpPredicate$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFCmpPredicate"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInstructionClone$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInstructionClone"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsATerminatorInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsATerminatorInst"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFirstDbgRecord$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstDbgRecord"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetLastDbgRecord$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetLastDbgRecord"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextDbgRecord$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextDbgRecord"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPreviousDbgRecord$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPreviousDbgRecord"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNumArgOperands$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumArgOperands"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetInstructionCallConv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetInstructionCallConv"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetInstructionCallConv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInstructionCallConv"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetInstrParamAlignment$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetInstrParamAlignment"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddCallSiteAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddCallSiteAttribute"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCallSiteAttributeCount$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCallSiteAttributeCount"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetCallSiteAttributes$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCallSiteAttributes"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCallSiteEnumAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCallSiteEnumAttribute"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetCallSiteStringAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCallSiteStringAttribute"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMRemoveCallSiteEnumAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRemoveCallSiteEnumAttribute"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMRemoveCallSiteStringAttribute$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRemoveCallSiteStringAttribute"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetCalledFunctionType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCalledFunctionType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCalledValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCalledValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNumOperandBundles$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumOperandBundles"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetOperandBundleAtIndex$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetOperandBundleAtIndex"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsTailCall$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsTailCall"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetTailCall$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTailCall"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetTailCallKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTailCallKind"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetTailCallKind$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTailCallKind"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetNormalDest$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNormalDest"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetUnwindDest$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetUnwindDest"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetNormalDest$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetNormalDest"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetUnwindDest$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetUnwindDest"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCallBrDefaultDest$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCallBrDefaultDest"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCallBrNumIndirectDests$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCallBrNumIndirectDests"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCallBrIndirectDest$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCallBrIndirectDest"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetNumSuccessors$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumSuccessors"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetSuccessor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetSuccessor"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetSuccessor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetSuccessor"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsConditional$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsConditional"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCondition$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCondition"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetCondition$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetCondition"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetSwitchDefaultDest$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetSwitchDefaultDest"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetAllocatedType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAllocatedType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsInBounds$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsInBounds"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetIsInBounds$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetIsInBounds"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetGEPSourceElementType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetGEPSourceElementType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGEPGetNoWrapFlags$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGEPGetNoWrapFlags"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGEPSetNoWrapFlags$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGEPSetNoWrapFlags"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddIncoming$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddIncoming"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCountIncoming$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCountIncoming"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetIncomingValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetIncomingValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetIncomingBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetIncomingBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetNumIndices$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumIndices"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetIndices$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetIndices"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateBuilderInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateBuilderInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateBuilder$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateBuilder"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPositionBuilder$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPositionBuilder"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPositionBuilderBeforeDbgRecords$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPositionBuilderBeforeDbgRecords"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPositionBuilderBefore$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPositionBuilderBefore"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPositionBuilderBeforeInstrAndDbgRecords$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPositionBuilderBeforeInstrAndDbgRecords"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPositionBuilderAtEnd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPositionBuilderAtEnd"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetInsertBlock$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetInsertBlock"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMClearInsertionPosition$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMClearInsertionPosition"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInsertIntoBuilder$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInsertIntoBuilder"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInsertIntoBuilderWithName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInsertIntoBuilderWithName"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeBuilder$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeBuilder"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCurrentDebugLocation2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCurrentDebugLocation2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetCurrentDebugLocation2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetCurrentDebugLocation2"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetInstDebugLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetInstDebugLocation"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddMetadataToInst$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddMetadataToInst"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuilderGetDefaultFPMathTag$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuilderGetDefaultFPMathTag"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuilderSetDefaultFPMathTag$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuilderSetDefaultFPMathTag"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBuilderContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBuilderContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetCurrentDebugLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetCurrentDebugLocation"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCurrentDebugLocation$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCurrentDebugLocation"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildRetVoid$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildRetVoid"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildRet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildRet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildAggregateRet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAggregateRet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildBr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildBr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCondBr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCondBr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSwitch$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSwitch"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildIndirectBr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildIndirectBr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildCallBr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCallBr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildInvoke2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildInvoke2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildInvokeWithOperandBundles$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildInvokeWithOperandBundles"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildUnreachable$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildUnreachable"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildResume$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildResume"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildLandingPad$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildLandingPad"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCleanupRet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCleanupRet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCatchRet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCatchRet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCatchPad$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCatchPad"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCleanupPad$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCleanupPad"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCatchSwitch$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCatchSwitch"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddCase$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddCase"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddDestination$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddDestination"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNumClauses$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumClauses"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetClause$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetClause"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddClause$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddClause"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIsCleanup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsCleanup"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetCleanup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetCleanup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMAddHandler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddHandler"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNumHandlers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumHandlers"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetHandlers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetHandlers"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetArgOperand$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetArgOperand"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetArgOperand$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetArgOperand"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetParentCatchSwitch$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetParentCatchSwitch"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetParentCatchSwitch$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetParentCatchSwitch"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildAdd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAdd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNSWAdd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNSWAdd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNUWAdd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNUWAdd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFAdd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFAdd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSub$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSub"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNSWSub$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNSWSub"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNUWSub$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNUWSub"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFSub$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFSub"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildMul$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildMul"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNSWMul$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNSWMul"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNUWMul$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNUWMul"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFMul$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFMul"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildUDiv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildUDiv"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildExactUDiv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildExactUDiv"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSDiv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSDiv"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildExactSDiv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildExactSDiv"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFDiv$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFDiv"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildURem$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildURem"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSRem$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSRem"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFRem$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFRem"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildShl$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildShl"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildLShr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildLShr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildAShr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAShr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildAnd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAnd"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildOr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildOr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildXor$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildXor"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildBinOp$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildBinOp"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNeg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNSWNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNSWNeg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNUWNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNUWNeg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFNeg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildNot$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildNot"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNUW$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNUW"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetNUW$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetNUW"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetNSW$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNSW"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetNSW$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetNSW"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetExact$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetExact"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetExact$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetExact"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetNNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNNeg"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetNNeg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetNNeg"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetFastMathFlags$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFastMathFlags"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetFastMathFlags$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetFastMathFlags"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCanValueUseFastMathFlags$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCanValueUseFastMathFlags"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetIsDisjoint$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetIsDisjoint"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetIsDisjoint$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetIsDisjoint"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildMalloc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildMalloc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildArrayMalloc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildArrayMalloc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildMemSet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildMemSet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildMemCpy$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildMemCpy"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildMemMove$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildMemMove"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildAlloca$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAlloca"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildArrayAlloca$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildArrayAlloca"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFree$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFree"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildLoad2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildLoad2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildStore$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildStore"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildGEP2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildGEP2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildInBoundsGEP2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildInBoundsGEP2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildGEPWithNoWrapFlags$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildGEPWithNoWrapFlags"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildStructGEP2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildStructGEP2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildGlobalString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildGlobalString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildGlobalStringPtr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildGlobalStringPtr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetVolatile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetVolatile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetVolatile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetVolatile"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetWeak$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetWeak"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetWeak$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetWeak"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetOrdering$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetOrdering"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetOrdering$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetOrdering"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetAtomicRMWBinOp$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAtomicRMWBinOp"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetAtomicRMWBinOp$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetAtomicRMWBinOp"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildTrunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildTrunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildZExt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildZExt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSExt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSExt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFPToUI$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFPToUI"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFPToSI$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFPToSI"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildUIToFP$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildUIToFP"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSIToFP$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSIToFP"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFPTrunc$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFPTrunc"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFPExt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFPExt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildPtrToInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildPtrToInt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildIntToPtr$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildIntToPtr"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildBitCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildBitCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildAddrSpaceCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAddrSpaceCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildZExtOrBitCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildZExtOrBitCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSExtOrBitCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSExtOrBitCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildTruncOrBitCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildTruncOrBitCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildPointerCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildPointerCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildIntCast2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildIntCast2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFPCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFPCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildIntCast$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildIntCast"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetCastOpcode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCastOpcode"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildICmp$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildICmp"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFCmp$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFCmp"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildPhi$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildPhi"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCall2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCall2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildCallWithOperandBundles$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildCallWithOperandBundles"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildSelect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildSelect"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildVAArg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildVAArg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildExtractElement$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildExtractElement"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildInsertElement$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildInsertElement"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildShuffleVector$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildShuffleVector"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildExtractValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildExtractValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildInsertValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildInsertValue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFreeze$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFreeze"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildIsNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildIsNull"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildIsNotNull$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildIsNotNull"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildPtrDiff2$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildPtrDiff2"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFence$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFence"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildFenceSyncScope$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildFenceSyncScope"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMBuildAtomicRMW$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAtomicRMW"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildAtomicRMWSyncScope$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAtomicRMWSyncScope"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildAtomicCmpXchg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAtomicCmpXchg"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMBuildAtomicCmpXchgSyncScope$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMBuildAtomicCmpXchgSyncScope"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetNumMaskElements$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNumMaskElements"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetUndefMaskElem$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetUndefMaskElem"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetMaskValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetMaskValue"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsAtomicSingleThread$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAtomicSingleThread"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetAtomicSingleThread$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetAtomicSingleThread"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIsAtomic$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsAtomic"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetAtomicSyncScopeID$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetAtomicSyncScopeID"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetAtomicSyncScopeID$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetAtomicSyncScopeID"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetCmpXchgSuccessOrdering$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCmpXchgSuccessOrdering"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetCmpXchgSuccessOrdering$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetCmpXchgSuccessOrdering"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetCmpXchgFailureOrdering$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetCmpXchgFailureOrdering"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetCmpXchgFailureOrdering$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetCmpXchgFailureOrdering"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCreateModuleProviderForExistingModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateModuleProviderForExistingModule"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeModuleProvider$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeModuleProvider"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateMemoryBufferWithContentsOfFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateMemoryBufferWithContentsOfFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateMemoryBufferWithSTDIN$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateMemoryBufferWithSTDIN"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateMemoryBufferWithMemoryRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateMemoryBufferWithMemoryRange"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCreateMemoryBufferWithMemoryRangeCopy$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateMemoryBufferWithMemoryRangeCopy"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBufferStart$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBufferStart"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetBufferSize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetBufferSize"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeMemoryBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeMemoryBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreatePassManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreatePassManager"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateFunctionPassManagerForModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateFunctionPassManagerForModule"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateFunctionPassManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateFunctionPassManager"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRunPassManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRunPassManager"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInitializeFunctionPassManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeFunctionPassManager"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRunFunctionPassManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRunFunctionPassManager"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFinalizeFunctionPassManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFinalizeFunctionPassManager"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposePassManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposePassManager"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMStartMultithreaded$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStartMultithreaded"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMStopMultithreaded$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStopMultithreaded"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMIsMultithreaded$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIsMultithreaded"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMInitializeAArch64TargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAArch64TargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAMDGPUTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAMDGPUTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeARMTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeARMTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAVRTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAVRTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeBPFTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeBPFTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeHexagonTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeHexagonTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLanaiTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLanaiTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLoongArchTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLoongArchTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMipsTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMipsTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMSP430TargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMSP430TargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeNVPTXTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNVPTXTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializePowerPCTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializePowerPCTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeRISCVTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeRISCVTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSparcTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSparcTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSPIRVTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSPIRVTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSystemZTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSystemZTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeVETargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeVETargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeWebAssemblyTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeWebAssemblyTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeX86TargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeX86TargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeXCoreTargetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeXCoreTargetInfo"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAArch64Target$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAArch64Target"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAMDGPUTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAMDGPUTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeARMTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeARMTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAVRTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAVRTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeBPFTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeBPFTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeHexagonTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeHexagonTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLanaiTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLanaiTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLoongArchTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLoongArchTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMipsTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMipsTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMSP430Target$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMSP430Target"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeNVPTXTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNVPTXTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializePowerPCTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializePowerPCTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeRISCVTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeRISCVTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSparcTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSparcTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSPIRVTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSPIRVTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSystemZTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSystemZTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeVETarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeVETarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeWebAssemblyTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeWebAssemblyTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeX86Target$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeX86Target"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeXCoreTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeXCoreTarget"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAArch64TargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAArch64TargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAMDGPUTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAMDGPUTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeARMTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeARMTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAVRTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAVRTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeBPFTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeBPFTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeHexagonTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeHexagonTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLanaiTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLanaiTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLoongArchTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLoongArchTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMipsTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMipsTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMSP430TargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMSP430TargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeNVPTXTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNVPTXTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializePowerPCTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializePowerPCTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeRISCVTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeRISCVTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSparcTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSparcTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSPIRVTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSPIRVTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSystemZTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSystemZTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeVETargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeVETargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeWebAssemblyTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeWebAssemblyTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeX86TargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeX86TargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeXCoreTargetMC$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeXCoreTargetMC"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAArch64AsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAArch64AsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAMDGPUAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAMDGPUAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeARMAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeARMAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAVRAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAVRAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeBPFAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeBPFAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeHexagonAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeHexagonAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLanaiAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLanaiAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLoongArchAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLoongArchAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMipsAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMipsAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMSP430AsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMSP430AsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeNVPTXAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNVPTXAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializePowerPCAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializePowerPCAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeRISCVAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeRISCVAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSparcAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSparcAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSPIRVAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSPIRVAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSystemZAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSystemZAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeVEAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeVEAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeWebAssemblyAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeWebAssemblyAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeX86AsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeX86AsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeXCoreAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeXCoreAsmPrinter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAArch64AsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAArch64AsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAMDGPUAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAMDGPUAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeARMAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeARMAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAVRAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAVRAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeBPFAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeBPFAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeHexagonAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeHexagonAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLanaiAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLanaiAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLoongArchAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLoongArchAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMipsAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMipsAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMSP430AsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMSP430AsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializePowerPCAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializePowerPCAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeRISCVAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeRISCVAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSparcAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSparcAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSystemZAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSystemZAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeVEAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeVEAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeWebAssemblyAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeWebAssemblyAsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeX86AsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeX86AsmParser"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAArch64Disassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAArch64Disassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAMDGPUDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAMDGPUDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeARMDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeARMDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAVRDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAVRDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeBPFDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeBPFDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeHexagonDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeHexagonDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLanaiDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLanaiDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeLoongArchDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeLoongArchDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMipsDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMipsDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeMSP430Disassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMSP430Disassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializePowerPCDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializePowerPCDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeRISCVDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeRISCVDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSparcDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSparcDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeSystemZDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeSystemZDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeVEDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeVEDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeWebAssemblyDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeWebAssemblyDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeX86Disassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeX86Disassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeXCoreDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeXCoreDisassembler"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAllTargetInfos$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAllTargetInfos"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAllTargets$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAllTargets"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAllTargetMCs$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAllTargetMCs"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAllAsmPrinters$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAllAsmPrinters"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAllAsmParsers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAllAsmParsers"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeAllDisassemblers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeAllDisassemblers"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMInitializeNativeTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNativeTarget"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMInitializeNativeAsmParser$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNativeAsmParser"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMInitializeNativeAsmPrinter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNativeAsmPrinter"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMInitializeNativeDisassembler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeNativeDisassembler"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetModuleDataLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetModuleDataLayout"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetModuleDataLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetModuleDataLayout"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateTargetData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateTargetData"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeTargetData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeTargetData"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddTargetLibraryInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddTargetLibraryInfo"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCopyStringRepOfTargetData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCopyStringRepOfTargetData"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMByteOrder$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMByteOrder"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPointerSize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPointerSize"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPointerSizeForAS$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPointerSizeForAS"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIntPtrType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntPtrType"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIntPtrTypeForAS$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntPtrTypeForAS"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMIntPtrTypeInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntPtrTypeInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMIntPtrTypeForASInContext$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMIntPtrTypeForASInContext"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSizeOfTypeInBits$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSizeOfTypeInBits"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMStoreSizeOfType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMStoreSizeOfType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMABISizeOfType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMABISizeOfType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMABIAlignmentOfType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMABIAlignmentOfType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCallFrameAlignmentOfType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCallFrameAlignmentOfType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPreferredAlignmentOfType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPreferredAlignmentOfType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMPreferredAlignmentOfGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMPreferredAlignmentOfGlobal"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMElementAtOffset$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMElementAtOffset"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMOffsetOfElement$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMOffsetOfElement"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGetFirstTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFirstTarget"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetNextTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetNextTarget"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetFromName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetFromName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetFromTriple$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetFromTriple"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetDescription$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetDescription"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetHasJIT$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetHasJIT"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetHasTargetMachine$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetHasTargetMachine"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetHasAsmBackend$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetHasAsmBackend"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateTargetMachineOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateTargetMachineOptions"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeTargetMachineOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeTargetMachineOptions"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetMachineOptionsSetCPU$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineOptionsSetCPU"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetMachineOptionsSetFeatures$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineOptionsSetFeatures"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetMachineOptionsSetABI$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineOptionsSetABI"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetMachineOptionsSetCodeGenOptLevel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineOptionsSetCodeGenOptLevel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMTargetMachineOptionsSetRelocMode$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineOptionsSetRelocMode"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMTargetMachineOptionsSetCodeModel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineOptionsSetCodeModel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCreateTargetMachineWithOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateTargetMachineWithOptions"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateTargetMachine$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateTargetMachine"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMDisposeTargetMachine$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeTargetMachine"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetMachineTarget$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetMachineTarget"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetMachineTriple$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetMachineTriple"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetMachineCPU$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetMachineCPU"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetTargetMachineFeatureString$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetTargetMachineFeatureString"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateTargetDataLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateTargetDataLayout"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMSetTargetMachineAsmVerbosity$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTargetMachineAsmVerbosity"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetTargetMachineFastISel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTargetMachineFastISel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetTargetMachineGlobalISel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTargetMachineGlobalISel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetTargetMachineGlobalISelAbort$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTargetMachineGlobalISelAbort"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMSetTargetMachineMachineOutliner$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMSetTargetMachineMachineOutliner"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMTargetMachineEmitToFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineEmitToFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMTargetMachineEmitToMemoryBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMTargetMachineEmitToMemoryBuffer"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetDefaultTargetTriple$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetDefaultTargetTriple"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMNormalizeTargetTriple$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMNormalizeTargetTriple"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetHostCPUName$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetHostCPUName"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetHostCPUFeatures$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetHostCPUFeatures"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddAnalysisPasses$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddAnalysisPasses"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMLinkInMCJIT$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMLinkInMCJIT"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMLinkInInterpreter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMLinkInInterpreter"),
        FunctionDescriptor.ofVoid(
        )
    )
}

internal val `LLVMCreateGenericValueOfInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateGenericValueOfInt"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMCreateGenericValueOfPointer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateGenericValueOfPointer"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateGenericValueOfFloat$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateGenericValueOfFloat"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_DOUBLE,
        )
    )
}

internal val `LLVMGenericValueIntWidth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGenericValueIntWidth"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGenericValueToInt$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGenericValueToInt"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMGenericValueToPointer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGenericValueToPointer"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGenericValueToFloat$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGenericValueToFloat"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_DOUBLE,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeGenericValue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeGenericValue"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateExecutionEngineForModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateExecutionEngineForModule"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateInterpreterForModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateInterpreterForModule"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateJITCompilerForModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateJITCompilerForModule"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMInitializeMCJITCompilerOptions$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMInitializeMCJITCompilerOptions"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `LLVMCreateMCJITCompilerForModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateMCJITCompilerForModule"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeExecutionEngine$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeExecutionEngine"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRunStaticConstructors$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRunStaticConstructors"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRunStaticDestructors$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRunStaticDestructors"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRunFunctionAsMain$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRunFunctionAsMain"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRunFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRunFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFreeMachineCodeForFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFreeMachineCodeForFunction"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddModule"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRemoveModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRemoveModule"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMFindFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMFindFunction"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMRecompileAndRelinkFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMRecompileAndRelinkFunction"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetExecutionEngineTargetData$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetExecutionEngineTargetData"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetExecutionEngineTargetMachine$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetExecutionEngineTargetMachine"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMAddGlobalMapping$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMAddGlobalMapping"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetPointerToGlobal$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetPointerToGlobal"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetGlobalValueAddress$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetGlobalValueAddress"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMGetFunctionAddress$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMGetFunctionAddress"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMExecutionEngineGetErrMsg$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMExecutionEngineGetErrMsg"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateSimpleMCJITMemoryManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateSimpleMCJITMemoryManager"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMDisposeMCJITMemoryManager$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMDisposeMCJITMemoryManager"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateGDBRegistrationListener$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateGDBRegistrationListener"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateIntelJITEventListener$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateIntelJITEventListener"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreateOProfileJITEventListener$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreateOProfileJITEventListener"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMCreatePerfJITEventListener$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMCreatePerfJITEventListener"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMVerifyModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMVerifyModule"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMVerifyFunction$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMVerifyFunction"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMViewFunctionCFG$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMViewFunctionCFG"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMViewFunctionCFGOnly$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMViewFunctionCFGOnly"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMWriteBitcodeToFile$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMWriteBitcodeToFile"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `LLVMWriteBitcodeToFD$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMWriteBitcodeToFD"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMWriteBitcodeToFileHandle$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMWriteBitcodeToFileHandle"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `LLVMWriteBitcodeToMemoryBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("LLVMWriteBitcodeToMemoryBuffer"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}
