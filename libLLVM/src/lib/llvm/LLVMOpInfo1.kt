// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Long
import kotlin.ULong
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class LLVMOpInfo1(
  public val `$mem`: MemorySegment,
) {
  public var AddSymbol: LLVMOpInfoSymbol1
    get() = LLVMOpInfoSymbol1(LLVMOpInfo1.AddSymbolHandle.invokeExact(this.`$mem`, 0L) as
          MemorySegment)
    set(`value`) {
      MemorySegment.copy(value.`$mem`, 0L, this.AddSymbol.`$mem`, 0L,
          LLVMOpInfoSymbol1.layout.byteSize())
    }

  public var SubtractSymbol: LLVMOpInfoSymbol1
    get() = LLVMOpInfoSymbol1(LLVMOpInfo1.SubtractSymbolHandle.invokeExact(this.`$mem`, 0L) as
          MemorySegment)
    set(`value`) {
      MemorySegment.copy(value.`$mem`, 0L, this.SubtractSymbol.`$mem`, 0L,
          LLVMOpInfoSymbol1.layout.byteSize())
    }

  public var Value: ULong
    get() = (LLVMOpInfo1.ValueHandle.get(this.`$mem`, 0L) as Long).toULong()
    set(`value`) {
      LLVMOpInfo1.ValueHandle.set(this.`$mem`, 0L,value.toLong())
    }

  public var VariantKind: ULong
    get() = (LLVMOpInfo1.VariantKindHandle.get(this.`$mem`, 0L) as Long).toULong()
    set(`value`) {
      LLVMOpInfo1.VariantKindHandle.set(this.`$mem`, 0L,value.toLong())
    }

  public constructor(gc: Boolean) : this(kotlin.run {
      require(gc) { "Do not call this if gc is not want" }
      Arena.ofAuto().allocate(LLVMOpInfo1.layout)
  })

  public companion object {
    public val layout: StructLayout = MemoryLayout.structLayout(
      LLVMOpInfoSymbol1.layout.withName("AddSymbol"),
      LLVMOpInfoSymbol1.layout.withName("SubtractSymbol"),
      ValueLayout.JAVA_LONG.withName("Value"),
      ValueLayout.JAVA_LONG.withName("VariantKind"),
    ).withName("LLVMOpInfo1")

    @JvmField
    public val AddSymbolHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("AddSymbol"))

    @JvmField
    public val SubtractSymbolHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("SubtractSymbol"))

    @JvmField
    public val ValueHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("Value"))

    @JvmField
    public val VariantKindHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("VariantKind"))

    @JvmStatic
    public fun allocate(alloc: SegmentAllocator): LLVMOpInfo1 =
        LLVMOpInfo1(alloc.allocate(LLVMOpInfo1.layout))
  }
}
