// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType

public enum class LLVMAtomicOrdering(
    public val `value`: Int,
) {
    /**
     * < A load or store which is not atomic
     */
    NotAtomic(0),

    /**
     * < Lowest level of atomicity, guarantees
     * somewhat sane results, lock free.
     */
    Unordered(1),

    /**
     * < guarantees that if you take all the
     * operations affecting a specific address,
     * a consistent ordering exists
     */
    Monotonic(2),

    /**
     * < Acquire provides a barrier of the sort
     * necessary to acquire a lock to access other
     * memory with normal loads and stores.
     */
    Acquire(4),

    /**
     * < Release is similar to Acquire, but with
     * a barrier of the sort necessary to release
     * a lock.
     */
    Release(5),

    /**
     * < provides both an Acquire and a
     * Release barrier (for fences and
     * operations which both read and write
     * memory).
     */
    AcquireRelease(6),

    /**
     * < provides Acquire semantics
     * for loads and Release
     * semantics for stores.
     * Additionally, it guarantees
     * that a total ordering exists
     * between all
     * SequentiallyConsistent
     * operations.
     */
    SequentiallyConsistent(7),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            LLVMAtomicOrdering::class.java,
            "fromInt",
            MethodType.methodType(LLVMAtomicOrdering::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            LLVMAtomicOrdering::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): LLVMAtomicOrdering = when (value) {
            NotAtomic.value -> NotAtomic
            Unordered.value -> Unordered
            Monotonic.value -> Monotonic
            Acquire.value -> Acquire
            Release.value -> Release
            AcquireRelease.value -> AcquireRelease
            SequentiallyConsistent.value -> SequentiallyConsistent
            else -> error("enum not found")
        }
    }
}
