// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.foreign.MemorySegment
import kotlin.Boolean
import kotlin.Byte
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.Short
import kotlin.UByte
import kotlin.UInt
import kotlin.ULong
import kotlin.UShort
import kotlin.Unit

public fun LLVMDebugMetadataVersion(): UInt = (`LLVMDebugMetadataVersion$mh`.invokeExact() as
    Int).toUInt()

public fun LLVMGetModuleDebugMetadataVersion(Module: LLVMModuleRef): UInt =
    (`LLVMGetModuleDebugMetadataVersion$mh`.invokeExact(Module,) as Int).toUInt()

public fun LLVMStripModuleDebugInfo(Module: LLVMModuleRef): LLVMBool =
    `LLVMStripModuleDebugInfo$mh`.invokeExact(Module,) as Int

public fun LLVMCreateDIBuilderDisallowUnresolved(M: LLVMModuleRef): LLVMDIBuilderRef =
    `LLVMCreateDIBuilderDisallowUnresolved$mh`.invokeExact(M,) as MemorySegment

public fun LLVMCreateDIBuilder(M: LLVMModuleRef): LLVMDIBuilderRef =
    `LLVMCreateDIBuilder$mh`.invokeExact(M,) as MemorySegment

public fun LLVMDisposeDIBuilder(Builder: LLVMDIBuilderRef): Unit =
    `LLVMDisposeDIBuilder$mh`.invokeExact(Builder,) as Unit

public fun LLVMDIBuilderFinalize(Builder: LLVMDIBuilderRef): Unit =
    `LLVMDIBuilderFinalize$mh`.invokeExact(Builder,) as Unit

public fun LLVMDIBuilderFinalizeSubprogram(Builder: LLVMDIBuilderRef, Subprogram: LLVMMetadataRef):
    Unit = `LLVMDIBuilderFinalizeSubprogram$mh`.invokeExact(Builder,Subprogram,) as Unit

public fun LLVMDIBuilderCreateCompileUnit(
  Builder: LLVMDIBuilderRef,
  Lang: LLVMDWARFSourceLanguage,
  FileRef: LLVMMetadataRef,
  Producer: Pointer<Byte>,
  ProducerLen: ULong,
  isOptimized: LLVMBool,
  Flags: Pointer<Byte>,
  FlagsLen: ULong,
  RuntimeVer: UInt,
  SplitName: Pointer<Byte>,
  SplitNameLen: ULong,
  Kind: LLVMDWARFEmissionKind,
  DWOId: UInt,
  SplitDebugInlining: LLVMBool,
  DebugInfoForProfiling: LLVMBool,
  SysRoot: Pointer<Byte>,
  SysRootLen: ULong,
  SDK: Pointer<Byte>,
  SDKLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateCompileUnit$mh`.invokeExact(Builder,Lang.value,FileRef,Producer,ProducerLen.toLong(),isOptimized,Flags,FlagsLen.toLong(),RuntimeVer.toInt(),SplitName,SplitNameLen.toLong(),Kind.value,DWOId.toInt(),SplitDebugInlining,DebugInfoForProfiling,SysRoot,SysRootLen.toLong(),SDK,SDKLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateFile(
  Builder: LLVMDIBuilderRef,
  Filename: Pointer<Byte>,
  FilenameLen: ULong,
  Directory: Pointer<Byte>,
  DirectoryLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateFile$mh`.invokeExact(Builder,Filename,FilenameLen.toLong(),Directory,DirectoryLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateModule(
  Builder: LLVMDIBuilderRef,
  ParentScope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  ConfigMacros: Pointer<Byte>,
  ConfigMacrosLen: ULong,
  IncludePath: Pointer<Byte>,
  IncludePathLen: ULong,
  APINotesFile: Pointer<Byte>,
  APINotesFileLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateModule$mh`.invokeExact(Builder,ParentScope,Name,NameLen.toLong(),ConfigMacros,ConfigMacrosLen.toLong(),IncludePath,IncludePathLen.toLong(),APINotesFile,APINotesFileLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateNameSpace(
  Builder: LLVMDIBuilderRef,
  ParentScope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  ExportSymbols: LLVMBool,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateNameSpace$mh`.invokeExact(Builder,ParentScope,Name,NameLen.toLong(),ExportSymbols,)
    as MemorySegment

public fun LLVMDIBuilderCreateFunction(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  LinkageName: Pointer<Byte>,
  LinkageNameLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  Ty: LLVMMetadataRef,
  IsLocalToUnit: LLVMBool,
  IsDefinition: LLVMBool,
  ScopeLine: UInt,
  Flags: LLVMDIFlags,
  IsOptimized: LLVMBool,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateFunction$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),LinkageName,LinkageNameLen.toLong(),File,LineNo.toInt(),Ty,IsLocalToUnit,IsDefinition,ScopeLine.toInt(),Flags.value,IsOptimized,)
    as MemorySegment

public fun LLVMDIBuilderCreateLexicalBlock(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Line: UInt,
  Column: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateLexicalBlock$mh`.invokeExact(Builder,Scope,File,Line.toInt(),Column.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateLexicalBlockFile(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Discriminator: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateLexicalBlockFile$mh`.invokeExact(Builder,Scope,File,Discriminator.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateImportedModuleFromNamespace(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  NS: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Line: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateImportedModuleFromNamespace$mh`.invokeExact(Builder,Scope,NS,File,Line.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateImportedModuleFromAlias(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  ImportedEntity: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Line: UInt,
  Elements: Pointer<LLVMMetadataRef>,
  NumElements: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateImportedModuleFromAlias$mh`.invokeExact(Builder,Scope,ImportedEntity,File,Line.toInt(),Elements,NumElements.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateImportedModuleFromModule(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  M: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Line: UInt,
  Elements: Pointer<LLVMMetadataRef>,
  NumElements: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateImportedModuleFromModule$mh`.invokeExact(Builder,Scope,M,File,Line.toInt(),Elements,NumElements.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateImportedDeclaration(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Decl: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Line: UInt,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Elements: Pointer<LLVMMetadataRef>,
  NumElements: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateImportedDeclaration$mh`.invokeExact(Builder,Scope,Decl,File,Line.toInt(),Name,NameLen.toLong(),Elements,NumElements.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateDebugLocation(
  Ctx: LLVMContextRef,
  Line: UInt,
  Column: UInt,
  Scope: LLVMMetadataRef,
  InlinedAt: LLVMMetadataRef,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateDebugLocation$mh`.invokeExact(Ctx,Line.toInt(),Column.toInt(),Scope,InlinedAt,)
    as MemorySegment

public fun LLVMDILocationGetLine(Location: LLVMMetadataRef): UInt =
    (`LLVMDILocationGetLine$mh`.invokeExact(Location,) as Int).toUInt()

public fun LLVMDILocationGetColumn(Location: LLVMMetadataRef): UInt =
    (`LLVMDILocationGetColumn$mh`.invokeExact(Location,) as Int).toUInt()

public fun LLVMDILocationGetScope(Location: LLVMMetadataRef): LLVMMetadataRef =
    `LLVMDILocationGetScope$mh`.invokeExact(Location,) as MemorySegment

public fun LLVMDILocationGetInlinedAt(Location: LLVMMetadataRef): LLVMMetadataRef =
    `LLVMDILocationGetInlinedAt$mh`.invokeExact(Location,) as MemorySegment

public fun LLVMDIScopeGetFile(Scope: LLVMMetadataRef): LLVMMetadataRef =
    `LLVMDIScopeGetFile$mh`.invokeExact(Scope,) as MemorySegment

public fun LLVMDIFileGetDirectory(File: LLVMMetadataRef, Len: Pointer<UInt>): Pointer<Byte> =
    `LLVMDIFileGetDirectory$mh`.invokeExact(File,Len,) as MemorySegment

public fun LLVMDIFileGetFilename(File: LLVMMetadataRef, Len: Pointer<UInt>): Pointer<Byte> =
    `LLVMDIFileGetFilename$mh`.invokeExact(File,Len,) as MemorySegment

public fun LLVMDIFileGetSource(File: LLVMMetadataRef, Len: Pointer<UInt>): Pointer<Byte> =
    `LLVMDIFileGetSource$mh`.invokeExact(File,Len,) as MemorySegment

public fun LLVMDIBuilderGetOrCreateTypeArray(
  Builder: LLVMDIBuilderRef,
  Data: Pointer<LLVMMetadataRef>,
  NumElements: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderGetOrCreateTypeArray$mh`.invokeExact(Builder,Data,NumElements.toLong(),) as
    MemorySegment

public fun LLVMDIBuilderCreateSubroutineType(
  Builder: LLVMDIBuilderRef,
  File: LLVMMetadataRef,
  ParameterTypes: Pointer<LLVMMetadataRef>,
  NumParameterTypes: UInt,
  Flags: LLVMDIFlags,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateSubroutineType$mh`.invokeExact(Builder,File,ParameterTypes,NumParameterTypes.toInt(),Flags.value,)
    as MemorySegment

public fun LLVMDIBuilderCreateMacro(
  Builder: LLVMDIBuilderRef,
  ParentMacroFile: LLVMMetadataRef,
  Line: UInt,
  RecordType: LLVMDWARFMacinfoRecordType,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Value: Pointer<Byte>,
  ValueLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateMacro$mh`.invokeExact(Builder,ParentMacroFile,Line.toInt(),RecordType.value,Name,NameLen.toLong(),Value,ValueLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateTempMacroFile(
  Builder: LLVMDIBuilderRef,
  ParentMacroFile: LLVMMetadataRef,
  Line: UInt,
  File: LLVMMetadataRef,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateTempMacroFile$mh`.invokeExact(Builder,ParentMacroFile,Line.toInt(),File,) as
    MemorySegment

public fun LLVMDIBuilderCreateEnumerator(
  Builder: LLVMDIBuilderRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Value: Long,
  IsUnsigned: LLVMBool,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateEnumerator$mh`.invokeExact(Builder,Name,NameLen.toLong(),Value,IsUnsigned,)
    as MemorySegment

public fun LLVMDIBuilderCreateEnumerationType(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNumber: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  Elements: Pointer<LLVMMetadataRef>,
  NumElements: UInt,
  ClassTy: LLVMMetadataRef,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateEnumerationType$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNumber.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),Elements,NumElements.toInt(),ClassTy,)
    as MemorySegment

public fun LLVMDIBuilderCreateUnionType(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNumber: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  Flags: LLVMDIFlags,
  Elements: Pointer<LLVMMetadataRef>,
  NumElements: UInt,
  RunTimeLang: UInt,
  UniqueId: Pointer<Byte>,
  UniqueIdLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateUnionType$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNumber.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),Flags.value,Elements,NumElements.toInt(),RunTimeLang.toInt(),UniqueId,UniqueIdLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateArrayType(
  Builder: LLVMDIBuilderRef,
  Size: ULong,
  AlignInBits: UInt,
  Ty: LLVMMetadataRef,
  Subscripts: Pointer<LLVMMetadataRef>,
  NumSubscripts: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateArrayType$mh`.invokeExact(Builder,Size.toLong(),AlignInBits.toInt(),Ty,Subscripts,NumSubscripts.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateVectorType(
  Builder: LLVMDIBuilderRef,
  Size: ULong,
  AlignInBits: UInt,
  Ty: LLVMMetadataRef,
  Subscripts: Pointer<LLVMMetadataRef>,
  NumSubscripts: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateVectorType$mh`.invokeExact(Builder,Size.toLong(),AlignInBits.toInt(),Ty,Subscripts,NumSubscripts.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateUnspecifiedType(
  Builder: LLVMDIBuilderRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateUnspecifiedType$mh`.invokeExact(Builder,Name,NameLen.toLong(),) as
    MemorySegment

public fun LLVMDIBuilderCreateBasicType(
  Builder: LLVMDIBuilderRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  SizeInBits: ULong,
  Encoding: LLVMDWARFTypeEncoding,
  Flags: LLVMDIFlags,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateBasicType$mh`.invokeExact(Builder,Name,NameLen.toLong(),SizeInBits.toLong(),Encoding.toInt(),Flags.value,)
    as MemorySegment

public fun LLVMDIBuilderCreatePointerType(
  Builder: LLVMDIBuilderRef,
  PointeeTy: LLVMMetadataRef,
  SizeInBits: ULong,
  AlignInBits: UInt,
  AddressSpace: UInt,
  Name: Pointer<Byte>,
  NameLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreatePointerType$mh`.invokeExact(Builder,PointeeTy,SizeInBits.toLong(),AlignInBits.toInt(),AddressSpace.toInt(),Name,NameLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateStructType(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNumber: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  Flags: LLVMDIFlags,
  DerivedFrom: LLVMMetadataRef,
  Elements: Pointer<LLVMMetadataRef>,
  NumElements: UInt,
  RunTimeLang: UInt,
  VTableHolder: LLVMMetadataRef,
  UniqueId: Pointer<Byte>,
  UniqueIdLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateStructType$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNumber.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),Flags.value,DerivedFrom,Elements,NumElements.toInt(),RunTimeLang.toInt(),VTableHolder,UniqueId,UniqueIdLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateMemberType(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  OffsetInBits: ULong,
  Flags: LLVMDIFlags,
  Ty: LLVMMetadataRef,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateMemberType$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNo.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),OffsetInBits.toLong(),Flags.value,Ty,)
    as MemorySegment

public fun LLVMDIBuilderCreateStaticMemberType(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNumber: UInt,
  Type: LLVMMetadataRef,
  Flags: LLVMDIFlags,
  ConstantVal: LLVMValueRef,
  AlignInBits: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateStaticMemberType$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNumber.toInt(),Type,Flags.value,ConstantVal,AlignInBits.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateMemberPointerType(
  Builder: LLVMDIBuilderRef,
  PointeeType: LLVMMetadataRef,
  ClassType: LLVMMetadataRef,
  SizeInBits: ULong,
  AlignInBits: UInt,
  Flags: LLVMDIFlags,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateMemberPointerType$mh`.invokeExact(Builder,PointeeType,ClassType,SizeInBits.toLong(),AlignInBits.toInt(),Flags.value,)
    as MemorySegment

public fun LLVMDIBuilderCreateObjCIVar(
  Builder: LLVMDIBuilderRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  OffsetInBits: ULong,
  Flags: LLVMDIFlags,
  Ty: LLVMMetadataRef,
  PropertyNode: LLVMMetadataRef,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateObjCIVar$mh`.invokeExact(Builder,Name,NameLen.toLong(),File,LineNo.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),OffsetInBits.toLong(),Flags.value,Ty,PropertyNode,)
    as MemorySegment

public fun LLVMDIBuilderCreateObjCProperty(
  Builder: LLVMDIBuilderRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  GetterName: Pointer<Byte>,
  GetterNameLen: ULong,
  SetterName: Pointer<Byte>,
  SetterNameLen: ULong,
  PropertyAttributes: UInt,
  Ty: LLVMMetadataRef,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateObjCProperty$mh`.invokeExact(Builder,Name,NameLen.toLong(),File,LineNo.toInt(),GetterName,GetterNameLen.toLong(),SetterName,SetterNameLen.toLong(),PropertyAttributes.toInt(),Ty,)
    as MemorySegment

public fun LLVMDIBuilderCreateObjectPointerType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef):
    LLVMMetadataRef = `LLVMDIBuilderCreateObjectPointerType$mh`.invokeExact(Builder,Type,) as
    MemorySegment

public fun LLVMDIBuilderCreateQualifiedType(
  Builder: LLVMDIBuilderRef,
  Tag: UInt,
  Type: LLVMMetadataRef,
): LLVMMetadataRef = `LLVMDIBuilderCreateQualifiedType$mh`.invokeExact(Builder,Tag.toInt(),Type,) as
    MemorySegment

public fun LLVMDIBuilderCreateReferenceType(
  Builder: LLVMDIBuilderRef,
  Tag: UInt,
  Type: LLVMMetadataRef,
): LLVMMetadataRef = `LLVMDIBuilderCreateReferenceType$mh`.invokeExact(Builder,Tag.toInt(),Type,) as
    MemorySegment

public fun LLVMDIBuilderCreateNullPtrType(Builder: LLVMDIBuilderRef): LLVMMetadataRef =
    `LLVMDIBuilderCreateNullPtrType$mh`.invokeExact(Builder,) as MemorySegment

public fun LLVMDIBuilderCreateTypedef(
  Builder: LLVMDIBuilderRef,
  Type: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  Scope: LLVMMetadataRef,
  AlignInBits: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateTypedef$mh`.invokeExact(Builder,Type,Name,NameLen.toLong(),File,LineNo.toInt(),Scope,AlignInBits.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateInheritance(
  Builder: LLVMDIBuilderRef,
  Ty: LLVMMetadataRef,
  BaseTy: LLVMMetadataRef,
  BaseOffset: ULong,
  VBPtrOffset: UInt,
  Flags: LLVMDIFlags,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateInheritance$mh`.invokeExact(Builder,Ty,BaseTy,BaseOffset.toLong(),VBPtrOffset.toInt(),Flags.value,)
    as MemorySegment

public fun LLVMDIBuilderCreateForwardDecl(
  Builder: LLVMDIBuilderRef,
  Tag: UInt,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Scope: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Line: UInt,
  RuntimeLang: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  UniqueIdentifier: Pointer<Byte>,
  UniqueIdentifierLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateForwardDecl$mh`.invokeExact(Builder,Tag.toInt(),Name,NameLen.toLong(),Scope,File,Line.toInt(),RuntimeLang.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),UniqueIdentifier,UniqueIdentifierLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateReplaceableCompositeType(
  Builder: LLVMDIBuilderRef,
  Tag: UInt,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Scope: LLVMMetadataRef,
  File: LLVMMetadataRef,
  Line: UInt,
  RuntimeLang: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  Flags: LLVMDIFlags,
  UniqueIdentifier: Pointer<Byte>,
  UniqueIdentifierLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateReplaceableCompositeType$mh`.invokeExact(Builder,Tag.toInt(),Name,NameLen.toLong(),Scope,File,Line.toInt(),RuntimeLang.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),Flags.value,UniqueIdentifier,UniqueIdentifierLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateBitFieldMemberType(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNumber: UInt,
  SizeInBits: ULong,
  OffsetInBits: ULong,
  StorageOffsetInBits: ULong,
  Flags: LLVMDIFlags,
  Type: LLVMMetadataRef,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateBitFieldMemberType$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNumber.toInt(),SizeInBits.toLong(),OffsetInBits.toLong(),StorageOffsetInBits.toLong(),Flags.value,Type,)
    as MemorySegment

public fun LLVMDIBuilderCreateClassType(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNumber: UInt,
  SizeInBits: ULong,
  AlignInBits: UInt,
  OffsetInBits: ULong,
  Flags: LLVMDIFlags,
  DerivedFrom: LLVMMetadataRef,
  Elements: Pointer<LLVMMetadataRef>,
  NumElements: UInt,
  VTableHolder: LLVMMetadataRef,
  TemplateParamsNode: LLVMMetadataRef,
  UniqueIdentifier: Pointer<Byte>,
  UniqueIdentifierLen: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateClassType$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNumber.toInt(),SizeInBits.toLong(),AlignInBits.toInt(),OffsetInBits.toLong(),Flags.value,DerivedFrom,Elements,NumElements.toInt(),VTableHolder,TemplateParamsNode,UniqueIdentifier,UniqueIdentifierLen.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateArtificialType(Builder: LLVMDIBuilderRef, Type: LLVMMetadataRef):
    LLVMMetadataRef = `LLVMDIBuilderCreateArtificialType$mh`.invokeExact(Builder,Type,) as
    MemorySegment

public fun LLVMDITypeGetName(DType: LLVMMetadataRef, Length: Pointer<ULong>): Pointer<Byte> =
    `LLVMDITypeGetName$mh`.invokeExact(DType,Length,) as MemorySegment

public fun LLVMDITypeGetSizeInBits(DType: LLVMMetadataRef): ULong =
    (`LLVMDITypeGetSizeInBits$mh`.invokeExact(DType,) as Long).toULong()

public fun LLVMDITypeGetOffsetInBits(DType: LLVMMetadataRef): ULong =
    (`LLVMDITypeGetOffsetInBits$mh`.invokeExact(DType,) as Long).toULong()

public fun LLVMDITypeGetAlignInBits(DType: LLVMMetadataRef): UInt =
    (`LLVMDITypeGetAlignInBits$mh`.invokeExact(DType,) as Int).toUInt()

public fun LLVMDITypeGetLine(DType: LLVMMetadataRef): UInt =
    (`LLVMDITypeGetLine$mh`.invokeExact(DType,) as Int).toUInt()

public fun LLVMDITypeGetFlags(DType: LLVMMetadataRef): LLVMDIFlags =
    LLVMDIFlags.fromInt(`LLVMDITypeGetFlags$mh`.invokeExact(DType,) as Int)

public fun LLVMDIBuilderGetOrCreateSubrange(
  Builder: LLVMDIBuilderRef,
  LowerBound: Long,
  Count: Long,
): LLVMMetadataRef = `LLVMDIBuilderGetOrCreateSubrange$mh`.invokeExact(Builder,LowerBound,Count,) as
    MemorySegment

public fun LLVMDIBuilderGetOrCreateArray(
  Builder: LLVMDIBuilderRef,
  Data: Pointer<LLVMMetadataRef>,
  NumElements: ULong,
): LLVMMetadataRef =
    `LLVMDIBuilderGetOrCreateArray$mh`.invokeExact(Builder,Data,NumElements.toLong(),) as
    MemorySegment

public fun LLVMDIBuilderCreateExpression(
  Builder: LLVMDIBuilderRef,
  Addr: Pointer<ULong>,
  Length: ULong,
): LLVMMetadataRef = `LLVMDIBuilderCreateExpression$mh`.invokeExact(Builder,Addr,Length.toLong(),)
    as MemorySegment

public fun LLVMDIBuilderCreateConstantValueExpression(Builder: LLVMDIBuilderRef, Value: ULong):
    LLVMMetadataRef =
    `LLVMDIBuilderCreateConstantValueExpression$mh`.invokeExact(Builder,Value.toLong(),) as
    MemorySegment

public fun LLVMDIBuilderCreateGlobalVariableExpression(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Linkage: Pointer<Byte>,
  LinkLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  Ty: LLVMMetadataRef,
  LocalToUnit: LLVMBool,
  Expr: LLVMMetadataRef,
  Decl: LLVMMetadataRef,
  AlignInBits: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateGlobalVariableExpression$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),Linkage,LinkLen.toLong(),File,LineNo.toInt(),Ty,LocalToUnit,Expr,Decl,AlignInBits.toInt(),)
    as MemorySegment

public fun LLVMGetDINodeTag(MD: LLVMMetadataRef): UShort = (`LLVMGetDINodeTag$mh`.invokeExact(MD,)
    as Short).toUShort()

public fun LLVMDIGlobalVariableExpressionGetVariable(GVE: LLVMMetadataRef): LLVMMetadataRef =
    `LLVMDIGlobalVariableExpressionGetVariable$mh`.invokeExact(GVE,) as MemorySegment

public fun LLVMDIGlobalVariableExpressionGetExpression(GVE: LLVMMetadataRef): LLVMMetadataRef =
    `LLVMDIGlobalVariableExpressionGetExpression$mh`.invokeExact(GVE,) as MemorySegment

public fun LLVMDIVariableGetFile(Var: LLVMMetadataRef): LLVMMetadataRef =
    `LLVMDIVariableGetFile$mh`.invokeExact(Var,) as MemorySegment

public fun LLVMDIVariableGetScope(Var: LLVMMetadataRef): LLVMMetadataRef =
    `LLVMDIVariableGetScope$mh`.invokeExact(Var,) as MemorySegment

public fun LLVMDIVariableGetLine(Var: LLVMMetadataRef): UInt =
    (`LLVMDIVariableGetLine$mh`.invokeExact(Var,) as Int).toUInt()

public fun LLVMTemporaryMDNode(
  Ctx: LLVMContextRef,
  Data: Pointer<LLVMMetadataRef>,
  NumElements: ULong,
): LLVMMetadataRef = `LLVMTemporaryMDNode$mh`.invokeExact(Ctx,Data,NumElements.toLong(),) as
    MemorySegment

public fun LLVMDisposeTemporaryMDNode(TempNode: LLVMMetadataRef): Unit =
    `LLVMDisposeTemporaryMDNode$mh`.invokeExact(TempNode,) as Unit

public fun LLVMMetadataReplaceAllUsesWith(TempTargetMetadata: LLVMMetadataRef,
    Replacement: LLVMMetadataRef): Unit =
    `LLVMMetadataReplaceAllUsesWith$mh`.invokeExact(TempTargetMetadata,Replacement,) as Unit

public fun LLVMDIBuilderCreateTempGlobalVariableFwdDecl(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Linkage: Pointer<Byte>,
  LnkLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  Ty: LLVMMetadataRef,
  LocalToUnit: LLVMBool,
  Decl: LLVMMetadataRef,
  AlignInBits: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateTempGlobalVariableFwdDecl$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),Linkage,LnkLen.toLong(),File,LineNo.toInt(),Ty,LocalToUnit,Decl,AlignInBits.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderInsertDeclareBefore(
  Builder: LLVMDIBuilderRef,
  Storage: LLVMValueRef,
  VarInfo: LLVMMetadataRef,
  Expr: LLVMMetadataRef,
  DebugLoc: LLVMMetadataRef,
  Instr: LLVMValueRef,
): LLVMValueRef =
    `LLVMDIBuilderInsertDeclareBefore$mh`.invokeExact(Builder,Storage,VarInfo,Expr,DebugLoc,Instr,)
    as MemorySegment

public fun LLVMDIBuilderInsertDeclareAtEnd(
  Builder: LLVMDIBuilderRef,
  Storage: LLVMValueRef,
  VarInfo: LLVMMetadataRef,
  Expr: LLVMMetadataRef,
  DebugLoc: LLVMMetadataRef,
  Block: LLVMBasicBlockRef,
): LLVMValueRef =
    `LLVMDIBuilderInsertDeclareAtEnd$mh`.invokeExact(Builder,Storage,VarInfo,Expr,DebugLoc,Block,)
    as MemorySegment

public fun LLVMDIBuilderInsertDbgValueBefore(
  Builder: LLVMDIBuilderRef,
  Val: LLVMValueRef,
  VarInfo: LLVMMetadataRef,
  Expr: LLVMMetadataRef,
  DebugLoc: LLVMMetadataRef,
  Instr: LLVMValueRef,
): LLVMValueRef =
    `LLVMDIBuilderInsertDbgValueBefore$mh`.invokeExact(Builder,Val,VarInfo,Expr,DebugLoc,Instr,) as
    MemorySegment

public fun LLVMDIBuilderInsertDbgValueAtEnd(
  Builder: LLVMDIBuilderRef,
  Val: LLVMValueRef,
  VarInfo: LLVMMetadataRef,
  Expr: LLVMMetadataRef,
  DebugLoc: LLVMMetadataRef,
  Block: LLVMBasicBlockRef,
): LLVMValueRef =
    `LLVMDIBuilderInsertDbgValueAtEnd$mh`.invokeExact(Builder,Val,VarInfo,Expr,DebugLoc,Block,) as
    MemorySegment

public fun LLVMDIBuilderCreateAutoVariable(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  File: LLVMMetadataRef,
  LineNo: UInt,
  Ty: LLVMMetadataRef,
  AlwaysPreserve: LLVMBool,
  Flags: LLVMDIFlags,
  AlignInBits: UInt,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateAutoVariable$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),File,LineNo.toInt(),Ty,AlwaysPreserve,Flags.value,AlignInBits.toInt(),)
    as MemorySegment

public fun LLVMDIBuilderCreateParameterVariable(
  Builder: LLVMDIBuilderRef,
  Scope: LLVMMetadataRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  ArgNo: UInt,
  File: LLVMMetadataRef,
  LineNo: UInt,
  Ty: LLVMMetadataRef,
  AlwaysPreserve: LLVMBool,
  Flags: LLVMDIFlags,
): LLVMMetadataRef =
    `LLVMDIBuilderCreateParameterVariable$mh`.invokeExact(Builder,Scope,Name,NameLen.toLong(),ArgNo.toInt(),File,LineNo.toInt(),Ty,AlwaysPreserve,Flags.value,)
    as MemorySegment

public fun LLVMGetSubprogram(Func: LLVMValueRef): LLVMMetadataRef =
    `LLVMGetSubprogram$mh`.invokeExact(Func,) as MemorySegment

public fun LLVMSetSubprogram(Func: LLVMValueRef, SP: LLVMMetadataRef): Unit =
    `LLVMSetSubprogram$mh`.invokeExact(Func,SP,) as Unit

public fun LLVMDISubprogramGetLine(Subprogram: LLVMMetadataRef): UInt =
    (`LLVMDISubprogramGetLine$mh`.invokeExact(Subprogram,) as Int).toUInt()

public fun LLVMInstructionGetDebugLoc(Inst: LLVMValueRef): LLVMMetadataRef =
    `LLVMInstructionGetDebugLoc$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMInstructionSetDebugLoc(Inst: LLVMValueRef, Loc: LLVMMetadataRef): Unit =
    `LLVMInstructionSetDebugLoc$mh`.invokeExact(Inst,Loc,) as Unit

public fun LLVMGetMetadataKind(Metadata: LLVMMetadataRef): LLVMMetadataKind =
    (`LLVMGetMetadataKind$mh`.invokeExact(Metadata,) as Int).toUInt()

public fun LLVMGetModuleDataLayout(M: LLVMModuleRef): LLVMTargetDataRef =
    `LLVMGetModuleDataLayout$mh`.invokeExact(M,) as MemorySegment

public fun LLVMSetModuleDataLayout(M: LLVMModuleRef, DL: LLVMTargetDataRef): Unit =
    `LLVMSetModuleDataLayout$mh`.invokeExact(M,DL,) as Unit

public fun LLVMCreateTargetData(StringRep: Pointer<Byte>): LLVMTargetDataRef =
    `LLVMCreateTargetData$mh`.invokeExact(StringRep,) as MemorySegment

public fun LLVMDisposeTargetData(TD: LLVMTargetDataRef): Unit =
    `LLVMDisposeTargetData$mh`.invokeExact(TD,) as Unit

public fun LLVMAddTargetLibraryInfo(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef): Unit =
    `LLVMAddTargetLibraryInfo$mh`.invokeExact(TLI,PM,) as Unit

public fun LLVMCopyStringRepOfTargetData(TD: LLVMTargetDataRef): Pointer<Byte> =
    `LLVMCopyStringRepOfTargetData$mh`.invokeExact(TD,) as MemorySegment

public fun LLVMByteOrder(TD: LLVMTargetDataRef): LLVMByteOrdering =
    LLVMByteOrdering.fromInt(`LLVMByteOrder$mh`.invokeExact(TD,) as Int)

public fun LLVMPointerSize(TD: LLVMTargetDataRef): UInt = (`LLVMPointerSize$mh`.invokeExact(TD,) as
    Int).toUInt()

public fun LLVMPointerSizeForAS(TD: LLVMTargetDataRef, AS: UInt): UInt =
    (`LLVMPointerSizeForAS$mh`.invokeExact(TD,AS.toInt(),) as Int).toUInt()

public fun LLVMIntPtrType(TD: LLVMTargetDataRef): LLVMTypeRef = `LLVMIntPtrType$mh`.invokeExact(TD,)
    as MemorySegment

public fun LLVMIntPtrTypeForAS(TD: LLVMTargetDataRef, AS: UInt): LLVMTypeRef =
    `LLVMIntPtrTypeForAS$mh`.invokeExact(TD,AS.toInt(),) as MemorySegment

public fun LLVMIntPtrTypeInContext(C: LLVMContextRef, TD: LLVMTargetDataRef): LLVMTypeRef =
    `LLVMIntPtrTypeInContext$mh`.invokeExact(C,TD,) as MemorySegment

public fun LLVMIntPtrTypeForASInContext(
  C: LLVMContextRef,
  TD: LLVMTargetDataRef,
  AS: UInt,
): LLVMTypeRef = `LLVMIntPtrTypeForASInContext$mh`.invokeExact(C,TD,AS.toInt(),) as MemorySegment

public fun LLVMSizeOfTypeInBits(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): ULong =
    (`LLVMSizeOfTypeInBits$mh`.invokeExact(TD,Ty,) as Long).toULong()

public fun LLVMStoreSizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): ULong =
    (`LLVMStoreSizeOfType$mh`.invokeExact(TD,Ty,) as Long).toULong()

public fun LLVMABISizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): ULong =
    (`LLVMABISizeOfType$mh`.invokeExact(TD,Ty,) as Long).toULong()

public fun LLVMABIAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): UInt =
    (`LLVMABIAlignmentOfType$mh`.invokeExact(TD,Ty,) as Int).toUInt()

public fun LLVMCallFrameAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): UInt =
    (`LLVMCallFrameAlignmentOfType$mh`.invokeExact(TD,Ty,) as Int).toUInt()

public fun LLVMPreferredAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): UInt =
    (`LLVMPreferredAlignmentOfType$mh`.invokeExact(TD,Ty,) as Int).toUInt()

public fun LLVMPreferredAlignmentOfGlobal(TD: LLVMTargetDataRef, GlobalVar: LLVMValueRef): UInt =
    (`LLVMPreferredAlignmentOfGlobal$mh`.invokeExact(TD,GlobalVar,) as Int).toUInt()

public fun LLVMElementAtOffset(
  TD: LLVMTargetDataRef,
  StructTy: LLVMTypeRef,
  Offset: ULong,
): UInt = (`LLVMElementAtOffset$mh`.invokeExact(TD,StructTy,Offset.toLong(),) as Int).toUInt()

public fun LLVMOffsetOfElement(
  TD: LLVMTargetDataRef,
  StructTy: LLVMTypeRef,
  Element: UInt,
): ULong = (`LLVMOffsetOfElement$mh`.invokeExact(TD,StructTy,Element.toInt(),) as Long).toULong()

public fun LLVMGetFirstTarget(): LLVMTargetRef = `LLVMGetFirstTarget$mh`.invokeExact() as
    MemorySegment

public fun LLVMGetNextTarget(T: LLVMTargetRef): LLVMTargetRef =
    `LLVMGetNextTarget$mh`.invokeExact(T,) as MemorySegment

public fun LLVMGetTargetFromName(Name: Pointer<Byte>): LLVMTargetRef =
    `LLVMGetTargetFromName$mh`.invokeExact(Name,) as MemorySegment

public fun LLVMGetTargetFromTriple(
  Triple: Pointer<Byte>,
  T: Pointer<LLVMTargetRef>,
  ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMGetTargetFromTriple$mh`.invokeExact(Triple,T,ErrorMessage,) as Int

public fun LLVMGetTargetName(T: LLVMTargetRef): Pointer<Byte> =
    `LLVMGetTargetName$mh`.invokeExact(T,) as MemorySegment

public fun LLVMGetTargetDescription(T: LLVMTargetRef): Pointer<Byte> =
    `LLVMGetTargetDescription$mh`.invokeExact(T,) as MemorySegment

public fun LLVMTargetHasJIT(T: LLVMTargetRef): LLVMBool = `LLVMTargetHasJIT$mh`.invokeExact(T,) as
    Int

public fun LLVMTargetHasTargetMachine(T: LLVMTargetRef): LLVMBool =
    `LLVMTargetHasTargetMachine$mh`.invokeExact(T,) as Int

public fun LLVMTargetHasAsmBackend(T: LLVMTargetRef): LLVMBool =
    `LLVMTargetHasAsmBackend$mh`.invokeExact(T,) as Int

public fun LLVMCreateTargetMachineOptions(): LLVMTargetMachineOptionsRef =
    `LLVMCreateTargetMachineOptions$mh`.invokeExact() as MemorySegment

public fun LLVMDisposeTargetMachineOptions(Options: LLVMTargetMachineOptionsRef): Unit =
    `LLVMDisposeTargetMachineOptions$mh`.invokeExact(Options,) as Unit

public fun LLVMTargetMachineOptionsSetCPU(Options: LLVMTargetMachineOptionsRef, CPU: Pointer<Byte>):
    Unit = `LLVMTargetMachineOptionsSetCPU$mh`.invokeExact(Options,CPU,) as Unit

public fun LLVMTargetMachineOptionsSetFeatures(Options: LLVMTargetMachineOptionsRef,
    Features: Pointer<Byte>): Unit =
    `LLVMTargetMachineOptionsSetFeatures$mh`.invokeExact(Options,Features,) as Unit

public fun LLVMTargetMachineOptionsSetABI(Options: LLVMTargetMachineOptionsRef, ABI: Pointer<Byte>):
    Unit = `LLVMTargetMachineOptionsSetABI$mh`.invokeExact(Options,ABI,) as Unit

public fun LLVMTargetMachineOptionsSetCodeGenOptLevel(Options: LLVMTargetMachineOptionsRef,
    Level: LLVMCodeGenOptLevel): Unit =
    `LLVMTargetMachineOptionsSetCodeGenOptLevel$mh`.invokeExact(Options,Level.value,) as Unit

public fun LLVMTargetMachineOptionsSetRelocMode(Options: LLVMTargetMachineOptionsRef,
    Reloc: LLVMRelocMode): Unit =
    `LLVMTargetMachineOptionsSetRelocMode$mh`.invokeExact(Options,Reloc.value,) as Unit

public fun LLVMTargetMachineOptionsSetCodeModel(Options: LLVMTargetMachineOptionsRef,
    CodeModel: LLVMCodeModel): Unit =
    `LLVMTargetMachineOptionsSetCodeModel$mh`.invokeExact(Options,CodeModel.value,) as Unit

public fun LLVMCreateTargetMachineWithOptions(
  T: LLVMTargetRef,
  Triple: Pointer<Byte>,
  Options: LLVMTargetMachineOptionsRef,
): LLVMTargetMachineRef = `LLVMCreateTargetMachineWithOptions$mh`.invokeExact(T,Triple,Options,) as
    MemorySegment

public fun LLVMCreateTargetMachine(
  T: LLVMTargetRef,
  Triple: Pointer<Byte>,
  CPU: Pointer<Byte>,
  Features: Pointer<Byte>,
  Level: LLVMCodeGenOptLevel,
  Reloc: LLVMRelocMode,
  CodeModel: LLVMCodeModel,
): LLVMTargetMachineRef =
    `LLVMCreateTargetMachine$mh`.invokeExact(T,Triple,CPU,Features,Level.value,Reloc.value,CodeModel.value,)
    as MemorySegment

public fun LLVMDisposeTargetMachine(T: LLVMTargetMachineRef): Unit =
    `LLVMDisposeTargetMachine$mh`.invokeExact(T,) as Unit

public fun LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef): LLVMTargetRef =
    `LLVMGetTargetMachineTarget$mh`.invokeExact(T,) as MemorySegment

public fun LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef): Pointer<Byte> =
    `LLVMGetTargetMachineTriple$mh`.invokeExact(T,) as MemorySegment

public fun LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef): Pointer<Byte> =
    `LLVMGetTargetMachineCPU$mh`.invokeExact(T,) as MemorySegment

public fun LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef): Pointer<Byte> =
    `LLVMGetTargetMachineFeatureString$mh`.invokeExact(T,) as MemorySegment

public fun LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef): LLVMTargetDataRef =
    `LLVMCreateTargetDataLayout$mh`.invokeExact(T,) as MemorySegment

public fun LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: LLVMBool): Unit =
    `LLVMSetTargetMachineAsmVerbosity$mh`.invokeExact(T,VerboseAsm,) as Unit

public fun LLVMSetTargetMachineFastISel(T: LLVMTargetMachineRef, Enable: LLVMBool): Unit =
    `LLVMSetTargetMachineFastISel$mh`.invokeExact(T,Enable,) as Unit

public fun LLVMSetTargetMachineGlobalISel(T: LLVMTargetMachineRef, Enable: LLVMBool): Unit =
    `LLVMSetTargetMachineGlobalISel$mh`.invokeExact(T,Enable,) as Unit

public fun LLVMSetTargetMachineGlobalISelAbort(T: LLVMTargetMachineRef,
    Mode: LLVMGlobalISelAbortMode): Unit =
    `LLVMSetTargetMachineGlobalISelAbort$mh`.invokeExact(T,Mode.value,) as Unit

public fun LLVMSetTargetMachineMachineOutliner(T: LLVMTargetMachineRef, Enable: LLVMBool): Unit =
    `LLVMSetTargetMachineMachineOutliner$mh`.invokeExact(T,Enable,) as Unit

public fun LLVMTargetMachineEmitToFile(
  T: LLVMTargetMachineRef,
  M: LLVMModuleRef,
  Filename: Pointer<Byte>,
  codegen: LLVMCodeGenFileType,
  ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMTargetMachineEmitToFile$mh`.invokeExact(T,M,Filename,codegen.value,ErrorMessage,)
    as Int

public fun LLVMTargetMachineEmitToMemoryBuffer(
  T: LLVMTargetMachineRef,
  M: LLVMModuleRef,
  codegen: LLVMCodeGenFileType,
  ErrorMessage: Pointer<Pointer<Byte>>,
  OutMemBuf: Pointer<LLVMMemoryBufferRef>,
): LLVMBool =
    `LLVMTargetMachineEmitToMemoryBuffer$mh`.invokeExact(T,M,codegen.value,ErrorMessage,OutMemBuf,)
    as Int

public fun LLVMGetDefaultTargetTriple(): Pointer<Byte> =
    `LLVMGetDefaultTargetTriple$mh`.invokeExact() as MemorySegment

public fun LLVMNormalizeTargetTriple(triple: Pointer<Byte>): Pointer<Byte> =
    `LLVMNormalizeTargetTriple$mh`.invokeExact(triple,) as MemorySegment

public fun LLVMGetHostCPUName(): Pointer<Byte> = `LLVMGetHostCPUName$mh`.invokeExact() as
    MemorySegment

public fun LLVMGetHostCPUFeatures(): Pointer<Byte> = `LLVMGetHostCPUFeatures$mh`.invokeExact() as
    MemorySegment

public fun LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef): Unit =
    `LLVMAddAnalysisPasses$mh`.invokeExact(T,PM,) as Unit

public fun LLVMWriteBitcodeToFile(M: LLVMModuleRef, Path: Pointer<Byte>): Int =
    `LLVMWriteBitcodeToFile$mh`.invokeExact(M,Path,) as Int

public fun LLVMWriteBitcodeToFD(
  M: LLVMModuleRef,
  FD: Int,
  ShouldClose: Int,
  Unbuffered: Int,
): Int = `LLVMWriteBitcodeToFD$mh`.invokeExact(M,FD,ShouldClose,Unbuffered,) as Int

public fun LLVMWriteBitcodeToFileHandle(M: LLVMModuleRef, Handle: Int): Int =
    `LLVMWriteBitcodeToFileHandle$mh`.invokeExact(M,Handle,) as Int

public fun LLVMWriteBitcodeToMemoryBuffer(M: LLVMModuleRef): LLVMMemoryBufferRef =
    `LLVMWriteBitcodeToMemoryBuffer$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetErrorTypeId(Err: LLVMErrorRef): LLVMErrorTypeId =
    `LLVMGetErrorTypeId$mh`.invokeExact(Err,) as MemorySegment

public fun LLVMConsumeError(Err: LLVMErrorRef): Unit = `LLVMConsumeError$mh`.invokeExact(Err,) as
    Unit

public fun LLVMGetErrorMessage(Err: LLVMErrorRef): Pointer<Byte> =
    `LLVMGetErrorMessage$mh`.invokeExact(Err,) as MemorySegment

public fun LLVMDisposeErrorMessage(ErrMsg: Pointer<Byte>): Unit =
    `LLVMDisposeErrorMessage$mh`.invokeExact(ErrMsg,) as Unit

public fun LLVMGetStringErrorTypeId(): LLVMErrorTypeId = `LLVMGetStringErrorTypeId$mh`.invokeExact()
    as MemorySegment

public fun LLVMCreateStringError(ErrMsg: Pointer<Byte>): LLVMErrorRef =
    `LLVMCreateStringError$mh`.invokeExact(ErrMsg,) as MemorySegment

public fun LLVMOrcExecutionSessionSetErrorReporter(
  ES: LLVMOrcExecutionSessionRef,
  ReportError: LLVMOrcErrorReporterFunction,
  Ctx: Pointer<Unit>,
): Unit = `LLVMOrcExecutionSessionSetErrorReporter$mh`.invokeExact(ES,ReportError,Ctx,) as Unit

public fun LLVMOrcExecutionSessionGetSymbolStringPool(ES: LLVMOrcExecutionSessionRef):
    LLVMOrcSymbolStringPoolRef = `LLVMOrcExecutionSessionGetSymbolStringPool$mh`.invokeExact(ES,) as
    MemorySegment

public fun LLVMOrcSymbolStringPoolClearDeadEntries(SSP: LLVMOrcSymbolStringPoolRef): Unit =
    `LLVMOrcSymbolStringPoolClearDeadEntries$mh`.invokeExact(SSP,) as Unit

public fun LLVMOrcExecutionSessionIntern(ES: LLVMOrcExecutionSessionRef, Name: Pointer<Byte>):
    LLVMOrcSymbolStringPoolEntryRef = `LLVMOrcExecutionSessionIntern$mh`.invokeExact(ES,Name,) as
    MemorySegment

public fun LLVMOrcExecutionSessionLookup(
  ES: LLVMOrcExecutionSessionRef,
  K: LLVMOrcLookupKind,
  SearchOrder: LLVMOrcCJITDylibSearchOrder,
  SearchOrderSize: ULong,
  Symbols: LLVMOrcCLookupSet,
  SymbolsSize: ULong,
  HandleResult: LLVMOrcExecutionSessionLookupHandleResultFunction,
  Ctx: Pointer<Unit>,
): Unit =
    `LLVMOrcExecutionSessionLookup$mh`.invokeExact(ES,K.value,SearchOrder,SearchOrderSize.toLong(),Symbols,SymbolsSize.toLong(),HandleResult,Ctx,)
    as Unit

public fun LLVMOrcRetainSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef): Unit =
    `LLVMOrcRetainSymbolStringPoolEntry$mh`.invokeExact(S,) as Unit

public fun LLVMOrcReleaseSymbolStringPoolEntry(S: LLVMOrcSymbolStringPoolEntryRef): Unit =
    `LLVMOrcReleaseSymbolStringPoolEntry$mh`.invokeExact(S,) as Unit

public fun LLVMOrcSymbolStringPoolEntryStr(S: LLVMOrcSymbolStringPoolEntryRef): Pointer<Byte> =
    `LLVMOrcSymbolStringPoolEntryStr$mh`.invokeExact(S,) as MemorySegment

public fun LLVMOrcReleaseResourceTracker(RT: LLVMOrcResourceTrackerRef): Unit =
    `LLVMOrcReleaseResourceTracker$mh`.invokeExact(RT,) as Unit

public fun LLVMOrcResourceTrackerTransferTo(SrcRT: LLVMOrcResourceTrackerRef,
    DstRT: LLVMOrcResourceTrackerRef): Unit =
    `LLVMOrcResourceTrackerTransferTo$mh`.invokeExact(SrcRT,DstRT,) as Unit

public fun LLVMOrcResourceTrackerRemove(RT: LLVMOrcResourceTrackerRef): LLVMErrorRef =
    `LLVMOrcResourceTrackerRemove$mh`.invokeExact(RT,) as MemorySegment

public fun LLVMOrcDisposeDefinitionGenerator(DG: LLVMOrcDefinitionGeneratorRef): Unit =
    `LLVMOrcDisposeDefinitionGenerator$mh`.invokeExact(DG,) as Unit

public fun LLVMOrcDisposeMaterializationUnit(MU: LLVMOrcMaterializationUnitRef): Unit =
    `LLVMOrcDisposeMaterializationUnit$mh`.invokeExact(MU,) as Unit

public fun LLVMOrcCreateCustomMaterializationUnit(
  Name: Pointer<Byte>,
  Ctx: Pointer<Unit>,
  Syms: LLVMOrcCSymbolFlagsMapPairs,
  NumSyms: ULong,
  InitSym: LLVMOrcSymbolStringPoolEntryRef,
  Materialize: LLVMOrcMaterializationUnitMaterializeFunction,
  Discard: LLVMOrcMaterializationUnitDiscardFunction,
  Destroy: LLVMOrcMaterializationUnitDestroyFunction,
): LLVMOrcMaterializationUnitRef =
    `LLVMOrcCreateCustomMaterializationUnit$mh`.invokeExact(Name,Ctx,Syms,NumSyms.toLong(),InitSym,Materialize,Discard,Destroy,)
    as MemorySegment

public fun LLVMOrcAbsoluteSymbols(Syms: LLVMOrcCSymbolMapPairs, NumPairs: ULong):
    LLVMOrcMaterializationUnitRef = `LLVMOrcAbsoluteSymbols$mh`.invokeExact(Syms,NumPairs.toLong(),)
    as MemorySegment

public fun LLVMOrcLazyReexports(
  LCTM: LLVMOrcLazyCallThroughManagerRef,
  ISM: LLVMOrcIndirectStubsManagerRef,
  SourceRef: LLVMOrcJITDylibRef,
  CallableAliases: LLVMOrcCSymbolAliasMapPairs,
  NumPairs: ULong,
): LLVMOrcMaterializationUnitRef =
    `LLVMOrcLazyReexports$mh`.invokeExact(LCTM,ISM,SourceRef,CallableAliases,NumPairs.toLong(),) as
    MemorySegment

public fun LLVMOrcDisposeMaterializationResponsibility(MR: LLVMOrcMaterializationResponsibilityRef):
    Unit = `LLVMOrcDisposeMaterializationResponsibility$mh`.invokeExact(MR,) as Unit

public
    fun LLVMOrcMaterializationResponsibilityGetTargetDylib(MR: LLVMOrcMaterializationResponsibilityRef):
    LLVMOrcJITDylibRef = `LLVMOrcMaterializationResponsibilityGetTargetDylib$mh`.invokeExact(MR,) as
    MemorySegment

public
    fun LLVMOrcMaterializationResponsibilityGetExecutionSession(MR: LLVMOrcMaterializationResponsibilityRef):
    LLVMOrcExecutionSessionRef =
    `LLVMOrcMaterializationResponsibilityGetExecutionSession$mh`.invokeExact(MR,) as MemorySegment

public
    fun LLVMOrcMaterializationResponsibilityGetSymbols(MR: LLVMOrcMaterializationResponsibilityRef,
    NumPairs: Pointer<ULong>): LLVMOrcCSymbolFlagsMapPairs =
    `LLVMOrcMaterializationResponsibilityGetSymbols$mh`.invokeExact(MR,NumPairs,) as MemorySegment

public fun LLVMOrcDisposeCSymbolFlagsMap(Pairs: LLVMOrcCSymbolFlagsMapPairs): Unit =
    `LLVMOrcDisposeCSymbolFlagsMap$mh`.invokeExact(Pairs,) as Unit

public
    fun LLVMOrcMaterializationResponsibilityGetInitializerSymbol(MR: LLVMOrcMaterializationResponsibilityRef):
    LLVMOrcSymbolStringPoolEntryRef =
    `LLVMOrcMaterializationResponsibilityGetInitializerSymbol$mh`.invokeExact(MR,) as MemorySegment

public
    fun LLVMOrcMaterializationResponsibilityGetRequestedSymbols(MR: LLVMOrcMaterializationResponsibilityRef,
    NumSymbols: Pointer<ULong>): Pointer<LLVMOrcSymbolStringPoolEntryRef> =
    `LLVMOrcMaterializationResponsibilityGetRequestedSymbols$mh`.invokeExact(MR,NumSymbols,) as
    MemorySegment

public fun LLVMOrcDisposeSymbols(Symbols: Pointer<LLVMOrcSymbolStringPoolEntryRef>): Unit =
    `LLVMOrcDisposeSymbols$mh`.invokeExact(Symbols,) as Unit

public fun LLVMOrcMaterializationResponsibilityNotifyResolved(
  MR: LLVMOrcMaterializationResponsibilityRef,
  Symbols: LLVMOrcCSymbolMapPairs,
  NumPairs: ULong,
): LLVMErrorRef =
    `LLVMOrcMaterializationResponsibilityNotifyResolved$mh`.invokeExact(MR,Symbols,NumPairs.toLong(),)
    as MemorySegment

public
    fun LLVMOrcMaterializationResponsibilityNotifyEmitted(MR: LLVMOrcMaterializationResponsibilityRef):
    LLVMErrorRef = `LLVMOrcMaterializationResponsibilityNotifyEmitted$mh`.invokeExact(MR,) as
    MemorySegment

public fun LLVMOrcMaterializationResponsibilityDefineMaterializing(
  MR: LLVMOrcMaterializationResponsibilityRef,
  Pairs: LLVMOrcCSymbolFlagsMapPairs,
  NumPairs: ULong,
): LLVMErrorRef =
    `LLVMOrcMaterializationResponsibilityDefineMaterializing$mh`.invokeExact(MR,Pairs,NumPairs.toLong(),)
    as MemorySegment

public
    fun LLVMOrcMaterializationResponsibilityFailMaterialization(MR: LLVMOrcMaterializationResponsibilityRef):
    Unit = `LLVMOrcMaterializationResponsibilityFailMaterialization$mh`.invokeExact(MR,) as Unit

public fun LLVMOrcMaterializationResponsibilityReplace(MR: LLVMOrcMaterializationResponsibilityRef,
    MU: LLVMOrcMaterializationUnitRef): LLVMErrorRef =
    `LLVMOrcMaterializationResponsibilityReplace$mh`.invokeExact(MR,MU,) as MemorySegment

public fun LLVMOrcMaterializationResponsibilityDelegate(
  MR: LLVMOrcMaterializationResponsibilityRef,
  Symbols: Pointer<LLVMOrcSymbolStringPoolEntryRef>,
  NumSymbols: ULong,
  Result: Pointer<LLVMOrcMaterializationResponsibilityRef>,
): LLVMErrorRef =
    `LLVMOrcMaterializationResponsibilityDelegate$mh`.invokeExact(MR,Symbols,NumSymbols.toLong(),Result,)
    as MemorySegment

public fun LLVMOrcMaterializationResponsibilityAddDependencies(
  MR: LLVMOrcMaterializationResponsibilityRef,
  Name: LLVMOrcSymbolStringPoolEntryRef,
  Dependencies: LLVMOrcCDependenceMapPairs,
  NumPairs: ULong,
): Unit =
    `LLVMOrcMaterializationResponsibilityAddDependencies$mh`.invokeExact(MR,Name,Dependencies,NumPairs.toLong(),)
    as Unit

public fun LLVMOrcMaterializationResponsibilityAddDependenciesForAll(
  MR: LLVMOrcMaterializationResponsibilityRef,
  Dependencies: LLVMOrcCDependenceMapPairs,
  NumPairs: ULong,
): Unit =
    `LLVMOrcMaterializationResponsibilityAddDependenciesForAll$mh`.invokeExact(MR,Dependencies,NumPairs.toLong(),)
    as Unit

public fun LLVMOrcExecutionSessionCreateBareJITDylib(ES: LLVMOrcExecutionSessionRef,
    Name: Pointer<Byte>): LLVMOrcJITDylibRef =
    `LLVMOrcExecutionSessionCreateBareJITDylib$mh`.invokeExact(ES,Name,) as MemorySegment

public fun LLVMOrcExecutionSessionCreateJITDylib(
  ES: LLVMOrcExecutionSessionRef,
  Result: Pointer<LLVMOrcJITDylibRef>,
  Name: Pointer<Byte>,
): LLVMErrorRef = `LLVMOrcExecutionSessionCreateJITDylib$mh`.invokeExact(ES,Result,Name,) as
    MemorySegment

public fun LLVMOrcExecutionSessionGetJITDylibByName(ES: LLVMOrcExecutionSessionRef,
    Name: Pointer<Byte>): LLVMOrcJITDylibRef =
    `LLVMOrcExecutionSessionGetJITDylibByName$mh`.invokeExact(ES,Name,) as MemorySegment

public fun LLVMOrcJITDylibCreateResourceTracker(JD: LLVMOrcJITDylibRef): LLVMOrcResourceTrackerRef =
    `LLVMOrcJITDylibCreateResourceTracker$mh`.invokeExact(JD,) as MemorySegment

public fun LLVMOrcJITDylibGetDefaultResourceTracker(JD: LLVMOrcJITDylibRef):
    LLVMOrcResourceTrackerRef = `LLVMOrcJITDylibGetDefaultResourceTracker$mh`.invokeExact(JD,) as
    MemorySegment

public fun LLVMOrcJITDylibDefine(JD: LLVMOrcJITDylibRef, MU: LLVMOrcMaterializationUnitRef):
    LLVMErrorRef = `LLVMOrcJITDylibDefine$mh`.invokeExact(JD,MU,) as MemorySegment

public fun LLVMOrcJITDylibClear(JD: LLVMOrcJITDylibRef): LLVMErrorRef =
    `LLVMOrcJITDylibClear$mh`.invokeExact(JD,) as MemorySegment

public fun LLVMOrcJITDylibAddGenerator(JD: LLVMOrcJITDylibRef, DG: LLVMOrcDefinitionGeneratorRef):
    Unit = `LLVMOrcJITDylibAddGenerator$mh`.invokeExact(JD,DG,) as Unit

public fun LLVMOrcCreateCustomCAPIDefinitionGenerator(
  F: LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction,
  Ctx: Pointer<Unit>,
  Dispose: LLVMOrcDisposeCAPIDefinitionGeneratorFunction,
): LLVMOrcDefinitionGeneratorRef =
    `LLVMOrcCreateCustomCAPIDefinitionGenerator$mh`.invokeExact(F,Ctx,Dispose,) as MemorySegment

public fun LLVMOrcLookupStateContinueLookup(S: LLVMOrcLookupStateRef, Err: LLVMErrorRef): Unit =
    `LLVMOrcLookupStateContinueLookup$mh`.invokeExact(S,Err,) as Unit

public fun LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess(
  Result: Pointer<LLVMOrcDefinitionGeneratorRef>,
  GlobalPrefx: Byte,
  Filter: LLVMOrcSymbolPredicate,
  FilterCtx: Pointer<Unit>,
): LLVMErrorRef =
    `LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess$mh`.invokeExact(Result,GlobalPrefx,Filter,FilterCtx,)
    as MemorySegment

public fun LLVMOrcCreateDynamicLibrarySearchGeneratorForPath(
  Result: Pointer<LLVMOrcDefinitionGeneratorRef>,
  FileName: Pointer<Byte>,
  GlobalPrefix: Byte,
  Filter: LLVMOrcSymbolPredicate,
  FilterCtx: Pointer<Unit>,
): LLVMErrorRef =
    `LLVMOrcCreateDynamicLibrarySearchGeneratorForPath$mh`.invokeExact(Result,FileName,GlobalPrefix,Filter,FilterCtx,)
    as MemorySegment

//public fun LLVMOrcCreateStaticLibrarySearchGeneratorForPath(
//  Result: Pointer<LLVMOrcDefinitionGeneratorRef>,
//  ObjLayer: LLVMOrcObjectLayerRef,
//  FileName: Pointer<Byte>,
//  TargetTriple: Pointer<Byte>,
//): LLVMErrorRef =
//    `LLVMOrcCreateStaticLibrarySearchGeneratorForPath$mh`.invokeExact(Result,ObjLayer,FileName,TargetTriple,)
//    as MemorySegment

public fun LLVMOrcCreateNewThreadSafeContext(): LLVMOrcThreadSafeContextRef =
    `LLVMOrcCreateNewThreadSafeContext$mh`.invokeExact() as MemorySegment

public fun LLVMOrcThreadSafeContextGetContext(TSCtx: LLVMOrcThreadSafeContextRef): LLVMContextRef =
    `LLVMOrcThreadSafeContextGetContext$mh`.invokeExact(TSCtx,) as MemorySegment

public fun LLVMOrcDisposeThreadSafeContext(TSCtx: LLVMOrcThreadSafeContextRef): Unit =
    `LLVMOrcDisposeThreadSafeContext$mh`.invokeExact(TSCtx,) as Unit

public fun LLVMOrcCreateNewThreadSafeModule(M: LLVMModuleRef, TSCtx: LLVMOrcThreadSafeContextRef):
    LLVMOrcThreadSafeModuleRef = `LLVMOrcCreateNewThreadSafeModule$mh`.invokeExact(M,TSCtx,) as
    MemorySegment

public fun LLVMOrcDisposeThreadSafeModule(TSM: LLVMOrcThreadSafeModuleRef): Unit =
    `LLVMOrcDisposeThreadSafeModule$mh`.invokeExact(TSM,) as Unit

public fun LLVMOrcThreadSafeModuleWithModuleDo(
  TSM: LLVMOrcThreadSafeModuleRef,
  F: LLVMOrcGenericIRModuleOperationFunction,
  Ctx: Pointer<Unit>,
): LLVMErrorRef = `LLVMOrcThreadSafeModuleWithModuleDo$mh`.invokeExact(TSM,F,Ctx,) as MemorySegment

public
    fun LLVMOrcJITTargetMachineBuilderDetectHost(Result: Pointer<LLVMOrcJITTargetMachineBuilderRef>):
    LLVMErrorRef = `LLVMOrcJITTargetMachineBuilderDetectHost$mh`.invokeExact(Result,) as
    MemorySegment

public fun LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine(TM: LLVMTargetMachineRef):
    LLVMOrcJITTargetMachineBuilderRef =
    `LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine$mh`.invokeExact(TM,) as MemorySegment

public fun LLVMOrcDisposeJITTargetMachineBuilder(JTMB: LLVMOrcJITTargetMachineBuilderRef): Unit =
    `LLVMOrcDisposeJITTargetMachineBuilder$mh`.invokeExact(JTMB,) as Unit

public fun LLVMOrcJITTargetMachineBuilderGetTargetTriple(JTMB: LLVMOrcJITTargetMachineBuilderRef):
    Pointer<Byte> = `LLVMOrcJITTargetMachineBuilderGetTargetTriple$mh`.invokeExact(JTMB,) as
    MemorySegment

public fun LLVMOrcJITTargetMachineBuilderSetTargetTriple(JTMB: LLVMOrcJITTargetMachineBuilderRef,
    TargetTriple: Pointer<Byte>): Unit =
    `LLVMOrcJITTargetMachineBuilderSetTargetTriple$mh`.invokeExact(JTMB,TargetTriple,) as Unit

public fun LLVMOrcObjectLayerAddObjectFile(
  ObjLayer: LLVMOrcObjectLayerRef,
  JD: LLVMOrcJITDylibRef,
  ObjBuffer: LLVMMemoryBufferRef,
): LLVMErrorRef = `LLVMOrcObjectLayerAddObjectFile$mh`.invokeExact(ObjLayer,JD,ObjBuffer,) as
    MemorySegment

public fun LLVMOrcObjectLayerAddObjectFileWithRT(
  ObjLayer: LLVMOrcObjectLayerRef,
  RT: LLVMOrcResourceTrackerRef,
  ObjBuffer: LLVMMemoryBufferRef,
): LLVMErrorRef = `LLVMOrcObjectLayerAddObjectFileWithRT$mh`.invokeExact(ObjLayer,RT,ObjBuffer,) as
    MemorySegment

public fun LLVMOrcObjectLayerEmit(
  ObjLayer: LLVMOrcObjectLayerRef,
  R: LLVMOrcMaterializationResponsibilityRef,
  ObjBuffer: LLVMMemoryBufferRef,
): Unit = `LLVMOrcObjectLayerEmit$mh`.invokeExact(ObjLayer,R,ObjBuffer,) as Unit

public fun LLVMOrcDisposeObjectLayer(ObjLayer: LLVMOrcObjectLayerRef): Unit =
    `LLVMOrcDisposeObjectLayer$mh`.invokeExact(ObjLayer,) as Unit

public fun LLVMOrcIRTransformLayerEmit(
  IRTransformLayer: LLVMOrcIRTransformLayerRef,
  MR: LLVMOrcMaterializationResponsibilityRef,
  TSM: LLVMOrcThreadSafeModuleRef,
): Unit = `LLVMOrcIRTransformLayerEmit$mh`.invokeExact(IRTransformLayer,MR,TSM,) as Unit

public fun LLVMOrcIRTransformLayerSetTransform(
  IRTransformLayer: LLVMOrcIRTransformLayerRef,
  TransformFunction: LLVMOrcIRTransformLayerTransformFunction,
  Ctx: Pointer<Unit>,
): Unit =
    `LLVMOrcIRTransformLayerSetTransform$mh`.invokeExact(IRTransformLayer,TransformFunction,Ctx,) as
    Unit

public fun LLVMOrcObjectTransformLayerSetTransform(
  ObjTransformLayer: LLVMOrcObjectTransformLayerRef,
  TransformFunction: LLVMOrcObjectTransformLayerTransformFunction,
  Ctx: Pointer<Unit>,
): Unit =
    `LLVMOrcObjectTransformLayerSetTransform$mh`.invokeExact(ObjTransformLayer,TransformFunction,Ctx,)
    as Unit

public fun LLVMOrcCreateLocalIndirectStubsManager(TargetTriple: Pointer<Byte>):
    LLVMOrcIndirectStubsManagerRef =
    `LLVMOrcCreateLocalIndirectStubsManager$mh`.invokeExact(TargetTriple,) as MemorySegment

public fun LLVMOrcDisposeIndirectStubsManager(ISM: LLVMOrcIndirectStubsManagerRef): Unit =
    `LLVMOrcDisposeIndirectStubsManager$mh`.invokeExact(ISM,) as Unit

public fun LLVMOrcCreateLocalLazyCallThroughManager(
  TargetTriple: Pointer<Byte>,
  ES: LLVMOrcExecutionSessionRef,
  ErrorHandlerAddr: LLVMOrcJITTargetAddress,
  LCTM: Pointer<LLVMOrcLazyCallThroughManagerRef>,
): LLVMErrorRef =
    `LLVMOrcCreateLocalLazyCallThroughManager$mh`.invokeExact(TargetTriple,ES,ErrorHandlerAddr.toLong(),LCTM,)
    as MemorySegment

public fun LLVMOrcDisposeLazyCallThroughManager(LCTM: LLVMOrcLazyCallThroughManagerRef): Unit =
    `LLVMOrcDisposeLazyCallThroughManager$mh`.invokeExact(LCTM,) as Unit

public fun LLVMOrcCreateDumpObjects(DumpDir: Pointer<Byte>, IdentifierOverride: Pointer<Byte>):
    LLVMOrcDumpObjectsRef = `LLVMOrcCreateDumpObjects$mh`.invokeExact(DumpDir,IdentifierOverride,)
    as MemorySegment

public fun LLVMOrcDisposeDumpObjects(DumpObjects: LLVMOrcDumpObjectsRef): Unit =
    `LLVMOrcDisposeDumpObjects$mh`.invokeExact(DumpObjects,) as Unit

public fun LLVMOrcDumpObjects_CallOperator(DumpObjects: LLVMOrcDumpObjectsRef,
    ObjBuffer: Pointer<LLVMMemoryBufferRef>): LLVMErrorRef =
    `LLVMOrcDumpObjects_CallOperator$mh`.invokeExact(DumpObjects,ObjBuffer,) as MemorySegment

public fun LLVMLinkInMCJIT(): Unit = `LLVMLinkInMCJIT$mh`.invokeExact() as Unit

public fun LLVMLinkInInterpreter(): Unit = `LLVMLinkInInterpreter$mh`.invokeExact() as Unit

public fun LLVMCreateGenericValueOfInt(
  Ty: LLVMTypeRef,
  N: ULong,
  IsSigned: LLVMBool,
): LLVMGenericValueRef = `LLVMCreateGenericValueOfInt$mh`.invokeExact(Ty,N.toLong(),IsSigned,) as
    MemorySegment

public fun LLVMCreateGenericValueOfPointer(P: Pointer<Unit>): LLVMGenericValueRef =
    `LLVMCreateGenericValueOfPointer$mh`.invokeExact(P,) as MemorySegment

public fun LLVMCreateGenericValueOfFloat(Ty: LLVMTypeRef, N: Double): LLVMGenericValueRef =
    `LLVMCreateGenericValueOfFloat$mh`.invokeExact(Ty,N,) as MemorySegment

public fun LLVMGenericValueIntWidth(GenValRef: LLVMGenericValueRef): UInt =
    (`LLVMGenericValueIntWidth$mh`.invokeExact(GenValRef,) as Int).toUInt()

public fun LLVMGenericValueToInt(GenVal: LLVMGenericValueRef, IsSigned: LLVMBool): ULong =
    (`LLVMGenericValueToInt$mh`.invokeExact(GenVal,IsSigned,) as Long).toULong()

public fun LLVMGenericValueToPointer(GenVal: LLVMGenericValueRef): Pointer<Unit> =
    `LLVMGenericValueToPointer$mh`.invokeExact(GenVal,) as MemorySegment

public fun LLVMGenericValueToFloat(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef): Double =
    `LLVMGenericValueToFloat$mh`.invokeExact(TyRef,GenVal,) as Double

public fun LLVMDisposeGenericValue(GenVal: LLVMGenericValueRef): Unit =
    `LLVMDisposeGenericValue$mh`.invokeExact(GenVal,) as Unit

public fun LLVMCreateExecutionEngineForModule(
  OutEE: Pointer<LLVMExecutionEngineRef>,
  M: LLVMModuleRef,
  OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateExecutionEngineForModule$mh`.invokeExact(OutEE,M,OutError,) as Int

public fun LLVMCreateInterpreterForModule(
  OutInterp: Pointer<LLVMExecutionEngineRef>,
  M: LLVMModuleRef,
  OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateInterpreterForModule$mh`.invokeExact(OutInterp,M,OutError,) as Int

public fun LLVMCreateJITCompilerForModule(
  OutJIT: Pointer<LLVMExecutionEngineRef>,
  M: LLVMModuleRef,
  OptLevel: UInt,
  OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateJITCompilerForModule$mh`.invokeExact(OutJIT,M,OptLevel.toInt(),OutError,)
    as Int

public fun LLVMInitializeMCJITCompilerOptions(Options: Pointer<LLVMMCJITCompilerOptions>,
    SizeOfOptions: ULong): Unit =
    `LLVMInitializeMCJITCompilerOptions$mh`.invokeExact(Options,SizeOfOptions.toLong(),) as Unit

public fun LLVMCreateMCJITCompilerForModule(
  OutJIT: Pointer<LLVMExecutionEngineRef>,
  M: LLVMModuleRef,
  Options: Pointer<LLVMMCJITCompilerOptions>,
  SizeOfOptions: ULong,
  OutError: Pointer<Pointer<Byte>>,
): LLVMBool =
    `LLVMCreateMCJITCompilerForModule$mh`.invokeExact(OutJIT,M,Options,SizeOfOptions.toLong(),OutError,)
    as Int

public fun LLVMDisposeExecutionEngine(EE: LLVMExecutionEngineRef): Unit =
    `LLVMDisposeExecutionEngine$mh`.invokeExact(EE,) as Unit

public fun LLVMRunStaticConstructors(EE: LLVMExecutionEngineRef): Unit =
    `LLVMRunStaticConstructors$mh`.invokeExact(EE,) as Unit

public fun LLVMRunStaticDestructors(EE: LLVMExecutionEngineRef): Unit =
    `LLVMRunStaticDestructors$mh`.invokeExact(EE,) as Unit

public fun LLVMRunFunctionAsMain(
  EE: LLVMExecutionEngineRef,
  F: LLVMValueRef,
  ArgC: UInt,
  ArgV: Pointer<Pointer<Byte>>,
  EnvP: Pointer<Pointer<Byte>>,
): Int = `LLVMRunFunctionAsMain$mh`.invokeExact(EE,F,ArgC.toInt(),ArgV,EnvP,) as Int

public fun LLVMRunFunction(
  EE: LLVMExecutionEngineRef,
  F: LLVMValueRef,
  NumArgs: UInt,
  Args: Pointer<LLVMGenericValueRef>,
): LLVMGenericValueRef = `LLVMRunFunction$mh`.invokeExact(EE,F,NumArgs.toInt(),Args,) as
    MemorySegment

public fun LLVMFreeMachineCodeForFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef): Unit =
    `LLVMFreeMachineCodeForFunction$mh`.invokeExact(EE,F,) as Unit

public fun LLVMAddModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef): Unit =
    `LLVMAddModule$mh`.invokeExact(EE,M,) as Unit

public fun LLVMRemoveModule(
  EE: LLVMExecutionEngineRef,
  M: LLVMModuleRef,
  OutMod: Pointer<LLVMModuleRef>,
  OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMRemoveModule$mh`.invokeExact(EE,M,OutMod,OutError,) as Int

public fun LLVMFindFunction(
  EE: LLVMExecutionEngineRef,
  Name: Pointer<Byte>,
  OutFn: Pointer<LLVMValueRef>,
): LLVMBool = `LLVMFindFunction$mh`.invokeExact(EE,Name,OutFn,) as Int

public fun LLVMRecompileAndRelinkFunction(EE: LLVMExecutionEngineRef, Fn: LLVMValueRef):
    Pointer<Unit> = `LLVMRecompileAndRelinkFunction$mh`.invokeExact(EE,Fn,) as MemorySegment

public fun LLVMGetExecutionEngineTargetData(EE: LLVMExecutionEngineRef): LLVMTargetDataRef =
    `LLVMGetExecutionEngineTargetData$mh`.invokeExact(EE,) as MemorySegment

public fun LLVMGetExecutionEngineTargetMachine(EE: LLVMExecutionEngineRef): LLVMTargetMachineRef =
    `LLVMGetExecutionEngineTargetMachine$mh`.invokeExact(EE,) as MemorySegment

public fun LLVMAddGlobalMapping(
  EE: LLVMExecutionEngineRef,
  Global: LLVMValueRef,
  Addr: Pointer<Unit>,
): Unit = `LLVMAddGlobalMapping$mh`.invokeExact(EE,Global,Addr,) as Unit

public fun LLVMGetPointerToGlobal(EE: LLVMExecutionEngineRef, Global: LLVMValueRef): Pointer<Unit> =
    `LLVMGetPointerToGlobal$mh`.invokeExact(EE,Global,) as MemorySegment

public fun LLVMGetGlobalValueAddress(EE: LLVMExecutionEngineRef, Name: Pointer<Byte>): ULong =
    (`LLVMGetGlobalValueAddress$mh`.invokeExact(EE,Name,) as Long).toULong()

public fun LLVMGetFunctionAddress(EE: LLVMExecutionEngineRef, Name: Pointer<Byte>): ULong =
    (`LLVMGetFunctionAddress$mh`.invokeExact(EE,Name,) as Long).toULong()

public fun LLVMExecutionEngineGetErrMsg(EE: LLVMExecutionEngineRef,
    OutError: Pointer<Pointer<Byte>>): LLVMBool =
    `LLVMExecutionEngineGetErrMsg$mh`.invokeExact(EE,OutError,) as Int

public fun LLVMCreateSimpleMCJITMemoryManager(
  Opaque: Pointer<Unit>,
  AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback,
  AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback,
  FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback,
  Destroy: LLVMMemoryManagerDestroyCallback,
): LLVMMCJITMemoryManagerRef =
    `LLVMCreateSimpleMCJITMemoryManager$mh`.invokeExact(Opaque,AllocateCodeSection,AllocateDataSection,FinalizeMemory,Destroy,)
    as MemorySegment

public fun LLVMDisposeMCJITMemoryManager(MM: LLVMMCJITMemoryManagerRef): Unit =
    `LLVMDisposeMCJITMemoryManager$mh`.invokeExact(MM,) as Unit

public fun LLVMCreateGDBRegistrationListener(): LLVMJITEventListenerRef =
    `LLVMCreateGDBRegistrationListener$mh`.invokeExact() as MemorySegment

public fun LLVMCreateIntelJITEventListener(): LLVMJITEventListenerRef =
    `LLVMCreateIntelJITEventListener$mh`.invokeExact() as MemorySegment

public fun LLVMCreateOProfileJITEventListener(): LLVMJITEventListenerRef =
    `LLVMCreateOProfileJITEventListener$mh`.invokeExact() as MemorySegment

public fun LLVMCreatePerfJITEventListener(): LLVMJITEventListenerRef =
    `LLVMCreatePerfJITEventListener$mh`.invokeExact() as MemorySegment

public
    fun LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager(ES: LLVMOrcExecutionSessionRef):
    LLVMOrcObjectLayerRef =
    `LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager$mh`.invokeExact(ES,) as
    MemorySegment

public fun LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks(
  ES: LLVMOrcExecutionSessionRef,
  CreateContextCtx: Pointer<Unit>,
  CreateContext: LLVMMemoryManagerCreateContextCallback,
  NotifyTerminating: LLVMMemoryManagerNotifyTerminatingCallback,
  AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback,
  AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback,
  FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback,
  Destroy: LLVMMemoryManagerDestroyCallback,
): LLVMOrcObjectLayerRef =
    `LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks$mh`.invokeExact(ES,CreateContextCtx,CreateContext,NotifyTerminating,AllocateCodeSection,AllocateDataSection,FinalizeMemory,Destroy,)
    as MemorySegment

public
    fun LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener(RTDyldObjLinkingLayer: LLVMOrcObjectLayerRef,
    Listener: LLVMJITEventListenerRef): Unit =
    `LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener$mh`.invokeExact(RTDyldObjLinkingLayer,Listener,)
    as Unit

public fun LLVMInstallFatalErrorHandler(Handler: LLVMFatalErrorHandler): Unit =
    `LLVMInstallFatalErrorHandler$mh`.invokeExact(Handler,) as Unit

public fun LLVMResetFatalErrorHandler(): Unit = `LLVMResetFatalErrorHandler$mh`.invokeExact() as
    Unit

public fun LLVMEnablePrettyStackTrace(): Unit = `LLVMEnablePrettyStackTrace$mh`.invokeExact() as
    Unit

public fun LLVMRunPasses(
  M: LLVMModuleRef,
  Passes: Pointer<Byte>,
  TM: LLVMTargetMachineRef,
  Options: LLVMPassBuilderOptionsRef,
): LLVMErrorRef = `LLVMRunPasses$mh`.invokeExact(M,Passes,TM,Options,) as MemorySegment

public fun LLVMCreatePassBuilderOptions(): LLVMPassBuilderOptionsRef =
    `LLVMCreatePassBuilderOptions$mh`.invokeExact() as MemorySegment

public fun LLVMPassBuilderOptionsSetVerifyEach(Options: LLVMPassBuilderOptionsRef,
    VerifyEach: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetVerifyEach$mh`.invokeExact(Options,VerifyEach,) as Unit

public fun LLVMPassBuilderOptionsSetDebugLogging(Options: LLVMPassBuilderOptionsRef,
    DebugLogging: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetDebugLogging$mh`.invokeExact(Options,DebugLogging,) as Unit

public fun LLVMPassBuilderOptionsSetLoopInterleaving(Options: LLVMPassBuilderOptionsRef,
    LoopInterleaving: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetLoopInterleaving$mh`.invokeExact(Options,LoopInterleaving,) as Unit

public fun LLVMPassBuilderOptionsSetLoopVectorization(Options: LLVMPassBuilderOptionsRef,
    LoopVectorization: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetLoopVectorization$mh`.invokeExact(Options,LoopVectorization,) as Unit

public fun LLVMPassBuilderOptionsSetSLPVectorization(Options: LLVMPassBuilderOptionsRef,
    SLPVectorization: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetSLPVectorization$mh`.invokeExact(Options,SLPVectorization,) as Unit

public fun LLVMPassBuilderOptionsSetLoopUnrolling(Options: LLVMPassBuilderOptionsRef,
    LoopUnrolling: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetLoopUnrolling$mh`.invokeExact(Options,LoopUnrolling,) as Unit

public fun LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll(Options: LLVMPassBuilderOptionsRef,
    ForgetAllSCEVInLoopUnroll: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll$mh`.invokeExact(Options,ForgetAllSCEVInLoopUnroll,)
    as Unit

public fun LLVMPassBuilderOptionsSetLicmMssaOptCap(Options: LLVMPassBuilderOptionsRef,
    LicmMssaOptCap: UInt): Unit =
    `LLVMPassBuilderOptionsSetLicmMssaOptCap$mh`.invokeExact(Options,LicmMssaOptCap.toInt(),) as
    Unit

public fun LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap(Options: LLVMPassBuilderOptionsRef,
    LicmMssaNoAccForPromotionCap: UInt): Unit =
    `LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap$mh`.invokeExact(Options,LicmMssaNoAccForPromotionCap.toInt(),)
    as Unit

public fun LLVMPassBuilderOptionsSetCallGraphProfile(Options: LLVMPassBuilderOptionsRef,
    CallGraphProfile: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetCallGraphProfile$mh`.invokeExact(Options,CallGraphProfile,) as Unit

public fun LLVMPassBuilderOptionsSetMergeFunctions(Options: LLVMPassBuilderOptionsRef,
    MergeFunctions: LLVMBool): Unit =
    `LLVMPassBuilderOptionsSetMergeFunctions$mh`.invokeExact(Options,MergeFunctions,) as Unit

public fun LLVMPassBuilderOptionsSetInlinerThreshold(Options: LLVMPassBuilderOptionsRef,
    Threshold: Int): Unit =
    `LLVMPassBuilderOptionsSetInlinerThreshold$mh`.invokeExact(Options,Threshold,) as Unit

public fun LLVMDisposePassBuilderOptions(Options: LLVMPassBuilderOptionsRef): Unit =
    `LLVMDisposePassBuilderOptions$mh`.invokeExact(Options,) as Unit

public fun LLVMOrcCreateLLJITBuilder(): LLVMOrcLLJITBuilderRef =
    `LLVMOrcCreateLLJITBuilder$mh`.invokeExact() as MemorySegment

public fun LLVMOrcDisposeLLJITBuilder(Builder: LLVMOrcLLJITBuilderRef): Unit =
    `LLVMOrcDisposeLLJITBuilder$mh`.invokeExact(Builder,) as Unit

public fun LLVMOrcLLJITBuilderSetJITTargetMachineBuilder(Builder: LLVMOrcLLJITBuilderRef,
    JTMB: LLVMOrcJITTargetMachineBuilderRef): Unit =
    `LLVMOrcLLJITBuilderSetJITTargetMachineBuilder$mh`.invokeExact(Builder,JTMB,) as Unit

public fun LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator(
  Builder: LLVMOrcLLJITBuilderRef,
  F: LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction,
  Ctx: Pointer<Unit>,
): Unit = `LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator$mh`.invokeExact(Builder,F,Ctx,) as Unit

public fun LLVMOrcCreateLLJIT(Result: Pointer<LLVMOrcLLJITRef>, Builder: LLVMOrcLLJITBuilderRef):
    LLVMErrorRef = `LLVMOrcCreateLLJIT$mh`.invokeExact(Result,Builder,) as MemorySegment

public fun LLVMOrcDisposeLLJIT(J: LLVMOrcLLJITRef): LLVMErrorRef =
    `LLVMOrcDisposeLLJIT$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITGetExecutionSession(J: LLVMOrcLLJITRef): LLVMOrcExecutionSessionRef =
    `LLVMOrcLLJITGetExecutionSession$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITGetMainJITDylib(J: LLVMOrcLLJITRef): LLVMOrcJITDylibRef =
    `LLVMOrcLLJITGetMainJITDylib$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITGetTripleString(J: LLVMOrcLLJITRef): Pointer<Byte> =
    `LLVMOrcLLJITGetTripleString$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITGetGlobalPrefix(J: LLVMOrcLLJITRef): Byte =
    `LLVMOrcLLJITGetGlobalPrefix$mh`.invokeExact(J,) as Byte

public fun LLVMOrcLLJITMangleAndIntern(J: LLVMOrcLLJITRef, UnmangledName: Pointer<Byte>):
    LLVMOrcSymbolStringPoolEntryRef = `LLVMOrcLLJITMangleAndIntern$mh`.invokeExact(J,UnmangledName,)
    as MemorySegment

public fun LLVMOrcLLJITAddObjectFile(
  J: LLVMOrcLLJITRef,
  JD: LLVMOrcJITDylibRef,
  ObjBuffer: LLVMMemoryBufferRef,
): LLVMErrorRef = `LLVMOrcLLJITAddObjectFile$mh`.invokeExact(J,JD,ObjBuffer,) as MemorySegment

public fun LLVMOrcLLJITAddObjectFileWithRT(
  J: LLVMOrcLLJITRef,
  RT: LLVMOrcResourceTrackerRef,
  ObjBuffer: LLVMMemoryBufferRef,
): LLVMErrorRef = `LLVMOrcLLJITAddObjectFileWithRT$mh`.invokeExact(J,RT,ObjBuffer,) as MemorySegment

public fun LLVMOrcLLJITAddLLVMIRModule(
  J: LLVMOrcLLJITRef,
  JD: LLVMOrcJITDylibRef,
  TSM: LLVMOrcThreadSafeModuleRef,
): LLVMErrorRef = `LLVMOrcLLJITAddLLVMIRModule$mh`.invokeExact(J,JD,TSM,) as MemorySegment

public fun LLVMOrcLLJITAddLLVMIRModuleWithRT(
  J: LLVMOrcLLJITRef,
  JD: LLVMOrcResourceTrackerRef,
  TSM: LLVMOrcThreadSafeModuleRef,
): LLVMErrorRef = `LLVMOrcLLJITAddLLVMIRModuleWithRT$mh`.invokeExact(J,JD,TSM,) as MemorySegment

public fun LLVMOrcLLJITLookup(
  J: LLVMOrcLLJITRef,
  Result: Pointer<LLVMOrcExecutorAddress>,
  Name: Pointer<Byte>,
): LLVMErrorRef = `LLVMOrcLLJITLookup$mh`.invokeExact(J,Result,Name,) as MemorySegment

public fun LLVMOrcLLJITGetObjLinkingLayer(J: LLVMOrcLLJITRef): LLVMOrcObjectLayerRef =
    `LLVMOrcLLJITGetObjLinkingLayer$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITGetObjTransformLayer(J: LLVMOrcLLJITRef): LLVMOrcObjectTransformLayerRef =
    `LLVMOrcLLJITGetObjTransformLayer$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITGetIRTransformLayer(J: LLVMOrcLLJITRef): LLVMOrcIRTransformLayerRef =
    `LLVMOrcLLJITGetIRTransformLayer$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITGetDataLayoutStr(J: LLVMOrcLLJITRef): Pointer<Byte> =
    `LLVMOrcLLJITGetDataLayoutStr$mh`.invokeExact(J,) as MemorySegment

public fun LLVMOrcLLJITEnableDebugSupport(J: LLVMOrcLLJITRef): LLVMErrorRef =
    `LLVMOrcLLJITEnableDebugSupport$mh`.invokeExact(J,) as MemorySegment

public fun LLVMVerifyModule(
  M: LLVMModuleRef,
  Action: LLVMVerifierFailureAction,
  OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMVerifyModule$mh`.invokeExact(M,Action.value,OutMessage,) as Int

public fun LLVMVerifyFunction(Fn: LLVMValueRef, Action: LLVMVerifierFailureAction): LLVMBool =
    `LLVMVerifyFunction$mh`.invokeExact(Fn,Action.value,) as Int

public fun LLVMViewFunctionCFG(Fn: LLVMValueRef): Unit = `LLVMViewFunctionCFG$mh`.invokeExact(Fn,)
    as Unit

public fun LLVMViewFunctionCFGOnly(Fn: LLVMValueRef): Unit =
    `LLVMViewFunctionCFGOnly$mh`.invokeExact(Fn,) as Unit

public fun LLVMCreateDisasm(
  TripleName: Pointer<Byte>,
  DisInfo: Pointer<Unit>,
  TagType: Int,
  GetOpInfo: LLVMOpInfoCallback,
  SymbolLookUp: LLVMSymbolLookupCallback,
): LLVMDisasmContextRef =
    `LLVMCreateDisasm$mh`.invokeExact(TripleName,DisInfo,TagType,GetOpInfo,SymbolLookUp,) as
    MemorySegment

public fun LLVMCreateDisasmCPU(
  Triple: Pointer<Byte>,
  CPU: Pointer<Byte>,
  DisInfo: Pointer<Unit>,
  TagType: Int,
  GetOpInfo: LLVMOpInfoCallback,
  SymbolLookUp: LLVMSymbolLookupCallback,
): LLVMDisasmContextRef =
    `LLVMCreateDisasmCPU$mh`.invokeExact(Triple,CPU,DisInfo,TagType,GetOpInfo,SymbolLookUp,) as
    MemorySegment

public fun LLVMCreateDisasmCPUFeatures(
  Triple: Pointer<Byte>,
  CPU: Pointer<Byte>,
  Features: Pointer<Byte>,
  DisInfo: Pointer<Unit>,
  TagType: Int,
  GetOpInfo: LLVMOpInfoCallback,
  SymbolLookUp: LLVMSymbolLookupCallback,
): LLVMDisasmContextRef =
    `LLVMCreateDisasmCPUFeatures$mh`.invokeExact(Triple,CPU,Features,DisInfo,TagType,GetOpInfo,SymbolLookUp,)
    as MemorySegment

public fun LLVMSetDisasmOptions(DC: LLVMDisasmContextRef, Options: ULong): Int =
    `LLVMSetDisasmOptions$mh`.invokeExact(DC,Options.toLong(),) as Int

public fun LLVMDisasmDispose(DC: LLVMDisasmContextRef): Unit =
    `LLVMDisasmDispose$mh`.invokeExact(DC,) as Unit

public fun LLVMDisasmInstruction(
  DC: LLVMDisasmContextRef,
  Bytes: Pointer<UByte>,
  BytesSize: ULong,
  PC: ULong,
  OutString: Pointer<Byte>,
  OutStringSize: ULong,
): ULong =
    (`LLVMDisasmInstruction$mh`.invokeExact(DC,Bytes,BytesSize.toLong(),PC.toLong(),OutString,OutStringSize.toLong(),)
    as Long).toULong()

public fun LLVMParseBitcode(
  MemBuf: LLVMMemoryBufferRef,
  OutModule: Pointer<LLVMModuleRef>,
  OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMParseBitcode$mh`.invokeExact(MemBuf,OutModule,OutMessage,) as Int

public fun LLVMParseBitcode2(MemBuf: LLVMMemoryBufferRef, OutModule: Pointer<LLVMModuleRef>):
    LLVMBool = `LLVMParseBitcode2$mh`.invokeExact(MemBuf,OutModule,) as Int

public fun LLVMParseBitcodeInContext(
  ContextRef: LLVMContextRef,
  MemBuf: LLVMMemoryBufferRef,
  OutModule: Pointer<LLVMModuleRef>,
  OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMParseBitcodeInContext$mh`.invokeExact(ContextRef,MemBuf,OutModule,OutMessage,) as
    Int

public fun LLVMParseBitcodeInContext2(
  ContextRef: LLVMContextRef,
  MemBuf: LLVMMemoryBufferRef,
  OutModule: Pointer<LLVMModuleRef>,
): LLVMBool = `LLVMParseBitcodeInContext2$mh`.invokeExact(ContextRef,MemBuf,OutModule,) as Int

public fun LLVMGetBitcodeModuleInContext(
  ContextRef: LLVMContextRef,
  MemBuf: LLVMMemoryBufferRef,
  OutM: Pointer<LLVMModuleRef>,
  OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMGetBitcodeModuleInContext$mh`.invokeExact(ContextRef,MemBuf,OutM,OutMessage,) as
    Int

public fun LLVMGetBitcodeModuleInContext2(
  ContextRef: LLVMContextRef,
  MemBuf: LLVMMemoryBufferRef,
  OutM: Pointer<LLVMModuleRef>,
): LLVMBool = `LLVMGetBitcodeModuleInContext2$mh`.invokeExact(ContextRef,MemBuf,OutM,) as Int

public fun LLVMGetBitcodeModule(
  MemBuf: LLVMMemoryBufferRef,
  OutM: Pointer<LLVMModuleRef>,
  OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMGetBitcodeModule$mh`.invokeExact(MemBuf,OutM,OutMessage,) as Int

public fun LLVMGetBitcodeModule2(MemBuf: LLVMMemoryBufferRef, OutM: Pointer<LLVMModuleRef>):
    LLVMBool = `LLVMGetBitcodeModule2$mh`.invokeExact(MemBuf,OutM,) as Int

public fun LLVMRemarkStringGetData(String: LLVMRemarkStringRef): Pointer<Byte> =
    `LLVMRemarkStringGetData$mh`.invokeExact(String,) as MemorySegment

public fun LLVMRemarkStringGetLen(String: LLVMRemarkStringRef): UInt =
    (`LLVMRemarkStringGetLen$mh`.invokeExact(String,) as Int).toUInt()

public fun LLVMRemarkDebugLocGetSourceFilePath(DL: LLVMRemarkDebugLocRef): LLVMRemarkStringRef =
    `LLVMRemarkDebugLocGetSourceFilePath$mh`.invokeExact(DL,) as MemorySegment

public fun LLVMRemarkDebugLocGetSourceLine(DL: LLVMRemarkDebugLocRef): UInt =
    (`LLVMRemarkDebugLocGetSourceLine$mh`.invokeExact(DL,) as Int).toUInt()

public fun LLVMRemarkDebugLocGetSourceColumn(DL: LLVMRemarkDebugLocRef): UInt =
    (`LLVMRemarkDebugLocGetSourceColumn$mh`.invokeExact(DL,) as Int).toUInt()

public fun LLVMRemarkArgGetKey(Arg: LLVMRemarkArgRef): LLVMRemarkStringRef =
    `LLVMRemarkArgGetKey$mh`.invokeExact(Arg,) as MemorySegment

public fun LLVMRemarkArgGetValue(Arg: LLVMRemarkArgRef): LLVMRemarkStringRef =
    `LLVMRemarkArgGetValue$mh`.invokeExact(Arg,) as MemorySegment

public fun LLVMRemarkArgGetDebugLoc(Arg: LLVMRemarkArgRef): LLVMRemarkDebugLocRef =
    `LLVMRemarkArgGetDebugLoc$mh`.invokeExact(Arg,) as MemorySegment

public fun LLVMRemarkEntryDispose(Remark: LLVMRemarkEntryRef): Unit =
    `LLVMRemarkEntryDispose$mh`.invokeExact(Remark,) as Unit

public fun LLVMRemarkEntryGetType(Remark: LLVMRemarkEntryRef): LLVMRemarkType =
    LLVMRemarkType.fromInt(`LLVMRemarkEntryGetType$mh`.invokeExact(Remark,) as Int)

public fun LLVMRemarkEntryGetPassName(Remark: LLVMRemarkEntryRef): LLVMRemarkStringRef =
    `LLVMRemarkEntryGetPassName$mh`.invokeExact(Remark,) as MemorySegment

public fun LLVMRemarkEntryGetRemarkName(Remark: LLVMRemarkEntryRef): LLVMRemarkStringRef =
    `LLVMRemarkEntryGetRemarkName$mh`.invokeExact(Remark,) as MemorySegment

public fun LLVMRemarkEntryGetFunctionName(Remark: LLVMRemarkEntryRef): LLVMRemarkStringRef =
    `LLVMRemarkEntryGetFunctionName$mh`.invokeExact(Remark,) as MemorySegment

public fun LLVMRemarkEntryGetDebugLoc(Remark: LLVMRemarkEntryRef): LLVMRemarkDebugLocRef =
    `LLVMRemarkEntryGetDebugLoc$mh`.invokeExact(Remark,) as MemorySegment

public fun LLVMRemarkEntryGetHotness(Remark: LLVMRemarkEntryRef): ULong =
    (`LLVMRemarkEntryGetHotness$mh`.invokeExact(Remark,) as Long).toULong()

public fun LLVMRemarkEntryGetNumArgs(Remark: LLVMRemarkEntryRef): UInt =
    (`LLVMRemarkEntryGetNumArgs$mh`.invokeExact(Remark,) as Int).toUInt()

public fun LLVMRemarkEntryGetFirstArg(Remark: LLVMRemarkEntryRef): LLVMRemarkArgRef =
    `LLVMRemarkEntryGetFirstArg$mh`.invokeExact(Remark,) as MemorySegment

public fun LLVMRemarkEntryGetNextArg(It: LLVMRemarkArgRef, Remark: LLVMRemarkEntryRef):
    LLVMRemarkArgRef = `LLVMRemarkEntryGetNextArg$mh`.invokeExact(It,Remark,) as MemorySegment

public fun LLVMRemarkParserCreateYAML(Buf: Pointer<Unit>, Size: ULong): LLVMRemarkParserRef =
    `LLVMRemarkParserCreateYAML$mh`.invokeExact(Buf,Size.toLong(),) as MemorySegment

public fun LLVMRemarkParserCreateBitstream(Buf: Pointer<Unit>, Size: ULong): LLVMRemarkParserRef =
    `LLVMRemarkParserCreateBitstream$mh`.invokeExact(Buf,Size.toLong(),) as MemorySegment

public fun LLVMRemarkParserGetNext(Parser: LLVMRemarkParserRef): LLVMRemarkEntryRef =
    `LLVMRemarkParserGetNext$mh`.invokeExact(Parser,) as MemorySegment

public fun LLVMRemarkParserHasError(Parser: LLVMRemarkParserRef): LLVMBool =
    `LLVMRemarkParserHasError$mh`.invokeExact(Parser,) as Int

public fun LLVMRemarkParserGetErrorMessage(Parser: LLVMRemarkParserRef): Pointer<Byte> =
    `LLVMRemarkParserGetErrorMessage$mh`.invokeExact(Parser,) as MemorySegment

public fun LLVMRemarkParserDispose(Parser: LLVMRemarkParserRef): Unit =
    `LLVMRemarkParserDispose$mh`.invokeExact(Parser,) as Unit

public fun LLVMRemarkVersion(): UInt = (`LLVMRemarkVersion$mh`.invokeExact() as Int).toUInt()

public fun LLVMGetOrInsertComdat(M: LLVMModuleRef, Name: Pointer<Byte>): LLVMComdatRef =
    `LLVMGetOrInsertComdat$mh`.invokeExact(M,Name,) as MemorySegment

public fun LLVMGetComdat(V: LLVMValueRef): LLVMComdatRef = `LLVMGetComdat$mh`.invokeExact(V,) as
    MemorySegment

public fun LLVMSetComdat(V: LLVMValueRef, C: LLVMComdatRef): Unit =
    `LLVMSetComdat$mh`.invokeExact(V,C,) as Unit

public fun LLVMGetComdatSelectionKind(C: LLVMComdatRef): LLVMComdatSelectionKind =
    LLVMComdatSelectionKind.fromInt(`LLVMGetComdatSelectionKind$mh`.invokeExact(C,) as Int)

public fun LLVMSetComdatSelectionKind(C: LLVMComdatRef, Kind: LLVMComdatSelectionKind): Unit =
    `LLVMSetComdatSelectionKind$mh`.invokeExact(C,Kind.value,) as Unit

public fun llvm_blake3_version(): Pointer<Byte> = `llvm_blake3_version$mh`.invokeExact() as
    MemorySegment

public fun llvm_blake3_hasher_init(self: Pointer<llvm_blake3_hasher>): Unit =
    `llvm_blake3_hasher_init$mh`.invokeExact(self,) as Unit

public fun llvm_blake3_hasher_init_keyed(self: Pointer<llvm_blake3_hasher>,
    key: NativeArray<UByte>): Unit = `llvm_blake3_hasher_init_keyed$mh`.invokeExact(self,key,) as
    Unit

public fun llvm_blake3_hasher_init_derive_key(self: Pointer<llvm_blake3_hasher>,
    context: Pointer<Byte>): Unit =
    `llvm_blake3_hasher_init_derive_key$mh`.invokeExact(self,context,) as Unit

public fun llvm_blake3_hasher_init_derive_key_raw(
  self: Pointer<llvm_blake3_hasher>,
  context: Pointer<Unit>,
  context_len: ULong,
): Unit =
    `llvm_blake3_hasher_init_derive_key_raw$mh`.invokeExact(self,context,context_len.toLong(),) as
    Unit

public fun llvm_blake3_hasher_update(
  self: Pointer<llvm_blake3_hasher>,
  input: Pointer<Unit>,
  input_len: ULong,
): Unit = `llvm_blake3_hasher_update$mh`.invokeExact(self,input,input_len.toLong(),) as Unit

public fun llvm_blake3_hasher_finalize(
  self: Pointer<llvm_blake3_hasher>,
  `out`: Pointer<UByte>,
  out_len: ULong,
): Unit = `llvm_blake3_hasher_finalize$mh`.invokeExact(self,`out`,out_len.toLong(),) as Unit

public fun llvm_blake3_hasher_finalize_seek(
  self: Pointer<llvm_blake3_hasher>,
  seek: ULong,
  `out`: Pointer<UByte>,
  out_len: ULong,
): Unit =
    `llvm_blake3_hasher_finalize_seek$mh`.invokeExact(self,seek.toLong(),`out`,out_len.toLong(),) as
    Unit

public fun llvm_blake3_hasher_reset(self: Pointer<llvm_blake3_hasher>): Unit =
    `llvm_blake3_hasher_reset$mh`.invokeExact(self,) as Unit

public fun LLVMParseIRInContext(
  ContextRef: LLVMContextRef,
  MemBuf: LLVMMemoryBufferRef,
  OutM: Pointer<LLVMModuleRef>,
  OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMParseIRInContext$mh`.invokeExact(ContextRef,MemBuf,OutM,OutMessage,) as Int

public fun LLVMLoadLibraryPermanently(Filename: Pointer<Byte>): LLVMBool =
    `LLVMLoadLibraryPermanently$mh`.invokeExact(Filename,) as Int

public fun LLVMParseCommandLineOptions(
  argc: Int,
  argv: Pointer<Pointer<Byte>>,
  Overview: Pointer<Byte>,
): Unit = `LLVMParseCommandLineOptions$mh`.invokeExact(argc,argv,Overview,) as Unit

public fun LLVMSearchForAddressOfSymbol(symbolName: Pointer<Byte>): Pointer<Unit> =
    `LLVMSearchForAddressOfSymbol$mh`.invokeExact(symbolName,) as MemorySegment

public fun LLVMAddSymbol(symbolName: Pointer<Byte>, symbolValue: Pointer<Unit>): Unit =
    `LLVMAddSymbol$mh`.invokeExact(symbolName,symbolValue,) as Unit

public fun LLVMCreateBinary(
  MemBuf: LLVMMemoryBufferRef,
  Context: LLVMContextRef,
  ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBinaryRef = `LLVMCreateBinary$mh`.invokeExact(MemBuf,Context,ErrorMessage,) as MemorySegment

public fun LLVMDisposeBinary(BR: LLVMBinaryRef): Unit = `LLVMDisposeBinary$mh`.invokeExact(BR,) as
    Unit

public fun LLVMBinaryCopyMemoryBuffer(BR: LLVMBinaryRef): LLVMMemoryBufferRef =
    `LLVMBinaryCopyMemoryBuffer$mh`.invokeExact(BR,) as MemorySegment

public fun LLVMBinaryGetType(BR: LLVMBinaryRef): LLVMBinaryType =
    LLVMBinaryType.fromInt(`LLVMBinaryGetType$mh`.invokeExact(BR,) as Int)

public fun LLVMMachOUniversalBinaryCopyObjectForArch(
  BR: LLVMBinaryRef,
  Arch: Pointer<Byte>,
  ArchLen: ULong,
  ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBinaryRef =
    `LLVMMachOUniversalBinaryCopyObjectForArch$mh`.invokeExact(BR,Arch,ArchLen.toLong(),ErrorMessage,)
    as MemorySegment

public fun LLVMObjectFileCopySectionIterator(BR: LLVMBinaryRef): LLVMSectionIteratorRef =
    `LLVMObjectFileCopySectionIterator$mh`.invokeExact(BR,) as MemorySegment

public fun LLVMObjectFileIsSectionIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSectionIteratorRef):
    LLVMBool = `LLVMObjectFileIsSectionIteratorAtEnd$mh`.invokeExact(BR,SI,) as Int

public fun LLVMObjectFileCopySymbolIterator(BR: LLVMBinaryRef): LLVMSymbolIteratorRef =
    `LLVMObjectFileCopySymbolIterator$mh`.invokeExact(BR,) as MemorySegment

public fun LLVMObjectFileIsSymbolIteratorAtEnd(BR: LLVMBinaryRef, SI: LLVMSymbolIteratorRef):
    LLVMBool = `LLVMObjectFileIsSymbolIteratorAtEnd$mh`.invokeExact(BR,SI,) as Int

public fun LLVMDisposeSectionIterator(SI: LLVMSectionIteratorRef): Unit =
    `LLVMDisposeSectionIterator$mh`.invokeExact(SI,) as Unit

public fun LLVMMoveToNextSection(SI: LLVMSectionIteratorRef): Unit =
    `LLVMMoveToNextSection$mh`.invokeExact(SI,) as Unit

public fun LLVMMoveToContainingSection(Sect: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef):
    Unit = `LLVMMoveToContainingSection$mh`.invokeExact(Sect,Sym,) as Unit

public fun LLVMDisposeSymbolIterator(SI: LLVMSymbolIteratorRef): Unit =
    `LLVMDisposeSymbolIterator$mh`.invokeExact(SI,) as Unit

public fun LLVMMoveToNextSymbol(SI: LLVMSymbolIteratorRef): Unit =
    `LLVMMoveToNextSymbol$mh`.invokeExact(SI,) as Unit

public fun LLVMGetSectionName(SI: LLVMSectionIteratorRef): Pointer<Byte> =
    `LLVMGetSectionName$mh`.invokeExact(SI,) as MemorySegment

public fun LLVMGetSectionSize(SI: LLVMSectionIteratorRef): ULong =
    (`LLVMGetSectionSize$mh`.invokeExact(SI,) as Long).toULong()

public fun LLVMGetSectionContents(SI: LLVMSectionIteratorRef): Pointer<Byte> =
    `LLVMGetSectionContents$mh`.invokeExact(SI,) as MemorySegment

public fun LLVMGetSectionAddress(SI: LLVMSectionIteratorRef): ULong =
    (`LLVMGetSectionAddress$mh`.invokeExact(SI,) as Long).toULong()

public fun LLVMGetSectionContainsSymbol(SI: LLVMSectionIteratorRef, Sym: LLVMSymbolIteratorRef):
    LLVMBool = `LLVMGetSectionContainsSymbol$mh`.invokeExact(SI,Sym,) as Int

public fun LLVMGetRelocations(Section: LLVMSectionIteratorRef): LLVMRelocationIteratorRef =
    `LLVMGetRelocations$mh`.invokeExact(Section,) as MemorySegment

public fun LLVMDisposeRelocationIterator(RI: LLVMRelocationIteratorRef): Unit =
    `LLVMDisposeRelocationIterator$mh`.invokeExact(RI,) as Unit

public fun LLVMIsRelocationIteratorAtEnd(Section: LLVMSectionIteratorRef,
    RI: LLVMRelocationIteratorRef): LLVMBool =
    `LLVMIsRelocationIteratorAtEnd$mh`.invokeExact(Section,RI,) as Int

public fun LLVMMoveToNextRelocation(RI: LLVMRelocationIteratorRef): Unit =
    `LLVMMoveToNextRelocation$mh`.invokeExact(RI,) as Unit

public fun LLVMGetSymbolName(SI: LLVMSymbolIteratorRef): Pointer<Byte> =
    `LLVMGetSymbolName$mh`.invokeExact(SI,) as MemorySegment

public fun LLVMGetSymbolAddress(SI: LLVMSymbolIteratorRef): ULong =
    (`LLVMGetSymbolAddress$mh`.invokeExact(SI,) as Long).toULong()

public fun LLVMGetSymbolSize(SI: LLVMSymbolIteratorRef): ULong =
    (`LLVMGetSymbolSize$mh`.invokeExact(SI,) as Long).toULong()

public fun LLVMGetRelocationOffset(RI: LLVMRelocationIteratorRef): ULong =
    (`LLVMGetRelocationOffset$mh`.invokeExact(RI,) as Long).toULong()

public fun LLVMGetRelocationSymbol(RI: LLVMRelocationIteratorRef): LLVMSymbolIteratorRef =
    `LLVMGetRelocationSymbol$mh`.invokeExact(RI,) as MemorySegment

public fun LLVMGetRelocationType(RI: LLVMRelocationIteratorRef): ULong =
    (`LLVMGetRelocationType$mh`.invokeExact(RI,) as Long).toULong()

public fun LLVMGetRelocationTypeName(RI: LLVMRelocationIteratorRef): Pointer<Byte> =
    `LLVMGetRelocationTypeName$mh`.invokeExact(RI,) as MemorySegment

public fun LLVMGetRelocationValueString(RI: LLVMRelocationIteratorRef): Pointer<Byte> =
    `LLVMGetRelocationValueString$mh`.invokeExact(RI,) as MemorySegment

public fun LLVMCreateObjectFile(MemBuf: LLVMMemoryBufferRef): LLVMObjectFileRef =
    `LLVMCreateObjectFile$mh`.invokeExact(MemBuf,) as MemorySegment

public fun LLVMDisposeObjectFile(ObjectFile: LLVMObjectFileRef): Unit =
    `LLVMDisposeObjectFile$mh`.invokeExact(ObjectFile,) as Unit

public fun LLVMGetSections(ObjectFile: LLVMObjectFileRef): LLVMSectionIteratorRef =
    `LLVMGetSections$mh`.invokeExact(ObjectFile,) as MemorySegment

public fun LLVMIsSectionIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSectionIteratorRef):
    LLVMBool = `LLVMIsSectionIteratorAtEnd$mh`.invokeExact(ObjectFile,SI,) as Int

public fun LLVMGetSymbols(ObjectFile: LLVMObjectFileRef): LLVMSymbolIteratorRef =
    `LLVMGetSymbols$mh`.invokeExact(ObjectFile,) as MemorySegment

public fun LLVMIsSymbolIteratorAtEnd(ObjectFile: LLVMObjectFileRef, SI: LLVMSymbolIteratorRef):
    LLVMBool = `LLVMIsSymbolIteratorAtEnd$mh`.invokeExact(ObjectFile,SI,) as Int

public fun LLVMShutdown(): Unit = `LLVMShutdown$mh`.invokeExact() as Unit

public fun LLVMGetVersion(
  Major: Pointer<UInt>,
  Minor: Pointer<UInt>,
  Patch: Pointer<UInt>,
): Unit = `LLVMGetVersion$mh`.invokeExact(Major,Minor,Patch,) as Unit

public fun LLVMCreateMessage(Message: Pointer<Byte>): Pointer<Byte> =
    `LLVMCreateMessage$mh`.invokeExact(Message,) as MemorySegment

public fun LLVMDisposeMessage(Message: Pointer<Byte>): Unit =
    `LLVMDisposeMessage$mh`.invokeExact(Message,) as Unit

public fun LLVMContextCreate(): LLVMContextRef = `LLVMContextCreate$mh`.invokeExact() as
    MemorySegment

public fun LLVMGetGlobalContext(): LLVMContextRef = `LLVMGetGlobalContext$mh`.invokeExact() as
    MemorySegment

public fun LLVMContextSetDiagnosticHandler(
  C: LLVMContextRef,
  Handler: LLVMDiagnosticHandler,
  DiagnosticContext: Pointer<Unit>,
): Unit = `LLVMContextSetDiagnosticHandler$mh`.invokeExact(C,Handler,DiagnosticContext,) as Unit

public fun LLVMContextGetDiagnosticHandler(C: LLVMContextRef): LLVMDiagnosticHandler =
    `LLVMContextGetDiagnosticHandler$mh`.invokeExact(C,) as MemorySegment

public fun LLVMContextGetDiagnosticContext(C: LLVMContextRef): Pointer<Unit> =
    `LLVMContextGetDiagnosticContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMContextSetYieldCallback(
  C: LLVMContextRef,
  Callback: LLVMYieldCallback,
  OpaqueHandle: Pointer<Unit>,
): Unit = `LLVMContextSetYieldCallback$mh`.invokeExact(C,Callback,OpaqueHandle,) as Unit

public fun LLVMContextShouldDiscardValueNames(C: LLVMContextRef): LLVMBool =
    `LLVMContextShouldDiscardValueNames$mh`.invokeExact(C,) as Int

public fun LLVMContextSetDiscardValueNames(C: LLVMContextRef, Discard: LLVMBool): Unit =
    `LLVMContextSetDiscardValueNames$mh`.invokeExact(C,Discard,) as Unit

public fun LLVMContextDispose(C: LLVMContextRef): Unit = `LLVMContextDispose$mh`.invokeExact(C,) as
    Unit

public fun LLVMGetDiagInfoDescription(DI: LLVMDiagnosticInfoRef): Pointer<Byte> =
    `LLVMGetDiagInfoDescription$mh`.invokeExact(DI,) as MemorySegment

public fun LLVMGetDiagInfoSeverity(DI: LLVMDiagnosticInfoRef): LLVMDiagnosticSeverity =
    LLVMDiagnosticSeverity.fromInt(`LLVMGetDiagInfoSeverity$mh`.invokeExact(DI,) as Int)

public fun LLVMGetMDKindIDInContext(
  C: LLVMContextRef,
  Name: Pointer<Byte>,
  SLen: UInt,
): UInt = (`LLVMGetMDKindIDInContext$mh`.invokeExact(C,Name,SLen.toInt(),) as Int).toUInt()

public fun LLVMGetMDKindID(Name: Pointer<Byte>, SLen: UInt): UInt =
    (`LLVMGetMDKindID$mh`.invokeExact(Name,SLen.toInt(),) as Int).toUInt()

public fun LLVMGetEnumAttributeKindForName(Name: Pointer<Byte>, SLen: ULong): UInt =
    (`LLVMGetEnumAttributeKindForName$mh`.invokeExact(Name,SLen.toLong(),) as Int).toUInt()

public fun LLVMGetLastEnumAttributeKind(): UInt = (`LLVMGetLastEnumAttributeKind$mh`.invokeExact()
    as Int).toUInt()

public fun LLVMCreateEnumAttribute(
  C: LLVMContextRef,
  KindID: UInt,
  Val: ULong,
): LLVMAttributeRef = `LLVMCreateEnumAttribute$mh`.invokeExact(C,KindID.toInt(),Val.toLong(),) as
    MemorySegment

public fun LLVMGetEnumAttributeKind(A: LLVMAttributeRef): UInt =
    (`LLVMGetEnumAttributeKind$mh`.invokeExact(A,) as Int).toUInt()

public fun LLVMGetEnumAttributeValue(A: LLVMAttributeRef): ULong =
    (`LLVMGetEnumAttributeValue$mh`.invokeExact(A,) as Long).toULong()

public fun LLVMCreateTypeAttribute(
  C: LLVMContextRef,
  KindID: UInt,
  type_ref: LLVMTypeRef,
): LLVMAttributeRef = `LLVMCreateTypeAttribute$mh`.invokeExact(C,KindID.toInt(),type_ref,) as
    MemorySegment

public fun LLVMGetTypeAttributeValue(A: LLVMAttributeRef): LLVMTypeRef =
    `LLVMGetTypeAttributeValue$mh`.invokeExact(A,) as MemorySegment

public fun LLVMCreateStringAttribute(
  C: LLVMContextRef,
  K: Pointer<Byte>,
  KLength: UInt,
  V: Pointer<Byte>,
  VLength: UInt,
): LLVMAttributeRef =
    `LLVMCreateStringAttribute$mh`.invokeExact(C,K,KLength.toInt(),V,VLength.toInt(),) as
    MemorySegment

public fun LLVMGetStringAttributeKind(A: LLVMAttributeRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetStringAttributeKind$mh`.invokeExact(A,Length,) as MemorySegment

public fun LLVMGetStringAttributeValue(A: LLVMAttributeRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetStringAttributeValue$mh`.invokeExact(A,Length,) as MemorySegment

public fun LLVMIsEnumAttribute(A: LLVMAttributeRef): LLVMBool =
    `LLVMIsEnumAttribute$mh`.invokeExact(A,) as Int

public fun LLVMIsStringAttribute(A: LLVMAttributeRef): LLVMBool =
    `LLVMIsStringAttribute$mh`.invokeExact(A,) as Int

public fun LLVMIsTypeAttribute(A: LLVMAttributeRef): LLVMBool =
    `LLVMIsTypeAttribute$mh`.invokeExact(A,) as Int

public fun LLVMGetTypeByName2(C: LLVMContextRef, Name: Pointer<Byte>): LLVMTypeRef =
    `LLVMGetTypeByName2$mh`.invokeExact(C,Name,) as MemorySegment

public fun LLVMModuleCreateWithName(ModuleID: Pointer<Byte>): LLVMModuleRef =
    `LLVMModuleCreateWithName$mh`.invokeExact(ModuleID,) as MemorySegment

public fun LLVMModuleCreateWithNameInContext(ModuleID: Pointer<Byte>, C: LLVMContextRef):
    LLVMModuleRef = `LLVMModuleCreateWithNameInContext$mh`.invokeExact(ModuleID,C,) as MemorySegment

public fun LLVMCloneModule(M: LLVMModuleRef): LLVMModuleRef = `LLVMCloneModule$mh`.invokeExact(M,)
    as MemorySegment

public fun LLVMDisposeModule(M: LLVMModuleRef): Unit = `LLVMDisposeModule$mh`.invokeExact(M,) as
    Unit

public fun LLVMGetModuleIdentifier(M: LLVMModuleRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetModuleIdentifier$mh`.invokeExact(M,Len,) as MemorySegment

public fun LLVMSetModuleIdentifier(
  M: LLVMModuleRef,
  Ident: Pointer<Byte>,
  Len: ULong,
): Unit = `LLVMSetModuleIdentifier$mh`.invokeExact(M,Ident,Len.toLong(),) as Unit

public fun LLVMGetSourceFileName(M: LLVMModuleRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetSourceFileName$mh`.invokeExact(M,Len,) as MemorySegment

public fun LLVMSetSourceFileName(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  Len: ULong,
): Unit = `LLVMSetSourceFileName$mh`.invokeExact(M,Name,Len.toLong(),) as Unit

public fun LLVMGetDataLayoutStr(M: LLVMModuleRef): Pointer<Byte> =
    `LLVMGetDataLayoutStr$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetDataLayout(M: LLVMModuleRef): Pointer<Byte> =
    `LLVMGetDataLayout$mh`.invokeExact(M,) as MemorySegment

public fun LLVMSetDataLayout(M: LLVMModuleRef, DataLayoutStr: Pointer<Byte>): Unit =
    `LLVMSetDataLayout$mh`.invokeExact(M,DataLayoutStr,) as Unit

public fun LLVMGetTarget(M: LLVMModuleRef): Pointer<Byte> = `LLVMGetTarget$mh`.invokeExact(M,) as
    MemorySegment

public fun LLVMSetTarget(M: LLVMModuleRef, Triple: Pointer<Byte>): Unit =
    `LLVMSetTarget$mh`.invokeExact(M,Triple,) as Unit

public fun LLVMCopyModuleFlagsMetadata(M: LLVMModuleRef, Len: Pointer<ULong>):
    Pointer<LLVMModuleFlagEntry> = `LLVMCopyModuleFlagsMetadata$mh`.invokeExact(M,Len,) as
    MemorySegment

public fun LLVMDisposeModuleFlagsMetadata(Entries: Pointer<LLVMModuleFlagEntry>): Unit =
    `LLVMDisposeModuleFlagsMetadata$mh`.invokeExact(Entries,) as Unit

public fun LLVMModuleFlagEntriesGetFlagBehavior(Entries: Pointer<LLVMModuleFlagEntry>, Index: UInt):
    LLVMModuleFlagBehavior =
    LLVMModuleFlagBehavior.fromInt(`LLVMModuleFlagEntriesGetFlagBehavior$mh`.invokeExact(Entries,Index.toInt(),)
    as Int)

public fun LLVMModuleFlagEntriesGetKey(
  Entries: Pointer<LLVMModuleFlagEntry>,
  Index: UInt,
  Len: Pointer<ULong>,
): Pointer<Byte> = `LLVMModuleFlagEntriesGetKey$mh`.invokeExact(Entries,Index.toInt(),Len,) as
    MemorySegment

public fun LLVMModuleFlagEntriesGetMetadata(Entries: Pointer<LLVMModuleFlagEntry>, Index: UInt):
    LLVMMetadataRef = `LLVMModuleFlagEntriesGetMetadata$mh`.invokeExact(Entries,Index.toInt(),) as
    MemorySegment

public fun LLVMGetModuleFlag(
  M: LLVMModuleRef,
  Key: Pointer<Byte>,
  KeyLen: ULong,
): LLVMMetadataRef = `LLVMGetModuleFlag$mh`.invokeExact(M,Key,KeyLen.toLong(),) as MemorySegment

public fun LLVMAddModuleFlag(
  M: LLVMModuleRef,
  Behavior: LLVMModuleFlagBehavior,
  Key: Pointer<Byte>,
  KeyLen: ULong,
  Val: LLVMMetadataRef,
): Unit = `LLVMAddModuleFlag$mh`.invokeExact(M,Behavior.value,Key,KeyLen.toLong(),Val,) as Unit

public fun LLVMDumpModule(M: LLVMModuleRef): Unit = `LLVMDumpModule$mh`.invokeExact(M,) as Unit

public fun LLVMPrintModuleToFile(
  M: LLVMModuleRef,
  Filename: Pointer<Byte>,
  ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMPrintModuleToFile$mh`.invokeExact(M,Filename,ErrorMessage,) as Int

public fun LLVMPrintModuleToString(M: LLVMModuleRef): Pointer<Byte> =
    `LLVMPrintModuleToString$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetModuleInlineAsm(M: LLVMModuleRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetModuleInlineAsm$mh`.invokeExact(M,Len,) as MemorySegment

public fun LLVMSetModuleInlineAsm2(
  M: LLVMModuleRef,
  Asm: Pointer<Byte>,
  Len: ULong,
): Unit = `LLVMSetModuleInlineAsm2$mh`.invokeExact(M,Asm,Len.toLong(),) as Unit

public fun LLVMAppendModuleInlineAsm(
  M: LLVMModuleRef,
  Asm: Pointer<Byte>,
  Len: ULong,
): Unit = `LLVMAppendModuleInlineAsm$mh`.invokeExact(M,Asm,Len.toLong(),) as Unit

public fun LLVMGetInlineAsm(
  Ty: LLVMTypeRef,
  AsmString: Pointer<Byte>,
  AsmStringSize: ULong,
  Constraints: Pointer<Byte>,
  ConstraintsSize: ULong,
  HasSideEffects: LLVMBool,
  IsAlignStack: LLVMBool,
  Dialect: LLVMInlineAsmDialect,
  CanThrow: LLVMBool,
): LLVMValueRef =
    `LLVMGetInlineAsm$mh`.invokeExact(Ty,AsmString,AsmStringSize.toLong(),Constraints,ConstraintsSize.toLong(),HasSideEffects,IsAlignStack,Dialect.value,CanThrow,)
    as MemorySegment

public fun LLVMGetInlineAsmAsmString(InlineAsmVal: LLVMValueRef, Len: Pointer<ULong>): Pointer<Byte>
    = `LLVMGetInlineAsmAsmString$mh`.invokeExact(InlineAsmVal,Len,) as MemorySegment

public fun LLVMGetInlineAsmConstraintString(InlineAsmVal: LLVMValueRef, Len: Pointer<ULong>):
    Pointer<Byte> = `LLVMGetInlineAsmConstraintString$mh`.invokeExact(InlineAsmVal,Len,) as
    MemorySegment

public fun LLVMGetInlineAsmDialect(InlineAsmVal: LLVMValueRef): LLVMInlineAsmDialect =
    LLVMInlineAsmDialect.fromInt(`LLVMGetInlineAsmDialect$mh`.invokeExact(InlineAsmVal,) as Int)

public fun LLVMGetInlineAsmFunctionType(InlineAsmVal: LLVMValueRef): LLVMTypeRef =
    `LLVMGetInlineAsmFunctionType$mh`.invokeExact(InlineAsmVal,) as MemorySegment

public fun LLVMGetInlineAsmHasSideEffects(InlineAsmVal: LLVMValueRef): LLVMBool =
    `LLVMGetInlineAsmHasSideEffects$mh`.invokeExact(InlineAsmVal,) as Int

public fun LLVMGetInlineAsmNeedsAlignedStack(InlineAsmVal: LLVMValueRef): LLVMBool =
    `LLVMGetInlineAsmNeedsAlignedStack$mh`.invokeExact(InlineAsmVal,) as Int

public fun LLVMGetInlineAsmCanUnwind(InlineAsmVal: LLVMValueRef): LLVMBool =
    `LLVMGetInlineAsmCanUnwind$mh`.invokeExact(InlineAsmVal,) as Int

public fun LLVMGetModuleContext(M: LLVMModuleRef): LLVMContextRef =
    `LLVMGetModuleContext$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetTypeByName(M: LLVMModuleRef, Name: Pointer<Byte>): LLVMTypeRef =
    `LLVMGetTypeByName$mh`.invokeExact(M,Name,) as MemorySegment

public fun LLVMGetFirstNamedMetadata(M: LLVMModuleRef): LLVMNamedMDNodeRef =
    `LLVMGetFirstNamedMetadata$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetLastNamedMetadata(M: LLVMModuleRef): LLVMNamedMDNodeRef =
    `LLVMGetLastNamedMetadata$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetNextNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef =
    `LLVMGetNextNamedMetadata$mh`.invokeExact(NamedMDNode,) as MemorySegment

public fun LLVMGetPreviousNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef =
    `LLVMGetPreviousNamedMetadata$mh`.invokeExact(NamedMDNode,) as MemorySegment

public fun LLVMGetNamedMetadata(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
): LLVMNamedMDNodeRef = `LLVMGetNamedMetadata$mh`.invokeExact(M,Name,NameLen.toLong(),) as
    MemorySegment

public fun LLVMGetOrInsertNamedMetadata(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
): LLVMNamedMDNodeRef = `LLVMGetOrInsertNamedMetadata$mh`.invokeExact(M,Name,NameLen.toLong(),) as
    MemorySegment

public fun LLVMGetNamedMetadataName(NamedMD: LLVMNamedMDNodeRef, NameLen: Pointer<ULong>):
    Pointer<Byte> = `LLVMGetNamedMetadataName$mh`.invokeExact(NamedMD,NameLen,) as MemorySegment

public fun LLVMGetNamedMetadataNumOperands(M: LLVMModuleRef, Name: Pointer<Byte>): UInt =
    (`LLVMGetNamedMetadataNumOperands$mh`.invokeExact(M,Name,) as Int).toUInt()

public fun LLVMGetNamedMetadataOperands(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  Dest: Pointer<LLVMValueRef>,
): Unit = `LLVMGetNamedMetadataOperands$mh`.invokeExact(M,Name,Dest,) as Unit

public fun LLVMAddNamedMetadataOperand(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  Val: LLVMValueRef,
): Unit = `LLVMAddNamedMetadataOperand$mh`.invokeExact(M,Name,Val,) as Unit

public fun LLVMGetDebugLocDirectory(Val: LLVMValueRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetDebugLocDirectory$mh`.invokeExact(Val,Length,) as MemorySegment

public fun LLVMGetDebugLocFilename(Val: LLVMValueRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetDebugLocFilename$mh`.invokeExact(Val,Length,) as MemorySegment

public fun LLVMGetDebugLocLine(Val: LLVMValueRef): UInt =
    (`LLVMGetDebugLocLine$mh`.invokeExact(Val,) as Int).toUInt()

public fun LLVMGetDebugLocColumn(Val: LLVMValueRef): UInt =
    (`LLVMGetDebugLocColumn$mh`.invokeExact(Val,) as Int).toUInt()

public fun LLVMAddFunction(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  FunctionTy: LLVMTypeRef,
): LLVMValueRef = `LLVMAddFunction$mh`.invokeExact(M,Name,FunctionTy,) as MemorySegment

public fun LLVMGetNamedFunction(M: LLVMModuleRef, Name: Pointer<Byte>): LLVMValueRef =
    `LLVMGetNamedFunction$mh`.invokeExact(M,Name,) as MemorySegment

public fun LLVMGetFirstFunction(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetFirstFunction$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetLastFunction(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetLastFunction$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetNextFunction(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextFunction$mh`.invokeExact(Fn,) as MemorySegment

public fun LLVMGetPreviousFunction(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousFunction$mh`.invokeExact(Fn,) as MemorySegment

public fun LLVMSetModuleInlineAsm(M: LLVMModuleRef, Asm: Pointer<Byte>): Unit =
    `LLVMSetModuleInlineAsm$mh`.invokeExact(M,Asm,) as Unit

public fun LLVMGetTypeKind(Ty: LLVMTypeRef): LLVMTypeKind =
    LLVMTypeKind.fromInt(`LLVMGetTypeKind$mh`.invokeExact(Ty,) as Int)

public fun LLVMTypeIsSized(Ty: LLVMTypeRef): LLVMBool = `LLVMTypeIsSized$mh`.invokeExact(Ty,) as Int

public fun LLVMGetTypeContext(Ty: LLVMTypeRef): LLVMContextRef =
    `LLVMGetTypeContext$mh`.invokeExact(Ty,) as MemorySegment

public fun LLVMDumpType(Val: LLVMTypeRef): Unit = `LLVMDumpType$mh`.invokeExact(Val,) as Unit

public fun LLVMPrintTypeToString(Val: LLVMTypeRef): Pointer<Byte> =
    `LLVMPrintTypeToString$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMInt1TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt1TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMInt8TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt8TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMInt16TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt16TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMInt32TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt32TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMInt64TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt64TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMInt128TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt128TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMIntTypeInContext(C: LLVMContextRef, NumBits: UInt): LLVMTypeRef =
    `LLVMIntTypeInContext$mh`.invokeExact(C,NumBits.toInt(),) as MemorySegment

public fun LLVMInt1Type(): LLVMTypeRef = `LLVMInt1Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt8Type(): LLVMTypeRef = `LLVMInt8Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt16Type(): LLVMTypeRef = `LLVMInt16Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt32Type(): LLVMTypeRef = `LLVMInt32Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt64Type(): LLVMTypeRef = `LLVMInt64Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt128Type(): LLVMTypeRef = `LLVMInt128Type$mh`.invokeExact() as MemorySegment

public fun LLVMIntType(NumBits: UInt): LLVMTypeRef = `LLVMIntType$mh`.invokeExact(NumBits.toInt(),)
    as MemorySegment

public fun LLVMGetIntTypeWidth(IntegerTy: LLVMTypeRef): UInt =
    (`LLVMGetIntTypeWidth$mh`.invokeExact(IntegerTy,) as Int).toUInt()

public fun LLVMHalfTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMHalfTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMBFloatTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMBFloatTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMFloatTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMFloatTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMDoubleTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMDoubleTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMX86FP80TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMX86FP80TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMFP128TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMFP128TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMPPCFP128TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMPPCFP128TypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMHalfType(): LLVMTypeRef = `LLVMHalfType$mh`.invokeExact() as MemorySegment

public fun LLVMBFloatType(): LLVMTypeRef = `LLVMBFloatType$mh`.invokeExact() as MemorySegment

public fun LLVMFloatType(): LLVMTypeRef = `LLVMFloatType$mh`.invokeExact() as MemorySegment

public fun LLVMDoubleType(): LLVMTypeRef = `LLVMDoubleType$mh`.invokeExact() as MemorySegment

public fun LLVMX86FP80Type(): LLVMTypeRef = `LLVMX86FP80Type$mh`.invokeExact() as MemorySegment

public fun LLVMFP128Type(): LLVMTypeRef = `LLVMFP128Type$mh`.invokeExact() as MemorySegment

public fun LLVMPPCFP128Type(): LLVMTypeRef = `LLVMPPCFP128Type$mh`.invokeExact() as MemorySegment

public fun LLVMFunctionType(
  ReturnType: LLVMTypeRef,
  ParamTypes: Pointer<LLVMTypeRef>,
  ParamCount: UInt,
  IsVarArg: LLVMBool,
): LLVMTypeRef =
    `LLVMFunctionType$mh`.invokeExact(ReturnType,ParamTypes,ParamCount.toInt(),IsVarArg,) as
    MemorySegment

public fun LLVMIsFunctionVarArg(FunctionTy: LLVMTypeRef): LLVMBool =
    `LLVMIsFunctionVarArg$mh`.invokeExact(FunctionTy,) as Int

public fun LLVMGetReturnType(FunctionTy: LLVMTypeRef): LLVMTypeRef =
    `LLVMGetReturnType$mh`.invokeExact(FunctionTy,) as MemorySegment

public fun LLVMCountParamTypes(FunctionTy: LLVMTypeRef): UInt =
    (`LLVMCountParamTypes$mh`.invokeExact(FunctionTy,) as Int).toUInt()

public fun LLVMGetParamTypes(FunctionTy: LLVMTypeRef, Dest: Pointer<LLVMTypeRef>): Unit =
    `LLVMGetParamTypes$mh`.invokeExact(FunctionTy,Dest,) as Unit

public fun LLVMStructTypeInContext(
  C: LLVMContextRef,
  ElementTypes: Pointer<LLVMTypeRef>,
  ElementCount: UInt,
  Packed: LLVMBool,
): LLVMTypeRef =
    `LLVMStructTypeInContext$mh`.invokeExact(C,ElementTypes,ElementCount.toInt(),Packed,) as
    MemorySegment

public fun LLVMStructType(
  ElementTypes: Pointer<LLVMTypeRef>,
  ElementCount: UInt,
  Packed: LLVMBool,
): LLVMTypeRef = `LLVMStructType$mh`.invokeExact(ElementTypes,ElementCount.toInt(),Packed,) as
    MemorySegment

public fun LLVMStructCreateNamed(C: LLVMContextRef, Name: Pointer<Byte>): LLVMTypeRef =
    `LLVMStructCreateNamed$mh`.invokeExact(C,Name,) as MemorySegment

public fun LLVMGetStructName(Ty: LLVMTypeRef): Pointer<Byte> =
    `LLVMGetStructName$mh`.invokeExact(Ty,) as MemorySegment

public fun LLVMStructSetBody(
  StructTy: LLVMTypeRef,
  ElementTypes: Pointer<LLVMTypeRef>,
  ElementCount: UInt,
  Packed: LLVMBool,
): Unit = `LLVMStructSetBody$mh`.invokeExact(StructTy,ElementTypes,ElementCount.toInt(),Packed,) as
    Unit

public fun LLVMCountStructElementTypes(StructTy: LLVMTypeRef): UInt =
    (`LLVMCountStructElementTypes$mh`.invokeExact(StructTy,) as Int).toUInt()

public fun LLVMGetStructElementTypes(StructTy: LLVMTypeRef, Dest: Pointer<LLVMTypeRef>): Unit =
    `LLVMGetStructElementTypes$mh`.invokeExact(StructTy,Dest,) as Unit

public fun LLVMStructGetTypeAtIndex(StructTy: LLVMTypeRef, i: UInt): LLVMTypeRef =
    `LLVMStructGetTypeAtIndex$mh`.invokeExact(StructTy,i.toInt(),) as MemorySegment

public fun LLVMIsPackedStruct(StructTy: LLVMTypeRef): LLVMBool =
    `LLVMIsPackedStruct$mh`.invokeExact(StructTy,) as Int

public fun LLVMIsOpaqueStruct(StructTy: LLVMTypeRef): LLVMBool =
    `LLVMIsOpaqueStruct$mh`.invokeExact(StructTy,) as Int

public fun LLVMIsLiteralStruct(StructTy: LLVMTypeRef): LLVMBool =
    `LLVMIsLiteralStruct$mh`.invokeExact(StructTy,) as Int

public fun LLVMGetElementType(Ty: LLVMTypeRef): LLVMTypeRef =
    `LLVMGetElementType$mh`.invokeExact(Ty,) as MemorySegment

public fun LLVMGetSubtypes(Tp: LLVMTypeRef, Arr: Pointer<LLVMTypeRef>): Unit =
    `LLVMGetSubtypes$mh`.invokeExact(Tp,Arr,) as Unit

public fun LLVMGetNumContainedTypes(Tp: LLVMTypeRef): UInt =
    (`LLVMGetNumContainedTypes$mh`.invokeExact(Tp,) as Int).toUInt()

public fun LLVMArrayType(ElementType: LLVMTypeRef, ElementCount: UInt): LLVMTypeRef =
    `LLVMArrayType$mh`.invokeExact(ElementType,ElementCount.toInt(),) as MemorySegment

public fun LLVMArrayType2(ElementType: LLVMTypeRef, ElementCount: ULong): LLVMTypeRef =
    `LLVMArrayType2$mh`.invokeExact(ElementType,ElementCount.toLong(),) as MemorySegment

public fun LLVMGetArrayLength(ArrayTy: LLVMTypeRef): UInt =
    (`LLVMGetArrayLength$mh`.invokeExact(ArrayTy,) as Int).toUInt()

public fun LLVMGetArrayLength2(ArrayTy: LLVMTypeRef): ULong =
    (`LLVMGetArrayLength2$mh`.invokeExact(ArrayTy,) as Long).toULong()

public fun LLVMPointerType(ElementType: LLVMTypeRef, AddressSpace: UInt): LLVMTypeRef =
    `LLVMPointerType$mh`.invokeExact(ElementType,AddressSpace.toInt(),) as MemorySegment

public fun LLVMPointerTypeIsOpaque(Ty: LLVMTypeRef): LLVMBool =
    `LLVMPointerTypeIsOpaque$mh`.invokeExact(Ty,) as Int

public fun LLVMPointerTypeInContext(C: LLVMContextRef, AddressSpace: UInt): LLVMTypeRef =
    `LLVMPointerTypeInContext$mh`.invokeExact(C,AddressSpace.toInt(),) as MemorySegment

public fun LLVMGetPointerAddressSpace(PointerTy: LLVMTypeRef): UInt =
    (`LLVMGetPointerAddressSpace$mh`.invokeExact(PointerTy,) as Int).toUInt()

public fun LLVMVectorType(ElementType: LLVMTypeRef, ElementCount: UInt): LLVMTypeRef =
    `LLVMVectorType$mh`.invokeExact(ElementType,ElementCount.toInt(),) as MemorySegment

public fun LLVMScalableVectorType(ElementType: LLVMTypeRef, ElementCount: UInt): LLVMTypeRef =
    `LLVMScalableVectorType$mh`.invokeExact(ElementType,ElementCount.toInt(),) as MemorySegment

public fun LLVMGetVectorSize(VectorTy: LLVMTypeRef): UInt =
    (`LLVMGetVectorSize$mh`.invokeExact(VectorTy,) as Int).toUInt()

public fun LLVMVoidTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMVoidTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMLabelTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMLabelTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMX86MMXTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMX86MMXTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMX86AMXTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMX86AMXTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMTokenTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMTokenTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMMetadataTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMMetadataTypeInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMVoidType(): LLVMTypeRef = `LLVMVoidType$mh`.invokeExact() as MemorySegment

public fun LLVMLabelType(): LLVMTypeRef = `LLVMLabelType$mh`.invokeExact() as MemorySegment

public fun LLVMX86MMXType(): LLVMTypeRef = `LLVMX86MMXType$mh`.invokeExact() as MemorySegment

public fun LLVMX86AMXType(): LLVMTypeRef = `LLVMX86AMXType$mh`.invokeExact() as MemorySegment

public fun LLVMTargetExtTypeInContext(
  C: LLVMContextRef,
  Name: Pointer<Byte>,
  TypeParams: Pointer<LLVMTypeRef>,
  TypeParamCount: UInt,
  IntParams: Pointer<UInt>,
  IntParamCount: UInt,
): LLVMTypeRef =
    `LLVMTargetExtTypeInContext$mh`.invokeExact(C,Name,TypeParams,TypeParamCount.toInt(),IntParams,IntParamCount.toInt(),)
    as MemorySegment

public fun LLVMTypeOf(Val: LLVMValueRef): LLVMTypeRef = `LLVMTypeOf$mh`.invokeExact(Val,) as
    MemorySegment

public fun LLVMGetValueKind(Val: LLVMValueRef): LLVMValueKind =
    LLVMValueKind.fromInt(`LLVMGetValueKind$mh`.invokeExact(Val,) as Int)

public fun LLVMGetValueName2(Val: LLVMValueRef, Length: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetValueName2$mh`.invokeExact(Val,Length,) as MemorySegment

public fun LLVMSetValueName2(
  Val: LLVMValueRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
): Unit = `LLVMSetValueName2$mh`.invokeExact(Val,Name,NameLen.toLong(),) as Unit

public fun LLVMDumpValue(Val: LLVMValueRef): Unit = `LLVMDumpValue$mh`.invokeExact(Val,) as Unit

public fun LLVMPrintValueToString(Val: LLVMValueRef): Pointer<Byte> =
    `LLVMPrintValueToString$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMReplaceAllUsesWith(OldVal: LLVMValueRef, NewVal: LLVMValueRef): Unit =
    `LLVMReplaceAllUsesWith$mh`.invokeExact(OldVal,NewVal,) as Unit

public fun LLVMIsConstant(Val: LLVMValueRef): LLVMBool = `LLVMIsConstant$mh`.invokeExact(Val,) as
    Int

public fun LLVMIsUndef(Val: LLVMValueRef): LLVMBool = `LLVMIsUndef$mh`.invokeExact(Val,) as Int

public fun LLVMIsPoison(Val: LLVMValueRef): LLVMBool = `LLVMIsPoison$mh`.invokeExact(Val,) as Int

public fun LLVMIsAArgument(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAArgument$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsABasicBlock(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABasicBlock$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAInlineAsm(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInlineAsm$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAUser(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAUser$mh`.invokeExact(Val,) as
    MemorySegment

public fun LLVMIsAConstant(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAConstant$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsABlockAddress(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABlockAddress$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantAggregateZero(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantAggregateZero$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantArray(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantArray$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantDataSequential(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantDataSequential$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantDataArray(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantDataArray$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantDataVector(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantDataVector$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantExpr(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantExpr$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantFP(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantFP$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantInt(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantInt$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantPointerNull(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantPointerNull$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantStruct(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantStruct$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantTokenNone(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantTokenNone$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAConstantVector(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantVector$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAGlobalValue(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalValue$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAGlobalAlias(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalAlias$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAGlobalObject(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalObject$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFunction(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAFunction$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAGlobalVariable(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalVariable$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAGlobalIFunc(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalIFunc$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAUndefValue(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUndefValue$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAPoisonValue(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAPoisonValue$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAInstruction(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInstruction$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAUnaryOperator(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUnaryOperator$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsABinaryOperator(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABinaryOperator$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACallInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsACallInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAIntrinsicInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAIntrinsicInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsADbgInfoIntrinsic(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgInfoIntrinsic$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsADbgVariableIntrinsic(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgVariableIntrinsic$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsADbgDeclareInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgDeclareInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsADbgLabelInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgLabelInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAMemIntrinsic(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemIntrinsic$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAMemCpyInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemCpyInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAMemMoveInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemMoveInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAMemSetInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemSetInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACmpInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsACmpInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAFCmpInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAFCmpInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAICmpInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAICmpInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAExtractElementInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAExtractElementInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAGetElementPtrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGetElementPtrInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAInsertElementInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInsertElementInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAInsertValueInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInsertValueInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsALandingPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsALandingPadInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAPHINode(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAPHINode$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsASelectInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsASelectInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAShuffleVectorInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAShuffleVectorInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAStoreInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAStoreInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsABranchInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABranchInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAIndirectBrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAIndirectBrInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAInvokeInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInvokeInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAReturnInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAReturnInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsASwitchInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsASwitchInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAUnreachableInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUnreachableInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAResumeInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAResumeInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACleanupReturnInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACleanupReturnInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACatchReturnInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACatchReturnInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACatchSwitchInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACatchSwitchInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACallBrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACallBrInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFuncletPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFuncletPadInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACatchPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACatchPadInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACleanupPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACleanupPadInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAUnaryInstruction(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUnaryInstruction$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAAllocaInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAllocaInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsACastInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsACastInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAAddrSpaceCastInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAddrSpaceCastInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsABitCastInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABitCastInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFPExtInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFPExtInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFPToSIInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFPToSIInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFPToUIInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFPToUIInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFPTruncInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFPTruncInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAIntToPtrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAIntToPtrInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAPtrToIntInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAPtrToIntInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsASExtInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsASExtInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsASIToFPInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsASIToFPInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsATruncInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsATruncInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAUIToFPInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUIToFPInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAZExtInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAZExtInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAExtractValueInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAExtractValueInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsALoadInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsALoadInst$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMIsAVAArgInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAVAArgInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFreezeInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFreezeInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAAtomicCmpXchgInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAtomicCmpXchgInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAAtomicRMWInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAtomicRMWInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAFenceInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFenceInst$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAMDNode(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAMDNode$mh`.invokeExact(Val,) as
    MemorySegment

public fun LLVMIsAValueAsMetadata(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAValueAsMetadata$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMIsAMDString(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAMDString$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMGetValueName(Val: LLVMValueRef): Pointer<Byte> =
    `LLVMGetValueName$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMSetValueName(Val: LLVMValueRef, Name: Pointer<Byte>): Unit =
    `LLVMSetValueName$mh`.invokeExact(Val,Name,) as Unit

public fun LLVMGetFirstUse(Val: LLVMValueRef): LLVMUseRef = `LLVMGetFirstUse$mh`.invokeExact(Val,)
    as MemorySegment

public fun LLVMGetNextUse(U: LLVMUseRef): LLVMUseRef = `LLVMGetNextUse$mh`.invokeExact(U,) as
    MemorySegment

public fun LLVMGetUser(U: LLVMUseRef): LLVMValueRef = `LLVMGetUser$mh`.invokeExact(U,) as
    MemorySegment

public fun LLVMGetUsedValue(U: LLVMUseRef): LLVMValueRef = `LLVMGetUsedValue$mh`.invokeExact(U,) as
    MemorySegment

public fun LLVMGetOperand(Val: LLVMValueRef, Index: UInt): LLVMValueRef =
    `LLVMGetOperand$mh`.invokeExact(Val,Index.toInt(),) as MemorySegment

public fun LLVMGetOperandUse(Val: LLVMValueRef, Index: UInt): LLVMUseRef =
    `LLVMGetOperandUse$mh`.invokeExact(Val,Index.toInt(),) as MemorySegment

public fun LLVMSetOperand(
  User: LLVMValueRef,
  Index: UInt,
  Val: LLVMValueRef,
): Unit = `LLVMSetOperand$mh`.invokeExact(User,Index.toInt(),Val,) as Unit

public fun LLVMGetNumOperands(Val: LLVMValueRef): Int = `LLVMGetNumOperands$mh`.invokeExact(Val,) as
    Int

public fun LLVMConstNull(Ty: LLVMTypeRef): LLVMValueRef = `LLVMConstNull$mh`.invokeExact(Ty,) as
    MemorySegment

public fun LLVMConstAllOnes(Ty: LLVMTypeRef): LLVMValueRef = `LLVMConstAllOnes$mh`.invokeExact(Ty,)
    as MemorySegment

public fun LLVMGetUndef(Ty: LLVMTypeRef): LLVMValueRef = `LLVMGetUndef$mh`.invokeExact(Ty,) as
    MemorySegment

public fun LLVMGetPoison(Ty: LLVMTypeRef): LLVMValueRef = `LLVMGetPoison$mh`.invokeExact(Ty,) as
    MemorySegment

public fun LLVMIsNull(Val: LLVMValueRef): LLVMBool = `LLVMIsNull$mh`.invokeExact(Val,) as Int

public fun LLVMConstPointerNull(Ty: LLVMTypeRef): LLVMValueRef =
    `LLVMConstPointerNull$mh`.invokeExact(Ty,) as MemorySegment

public fun LLVMConstInt(
  IntTy: LLVMTypeRef,
  N: ULong,
  SignExtend: LLVMBool,
): LLVMValueRef = `LLVMConstInt$mh`.invokeExact(IntTy,N.toLong(),SignExtend,) as MemorySegment

public fun LLVMConstIntOfArbitraryPrecision(
  IntTy: LLVMTypeRef,
  NumWords: UInt,
  Words: NativeArray<ULong>,
): LLVMValueRef = `LLVMConstIntOfArbitraryPrecision$mh`.invokeExact(IntTy,NumWords.toInt(),Words,)
    as MemorySegment

public fun LLVMConstIntOfString(
  IntTy: LLVMTypeRef,
  Text: Pointer<Byte>,
  Radix: UByte,
): LLVMValueRef = `LLVMConstIntOfString$mh`.invokeExact(IntTy,Text,Radix.toByte(),) as MemorySegment

public fun LLVMConstIntOfStringAndSize(
  IntTy: LLVMTypeRef,
  Text: Pointer<Byte>,
  SLen: UInt,
  Radix: UByte,
): LLVMValueRef =
    `LLVMConstIntOfStringAndSize$mh`.invokeExact(IntTy,Text,SLen.toInt(),Radix.toByte(),) as
    MemorySegment

public fun LLVMConstReal(RealTy: LLVMTypeRef, N: Double): LLVMValueRef =
    `LLVMConstReal$mh`.invokeExact(RealTy,N,) as MemorySegment

public fun LLVMConstRealOfString(RealTy: LLVMTypeRef, Text: Pointer<Byte>): LLVMValueRef =
    `LLVMConstRealOfString$mh`.invokeExact(RealTy,Text,) as MemorySegment

public fun LLVMConstRealOfStringAndSize(
  RealTy: LLVMTypeRef,
  Text: Pointer<Byte>,
  SLen: UInt,
): LLVMValueRef = `LLVMConstRealOfStringAndSize$mh`.invokeExact(RealTy,Text,SLen.toInt(),) as
    MemorySegment

public fun LLVMConstIntGetZExtValue(ConstantVal: LLVMValueRef): ULong =
    (`LLVMConstIntGetZExtValue$mh`.invokeExact(ConstantVal,) as Long).toULong()

public fun LLVMConstIntGetSExtValue(ConstantVal: LLVMValueRef): Long =
    `LLVMConstIntGetSExtValue$mh`.invokeExact(ConstantVal,) as Long

public fun LLVMConstRealGetDouble(ConstantVal: LLVMValueRef, losesInfo: Pointer<LLVMBool>): Double =
    `LLVMConstRealGetDouble$mh`.invokeExact(ConstantVal,losesInfo,) as Double

public fun LLVMConstStringInContext(
  C: LLVMContextRef,
  Str: Pointer<Byte>,
  Length: UInt,
  DontNullTerminate: LLVMBool,
): LLVMValueRef = `LLVMConstStringInContext$mh`.invokeExact(C,Str,Length.toInt(),DontNullTerminate,)
    as MemorySegment

public fun LLVMConstString(
  Str: Pointer<Byte>,
  Length: UInt,
  DontNullTerminate: LLVMBool,
): LLVMValueRef = `LLVMConstString$mh`.invokeExact(Str,Length.toInt(),DontNullTerminate,) as
    MemorySegment

public fun LLVMIsConstantString(c: LLVMValueRef): LLVMBool =
    `LLVMIsConstantString$mh`.invokeExact(c,) as Int

public fun LLVMGetAsString(c: LLVMValueRef, Length: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetAsString$mh`.invokeExact(c,Length,) as MemorySegment

public fun LLVMConstStructInContext(
  C: LLVMContextRef,
  ConstantVals: Pointer<LLVMValueRef>,
  Count: UInt,
  Packed: LLVMBool,
): LLVMValueRef = `LLVMConstStructInContext$mh`.invokeExact(C,ConstantVals,Count.toInt(),Packed,) as
    MemorySegment

public fun LLVMConstStruct(
  ConstantVals: Pointer<LLVMValueRef>,
  Count: UInt,
  Packed: LLVMBool,
): LLVMValueRef = `LLVMConstStruct$mh`.invokeExact(ConstantVals,Count.toInt(),Packed,) as
    MemorySegment

public fun LLVMConstArray(
  ElementTy: LLVMTypeRef,
  ConstantVals: Pointer<LLVMValueRef>,
  Length: UInt,
): LLVMValueRef = `LLVMConstArray$mh`.invokeExact(ElementTy,ConstantVals,Length.toInt(),) as
    MemorySegment

public fun LLVMConstArray2(
  ElementTy: LLVMTypeRef,
  ConstantVals: Pointer<LLVMValueRef>,
  Length: ULong,
): LLVMValueRef = `LLVMConstArray2$mh`.invokeExact(ElementTy,ConstantVals,Length.toLong(),) as
    MemorySegment

public fun LLVMConstNamedStruct(
  StructTy: LLVMTypeRef,
  ConstantVals: Pointer<LLVMValueRef>,
  Count: UInt,
): LLVMValueRef = `LLVMConstNamedStruct$mh`.invokeExact(StructTy,ConstantVals,Count.toInt(),) as
    MemorySegment

public fun LLVMGetAggregateElement(C: LLVMValueRef, Idx: UInt): LLVMValueRef =
    `LLVMGetAggregateElement$mh`.invokeExact(C,Idx.toInt(),) as MemorySegment

public fun LLVMGetElementAsConstant(C: LLVMValueRef, idx: UInt): LLVMValueRef =
    `LLVMGetElementAsConstant$mh`.invokeExact(C,idx.toInt(),) as MemorySegment

public fun LLVMConstVector(ScalarConstantVals: Pointer<LLVMValueRef>, Size: UInt): LLVMValueRef =
    `LLVMConstVector$mh`.invokeExact(ScalarConstantVals,Size.toInt(),) as MemorySegment

public fun LLVMGetConstOpcode(ConstantVal: LLVMValueRef): LLVMOpcode =
    LLVMOpcode.fromInt(`LLVMGetConstOpcode$mh`.invokeExact(ConstantVal,) as Int)

public fun LLVMAlignOf(Ty: LLVMTypeRef): LLVMValueRef = `LLVMAlignOf$mh`.invokeExact(Ty,) as
    MemorySegment

public fun LLVMSizeOf(Ty: LLVMTypeRef): LLVMValueRef = `LLVMSizeOf$mh`.invokeExact(Ty,) as
    MemorySegment

public fun LLVMConstNeg(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNeg$mh`.invokeExact(ConstantVal,) as MemorySegment

public fun LLVMConstNSWNeg(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWNeg$mh`.invokeExact(ConstantVal,) as MemorySegment

public fun LLVMConstNUWNeg(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWNeg$mh`.invokeExact(ConstantVal,) as MemorySegment

public fun LLVMConstNot(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNot$mh`.invokeExact(ConstantVal,) as MemorySegment

public fun LLVMConstAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstAdd$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstNSWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWAdd$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstNUWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWAdd$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstSub$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstNSWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWSub$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstNUWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWSub$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstMul$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstNSWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWMul$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstNUWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWMul$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstXor(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstXor$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstICmp(
  Predicate: LLVMIntPredicate,
  LHSConstant: LLVMValueRef,
  RHSConstant: LLVMValueRef,
): LLVMValueRef = `LLVMConstICmp$mh`.invokeExact(Predicate.value,LHSConstant,RHSConstant,) as
    MemorySegment

public fun LLVMConstFCmp(
  Predicate: LLVMRealPredicate,
  LHSConstant: LLVMValueRef,
  RHSConstant: LLVMValueRef,
): LLVMValueRef = `LLVMConstFCmp$mh`.invokeExact(Predicate.value,LHSConstant,RHSConstant,) as
    MemorySegment

public fun LLVMConstShl(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstShl$mh`.invokeExact(LHSConstant,RHSConstant,) as MemorySegment

public fun LLVMConstGEP2(
  Ty: LLVMTypeRef,
  ConstantVal: LLVMValueRef,
  ConstantIndices: Pointer<LLVMValueRef>,
  NumIndices: UInt,
): LLVMValueRef = `LLVMConstGEP2$mh`.invokeExact(Ty,ConstantVal,ConstantIndices,NumIndices.toInt(),)
    as MemorySegment

public fun LLVMConstInBoundsGEP2(
  Ty: LLVMTypeRef,
  ConstantVal: LLVMValueRef,
  ConstantIndices: Pointer<LLVMValueRef>,
  NumIndices: UInt,
): LLVMValueRef =
    `LLVMConstInBoundsGEP2$mh`.invokeExact(Ty,ConstantVal,ConstantIndices,NumIndices.toInt(),) as
    MemorySegment

public fun LLVMConstTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstTrunc$mh`.invokeExact(ConstantVal,ToType,) as MemorySegment

public fun LLVMConstPtrToInt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstPtrToInt$mh`.invokeExact(ConstantVal,ToType,) as MemorySegment

public fun LLVMConstIntToPtr(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstIntToPtr$mh`.invokeExact(ConstantVal,ToType,) as MemorySegment

public fun LLVMConstBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstBitCast$mh`.invokeExact(ConstantVal,ToType,) as MemorySegment

public fun LLVMConstAddrSpaceCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstAddrSpaceCast$mh`.invokeExact(ConstantVal,ToType,) as MemorySegment

public fun LLVMConstTruncOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstTruncOrBitCast$mh`.invokeExact(ConstantVal,ToType,) as MemorySegment

public fun LLVMConstPointerCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstPointerCast$mh`.invokeExact(ConstantVal,ToType,) as MemorySegment

public fun LLVMConstExtractElement(VectorConstant: LLVMValueRef, IndexConstant: LLVMValueRef):
    LLVMValueRef = `LLVMConstExtractElement$mh`.invokeExact(VectorConstant,IndexConstant,) as
    MemorySegment

public fun LLVMConstInsertElement(
  VectorConstant: LLVMValueRef,
  ElementValueConstant: LLVMValueRef,
  IndexConstant: LLVMValueRef,
): LLVMValueRef =
    `LLVMConstInsertElement$mh`.invokeExact(VectorConstant,ElementValueConstant,IndexConstant,) as
    MemorySegment

public fun LLVMConstShuffleVector(
  VectorAConstant: LLVMValueRef,
  VectorBConstant: LLVMValueRef,
  MaskConstant: LLVMValueRef,
): LLVMValueRef =
    `LLVMConstShuffleVector$mh`.invokeExact(VectorAConstant,VectorBConstant,MaskConstant,) as
    MemorySegment

public fun LLVMBlockAddress(F: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMBlockAddress$mh`.invokeExact(F,BB,) as MemorySegment

public fun LLVMConstInlineAsm(
  Ty: LLVMTypeRef,
  AsmString: Pointer<Byte>,
  Constraints: Pointer<Byte>,
  HasSideEffects: LLVMBool,
  IsAlignStack: LLVMBool,
): LLVMValueRef =
    `LLVMConstInlineAsm$mh`.invokeExact(Ty,AsmString,Constraints,HasSideEffects,IsAlignStack,) as
    MemorySegment

public fun LLVMGetGlobalParent(Global: LLVMValueRef): LLVMModuleRef =
    `LLVMGetGlobalParent$mh`.invokeExact(Global,) as MemorySegment

public fun LLVMIsDeclaration(Global: LLVMValueRef): LLVMBool =
    `LLVMIsDeclaration$mh`.invokeExact(Global,) as Int

public fun LLVMGetLinkage(Global: LLVMValueRef): LLVMLinkage =
    LLVMLinkage.fromInt(`LLVMGetLinkage$mh`.invokeExact(Global,) as Int)

public fun LLVMSetLinkage(Global: LLVMValueRef, Linkage: LLVMLinkage): Unit =
    `LLVMSetLinkage$mh`.invokeExact(Global,Linkage.value,) as Unit

public fun LLVMGetSection(Global: LLVMValueRef): Pointer<Byte> =
    `LLVMGetSection$mh`.invokeExact(Global,) as MemorySegment

public fun LLVMSetSection(Global: LLVMValueRef, Section: Pointer<Byte>): Unit =
    `LLVMSetSection$mh`.invokeExact(Global,Section,) as Unit

public fun LLVMGetVisibility(Global: LLVMValueRef): LLVMVisibility =
    LLVMVisibility.fromInt(`LLVMGetVisibility$mh`.invokeExact(Global,) as Int)

public fun LLVMSetVisibility(Global: LLVMValueRef, Viz: LLVMVisibility): Unit =
    `LLVMSetVisibility$mh`.invokeExact(Global,Viz.value,) as Unit

public fun LLVMGetDLLStorageClass(Global: LLVMValueRef): LLVMDLLStorageClass =
    LLVMDLLStorageClass.fromInt(`LLVMGetDLLStorageClass$mh`.invokeExact(Global,) as Int)

public fun LLVMSetDLLStorageClass(Global: LLVMValueRef, Class: LLVMDLLStorageClass): Unit =
    `LLVMSetDLLStorageClass$mh`.invokeExact(Global,Class.value,) as Unit

public fun LLVMGetUnnamedAddress(Global: LLVMValueRef): LLVMUnnamedAddr =
    LLVMUnnamedAddr.fromInt(`LLVMGetUnnamedAddress$mh`.invokeExact(Global,) as Int)

public fun LLVMSetUnnamedAddress(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr): Unit =
    `LLVMSetUnnamedAddress$mh`.invokeExact(Global,UnnamedAddr.value,) as Unit

public fun LLVMGlobalGetValueType(Global: LLVMValueRef): LLVMTypeRef =
    `LLVMGlobalGetValueType$mh`.invokeExact(Global,) as MemorySegment

public fun LLVMHasUnnamedAddr(Global: LLVMValueRef): LLVMBool =
    `LLVMHasUnnamedAddr$mh`.invokeExact(Global,) as Int

public fun LLVMSetUnnamedAddr(Global: LLVMValueRef, HasUnnamedAddr: LLVMBool): Unit =
    `LLVMSetUnnamedAddr$mh`.invokeExact(Global,HasUnnamedAddr,) as Unit

public fun LLVMGetAlignment(V: LLVMValueRef): UInt = (`LLVMGetAlignment$mh`.invokeExact(V,) as
    Int).toUInt()

public fun LLVMSetAlignment(V: LLVMValueRef, Bytes: UInt): Unit =
    `LLVMSetAlignment$mh`.invokeExact(V,Bytes.toInt(),) as Unit

public fun LLVMGlobalSetMetadata(
  Global: LLVMValueRef,
  Kind: UInt,
  MD: LLVMMetadataRef,
): Unit = `LLVMGlobalSetMetadata$mh`.invokeExact(Global,Kind.toInt(),MD,) as Unit

public fun LLVMGlobalEraseMetadata(Global: LLVMValueRef, Kind: UInt): Unit =
    `LLVMGlobalEraseMetadata$mh`.invokeExact(Global,Kind.toInt(),) as Unit

public fun LLVMGlobalClearMetadata(Global: LLVMValueRef): Unit =
    `LLVMGlobalClearMetadata$mh`.invokeExact(Global,) as Unit

public fun LLVMGlobalCopyAllMetadata(Value: LLVMValueRef, NumEntries: Pointer<ULong>):
    Pointer<LLVMValueMetadataEntry> = `LLVMGlobalCopyAllMetadata$mh`.invokeExact(Value,NumEntries,)
    as MemorySegment

public fun LLVMDisposeValueMetadataEntries(Entries: Pointer<LLVMValueMetadataEntry>): Unit =
    `LLVMDisposeValueMetadataEntries$mh`.invokeExact(Entries,) as Unit

public fun LLVMValueMetadataEntriesGetKind(Entries: Pointer<LLVMValueMetadataEntry>, Index: UInt):
    UInt = (`LLVMValueMetadataEntriesGetKind$mh`.invokeExact(Entries,Index.toInt(),) as
    Int).toUInt()

public fun LLVMValueMetadataEntriesGetMetadata(Entries: Pointer<LLVMValueMetadataEntry>,
    Index: UInt): LLVMMetadataRef =
    `LLVMValueMetadataEntriesGetMetadata$mh`.invokeExact(Entries,Index.toInt(),) as MemorySegment

public fun LLVMAddGlobal(
  M: LLVMModuleRef,
  Ty: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMAddGlobal$mh`.invokeExact(M,Ty,Name,) as MemorySegment

public fun LLVMAddGlobalInAddressSpace(
  M: LLVMModuleRef,
  Ty: LLVMTypeRef,
  Name: Pointer<Byte>,
  AddressSpace: UInt,
): LLVMValueRef = `LLVMAddGlobalInAddressSpace$mh`.invokeExact(M,Ty,Name,AddressSpace.toInt(),) as
    MemorySegment

public fun LLVMGetNamedGlobal(M: LLVMModuleRef, Name: Pointer<Byte>): LLVMValueRef =
    `LLVMGetNamedGlobal$mh`.invokeExact(M,Name,) as MemorySegment

public fun LLVMGetFirstGlobal(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetFirstGlobal$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetLastGlobal(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetLastGlobal$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetNextGlobal(GlobalVar: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextGlobal$mh`.invokeExact(GlobalVar,) as MemorySegment

public fun LLVMGetPreviousGlobal(GlobalVar: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousGlobal$mh`.invokeExact(GlobalVar,) as MemorySegment

public fun LLVMDeleteGlobal(GlobalVar: LLVMValueRef): Unit =
    `LLVMDeleteGlobal$mh`.invokeExact(GlobalVar,) as Unit

public fun LLVMGetInitializer(GlobalVar: LLVMValueRef): LLVMValueRef =
    `LLVMGetInitializer$mh`.invokeExact(GlobalVar,) as MemorySegment

public fun LLVMSetInitializer(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef): Unit =
    `LLVMSetInitializer$mh`.invokeExact(GlobalVar,ConstantVal,) as Unit

public fun LLVMIsThreadLocal(GlobalVar: LLVMValueRef): LLVMBool =
    `LLVMIsThreadLocal$mh`.invokeExact(GlobalVar,) as Int

public fun LLVMSetThreadLocal(GlobalVar: LLVMValueRef, IsThreadLocal: LLVMBool): Unit =
    `LLVMSetThreadLocal$mh`.invokeExact(GlobalVar,IsThreadLocal,) as Unit

public fun LLVMIsGlobalConstant(GlobalVar: LLVMValueRef): LLVMBool =
    `LLVMIsGlobalConstant$mh`.invokeExact(GlobalVar,) as Int

public fun LLVMSetGlobalConstant(GlobalVar: LLVMValueRef, IsConstant: LLVMBool): Unit =
    `LLVMSetGlobalConstant$mh`.invokeExact(GlobalVar,IsConstant,) as Unit

public fun LLVMGetThreadLocalMode(GlobalVar: LLVMValueRef): LLVMThreadLocalMode =
    LLVMThreadLocalMode.fromInt(`LLVMGetThreadLocalMode$mh`.invokeExact(GlobalVar,) as Int)

public fun LLVMSetThreadLocalMode(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode): Unit =
    `LLVMSetThreadLocalMode$mh`.invokeExact(GlobalVar,Mode.value,) as Unit

public fun LLVMIsExternallyInitialized(GlobalVar: LLVMValueRef): LLVMBool =
    `LLVMIsExternallyInitialized$mh`.invokeExact(GlobalVar,) as Int

public fun LLVMSetExternallyInitialized(GlobalVar: LLVMValueRef, IsExtInit: LLVMBool): Unit =
    `LLVMSetExternallyInitialized$mh`.invokeExact(GlobalVar,IsExtInit,) as Unit

public fun LLVMAddAlias2(
  M: LLVMModuleRef,
  ValueTy: LLVMTypeRef,
  AddrSpace: UInt,
  Aliasee: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMAddAlias2$mh`.invokeExact(M,ValueTy,AddrSpace.toInt(),Aliasee,Name,) as
    MemorySegment

public fun LLVMGetNamedGlobalAlias(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
): LLVMValueRef = `LLVMGetNamedGlobalAlias$mh`.invokeExact(M,Name,NameLen.toLong(),) as
    MemorySegment

public fun LLVMGetFirstGlobalAlias(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetFirstGlobalAlias$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetLastGlobalAlias(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetLastGlobalAlias$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetNextGlobalAlias(GA: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextGlobalAlias$mh`.invokeExact(GA,) as MemorySegment

public fun LLVMGetPreviousGlobalAlias(GA: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousGlobalAlias$mh`.invokeExact(GA,) as MemorySegment

public fun LLVMAliasGetAliasee(Alias: LLVMValueRef): LLVMValueRef =
    `LLVMAliasGetAliasee$mh`.invokeExact(Alias,) as MemorySegment

public fun LLVMAliasSetAliasee(Alias: LLVMValueRef, Aliasee: LLVMValueRef): Unit =
    `LLVMAliasSetAliasee$mh`.invokeExact(Alias,Aliasee,) as Unit

public fun LLVMDeleteFunction(Fn: LLVMValueRef): Unit = `LLVMDeleteFunction$mh`.invokeExact(Fn,) as
    Unit

public fun LLVMHasPersonalityFn(Fn: LLVMValueRef): LLVMBool =
    `LLVMHasPersonalityFn$mh`.invokeExact(Fn,) as Int

public fun LLVMGetPersonalityFn(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetPersonalityFn$mh`.invokeExact(Fn,) as MemorySegment

public fun LLVMSetPersonalityFn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef): Unit =
    `LLVMSetPersonalityFn$mh`.invokeExact(Fn,PersonalityFn,) as Unit

public fun LLVMLookupIntrinsicID(Name: Pointer<Byte>, NameLen: ULong): UInt =
    (`LLVMLookupIntrinsicID$mh`.invokeExact(Name,NameLen.toLong(),) as Int).toUInt()

public fun LLVMGetIntrinsicID(Fn: LLVMValueRef): UInt = (`LLVMGetIntrinsicID$mh`.invokeExact(Fn,) as
    Int).toUInt()

public fun LLVMGetIntrinsicDeclaration(
  Mod: LLVMModuleRef,
  ID: UInt,
  ParamTypes: Pointer<LLVMTypeRef>,
  ParamCount: ULong,
): LLVMValueRef =
    `LLVMGetIntrinsicDeclaration$mh`.invokeExact(Mod,ID.toInt(),ParamTypes,ParamCount.toLong(),) as
    MemorySegment

public fun LLVMIntrinsicGetType(
  Ctx: LLVMContextRef,
  ID: UInt,
  ParamTypes: Pointer<LLVMTypeRef>,
  ParamCount: ULong,
): LLVMTypeRef =
    `LLVMIntrinsicGetType$mh`.invokeExact(Ctx,ID.toInt(),ParamTypes,ParamCount.toLong(),) as
    MemorySegment

public fun LLVMIntrinsicGetName(ID: UInt, NameLength: Pointer<ULong>): Pointer<Byte> =
    `LLVMIntrinsicGetName$mh`.invokeExact(ID.toInt(),NameLength,) as MemorySegment

public fun LLVMIntrinsicCopyOverloadedName(
  ID: UInt,
  ParamTypes: Pointer<LLVMTypeRef>,
  ParamCount: ULong,
  NameLength: Pointer<ULong>,
): Pointer<Byte> =
    `LLVMIntrinsicCopyOverloadedName$mh`.invokeExact(ID.toInt(),ParamTypes,ParamCount.toLong(),NameLength,)
    as MemorySegment

public fun LLVMIntrinsicCopyOverloadedName2(
  Mod: LLVMModuleRef,
  ID: UInt,
  ParamTypes: Pointer<LLVMTypeRef>,
  ParamCount: ULong,
  NameLength: Pointer<ULong>,
): Pointer<Byte> =
    `LLVMIntrinsicCopyOverloadedName2$mh`.invokeExact(Mod,ID.toInt(),ParamTypes,ParamCount.toLong(),NameLength,)
    as MemorySegment

public fun LLVMIntrinsicIsOverloaded(ID: UInt): LLVMBool =
    `LLVMIntrinsicIsOverloaded$mh`.invokeExact(ID.toInt(),) as Int

public fun LLVMGetFunctionCallConv(Fn: LLVMValueRef): UInt =
    (`LLVMGetFunctionCallConv$mh`.invokeExact(Fn,) as Int).toUInt()

public fun LLVMSetFunctionCallConv(Fn: LLVMValueRef, CC: UInt): Unit =
    `LLVMSetFunctionCallConv$mh`.invokeExact(Fn,CC.toInt(),) as Unit

public fun LLVMGetGC(Fn: LLVMValueRef): Pointer<Byte> = `LLVMGetGC$mh`.invokeExact(Fn,) as
    MemorySegment

public fun LLVMSetGC(Fn: LLVMValueRef, Name: Pointer<Byte>): Unit =
    `LLVMSetGC$mh`.invokeExact(Fn,Name,) as Unit

public fun LLVMAddAttributeAtIndex(
  F: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  A: LLVMAttributeRef,
): Unit = `LLVMAddAttributeAtIndex$mh`.invokeExact(F,Idx.toInt(),A,) as Unit

public fun LLVMGetAttributeCountAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex): UInt =
    (`LLVMGetAttributeCountAtIndex$mh`.invokeExact(F,Idx.toInt(),) as Int).toUInt()

public fun LLVMGetAttributesAtIndex(
  F: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  Attrs: Pointer<LLVMAttributeRef>,
): Unit = `LLVMGetAttributesAtIndex$mh`.invokeExact(F,Idx.toInt(),Attrs,) as Unit

public fun LLVMGetEnumAttributeAtIndex(
  F: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  KindID: UInt,
): LLVMAttributeRef = `LLVMGetEnumAttributeAtIndex$mh`.invokeExact(F,Idx.toInt(),KindID.toInt(),) as
    MemorySegment

public fun LLVMGetStringAttributeAtIndex(
  F: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  K: Pointer<Byte>,
  KLen: UInt,
): LLVMAttributeRef = `LLVMGetStringAttributeAtIndex$mh`.invokeExact(F,Idx.toInt(),K,KLen.toInt(),)
    as MemorySegment

public fun LLVMRemoveEnumAttributeAtIndex(
  F: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  KindID: UInt,
): Unit = `LLVMRemoveEnumAttributeAtIndex$mh`.invokeExact(F,Idx.toInt(),KindID.toInt(),) as Unit

public fun LLVMRemoveStringAttributeAtIndex(
  F: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  K: Pointer<Byte>,
  KLen: UInt,
): Unit = `LLVMRemoveStringAttributeAtIndex$mh`.invokeExact(F,Idx.toInt(),K,KLen.toInt(),) as Unit

public fun LLVMAddTargetDependentFunctionAttr(
  Fn: LLVMValueRef,
  A: Pointer<Byte>,
  V: Pointer<Byte>,
): Unit = `LLVMAddTargetDependentFunctionAttr$mh`.invokeExact(Fn,A,V,) as Unit

public fun LLVMCountParams(Fn: LLVMValueRef): UInt = (`LLVMCountParams$mh`.invokeExact(Fn,) as
    Int).toUInt()

public fun LLVMGetParams(Fn: LLVMValueRef, Params: Pointer<LLVMValueRef>): Unit =
    `LLVMGetParams$mh`.invokeExact(Fn,Params,) as Unit

public fun LLVMGetParam(Fn: LLVMValueRef, Index: UInt): LLVMValueRef =
    `LLVMGetParam$mh`.invokeExact(Fn,Index.toInt(),) as MemorySegment

public fun LLVMGetParamParent(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMGetParamParent$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMGetFirstParam(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetFirstParam$mh`.invokeExact(Fn,) as MemorySegment

public fun LLVMGetLastParam(Fn: LLVMValueRef): LLVMValueRef = `LLVMGetLastParam$mh`.invokeExact(Fn,)
    as MemorySegment

public fun LLVMGetNextParam(Arg: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextParam$mh`.invokeExact(Arg,) as MemorySegment

public fun LLVMGetPreviousParam(Arg: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousParam$mh`.invokeExact(Arg,) as MemorySegment

public fun LLVMSetParamAlignment(Arg: LLVMValueRef, Align: UInt): Unit =
    `LLVMSetParamAlignment$mh`.invokeExact(Arg,Align.toInt(),) as Unit

public fun LLVMAddGlobalIFunc(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
  Ty: LLVMTypeRef,
  AddrSpace: UInt,
  Resolver: LLVMValueRef,
): LLVMValueRef =
    `LLVMAddGlobalIFunc$mh`.invokeExact(M,Name,NameLen.toLong(),Ty,AddrSpace.toInt(),Resolver,) as
    MemorySegment

public fun LLVMGetNamedGlobalIFunc(
  M: LLVMModuleRef,
  Name: Pointer<Byte>,
  NameLen: ULong,
): LLVMValueRef = `LLVMGetNamedGlobalIFunc$mh`.invokeExact(M,Name,NameLen.toLong(),) as
    MemorySegment

public fun LLVMGetFirstGlobalIFunc(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetFirstGlobalIFunc$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetLastGlobalIFunc(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetLastGlobalIFunc$mh`.invokeExact(M,) as MemorySegment

public fun LLVMGetNextGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextGlobalIFunc$mh`.invokeExact(IFunc,) as MemorySegment

public fun LLVMGetPreviousGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousGlobalIFunc$mh`.invokeExact(IFunc,) as MemorySegment

public fun LLVMGetGlobalIFuncResolver(IFunc: LLVMValueRef): LLVMValueRef =
    `LLVMGetGlobalIFuncResolver$mh`.invokeExact(IFunc,) as MemorySegment

public fun LLVMSetGlobalIFuncResolver(IFunc: LLVMValueRef, Resolver: LLVMValueRef): Unit =
    `LLVMSetGlobalIFuncResolver$mh`.invokeExact(IFunc,Resolver,) as Unit

public fun LLVMEraseGlobalIFunc(IFunc: LLVMValueRef): Unit =
    `LLVMEraseGlobalIFunc$mh`.invokeExact(IFunc,) as Unit

public fun LLVMRemoveGlobalIFunc(IFunc: LLVMValueRef): Unit =
    `LLVMRemoveGlobalIFunc$mh`.invokeExact(IFunc,) as Unit

public fun LLVMMDStringInContext2(
  C: LLVMContextRef,
  Str: Pointer<Byte>,
  SLen: ULong,
): LLVMMetadataRef = `LLVMMDStringInContext2$mh`.invokeExact(C,Str,SLen.toLong(),) as MemorySegment

public fun LLVMMDNodeInContext2(
  C: LLVMContextRef,
  MDs: Pointer<LLVMMetadataRef>,
  Count: ULong,
): LLVMMetadataRef = `LLVMMDNodeInContext2$mh`.invokeExact(C,MDs,Count.toLong(),) as MemorySegment

public fun LLVMMetadataAsValue(C: LLVMContextRef, MD: LLVMMetadataRef): LLVMValueRef =
    `LLVMMetadataAsValue$mh`.invokeExact(C,MD,) as MemorySegment

public fun LLVMValueAsMetadata(Val: LLVMValueRef): LLVMMetadataRef =
    `LLVMValueAsMetadata$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMGetMDString(V: LLVMValueRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetMDString$mh`.invokeExact(V,Length,) as MemorySegment

public fun LLVMGetMDNodeNumOperands(V: LLVMValueRef): UInt =
    (`LLVMGetMDNodeNumOperands$mh`.invokeExact(V,) as Int).toUInt()

public fun LLVMGetMDNodeOperands(V: LLVMValueRef, Dest: Pointer<LLVMValueRef>): Unit =
    `LLVMGetMDNodeOperands$mh`.invokeExact(V,Dest,) as Unit

public fun LLVMReplaceMDNodeOperandWith(
  V: LLVMValueRef,
  Index: UInt,
  Replacement: LLVMMetadataRef,
): Unit = `LLVMReplaceMDNodeOperandWith$mh`.invokeExact(V,Index.toInt(),Replacement,) as Unit

public fun LLVMMDStringInContext(
  C: LLVMContextRef,
  Str: Pointer<Byte>,
  SLen: UInt,
): LLVMValueRef = `LLVMMDStringInContext$mh`.invokeExact(C,Str,SLen.toInt(),) as MemorySegment

public fun LLVMMDString(Str: Pointer<Byte>, SLen: UInt): LLVMValueRef =
    `LLVMMDString$mh`.invokeExact(Str,SLen.toInt(),) as MemorySegment

public fun LLVMMDNodeInContext(
  C: LLVMContextRef,
  Vals: Pointer<LLVMValueRef>,
  Count: UInt,
): LLVMValueRef = `LLVMMDNodeInContext$mh`.invokeExact(C,Vals,Count.toInt(),) as MemorySegment

public fun LLVMMDNode(Vals: Pointer<LLVMValueRef>, Count: UInt): LLVMValueRef =
    `LLVMMDNode$mh`.invokeExact(Vals,Count.toInt(),) as MemorySegment

public fun LLVMCreateOperandBundle(
  Tag: Pointer<Byte>,
  TagLen: ULong,
  Args: Pointer<LLVMValueRef>,
  NumArgs: UInt,
): LLVMOperandBundleRef =
    `LLVMCreateOperandBundle$mh`.invokeExact(Tag,TagLen.toLong(),Args,NumArgs.toInt(),) as
    MemorySegment

public fun LLVMDisposeOperandBundle(Bundle: LLVMOperandBundleRef): Unit =
    `LLVMDisposeOperandBundle$mh`.invokeExact(Bundle,) as Unit

public fun LLVMGetOperandBundleTag(Bundle: LLVMOperandBundleRef, Len: Pointer<ULong>): Pointer<Byte>
    = `LLVMGetOperandBundleTag$mh`.invokeExact(Bundle,Len,) as MemorySegment

public fun LLVMGetNumOperandBundleArgs(Bundle: LLVMOperandBundleRef): UInt =
    (`LLVMGetNumOperandBundleArgs$mh`.invokeExact(Bundle,) as Int).toUInt()

public fun LLVMGetOperandBundleArgAtIndex(Bundle: LLVMOperandBundleRef, Index: UInt): LLVMValueRef =
    `LLVMGetOperandBundleArgAtIndex$mh`.invokeExact(Bundle,Index.toInt(),) as MemorySegment

public fun LLVMBasicBlockAsValue(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMBasicBlockAsValue$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMValueIsBasicBlock(Val: LLVMValueRef): LLVMBool =
    `LLVMValueIsBasicBlock$mh`.invokeExact(Val,) as Int

public fun LLVMValueAsBasicBlock(Val: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMValueAsBasicBlock$mh`.invokeExact(Val,) as MemorySegment

public fun LLVMGetBasicBlockName(BB: LLVMBasicBlockRef): Pointer<Byte> =
    `LLVMGetBasicBlockName$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMGetBasicBlockParent(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetBasicBlockParent$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMGetBasicBlockTerminator(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetBasicBlockTerminator$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMCountBasicBlocks(Fn: LLVMValueRef): UInt =
    (`LLVMCountBasicBlocks$mh`.invokeExact(Fn,) as Int).toUInt()

public fun LLVMGetBasicBlocks(Fn: LLVMValueRef, BasicBlocks: Pointer<LLVMBasicBlockRef>): Unit =
    `LLVMGetBasicBlocks$mh`.invokeExact(Fn,BasicBlocks,) as Unit

public fun LLVMGetFirstBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetFirstBasicBlock$mh`.invokeExact(Fn,) as MemorySegment

public fun LLVMGetLastBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetLastBasicBlock$mh`.invokeExact(Fn,) as MemorySegment

public fun LLVMGetNextBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef =
    `LLVMGetNextBasicBlock$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMGetPreviousBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef =
    `LLVMGetPreviousBasicBlock$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMGetEntryBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetEntryBasicBlock$mh`.invokeExact(Fn,) as MemorySegment

public fun LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: LLVMBuilderRef,
    BB: LLVMBasicBlockRef): Unit =
    `LLVMInsertExistingBasicBlockAfterInsertBlock$mh`.invokeExact(Builder,BB,) as Unit

public fun LLVMAppendExistingBasicBlock(Fn: LLVMValueRef, BB: LLVMBasicBlockRef): Unit =
    `LLVMAppendExistingBasicBlock$mh`.invokeExact(Fn,BB,) as Unit

public fun LLVMCreateBasicBlockInContext(C: LLVMContextRef, Name: Pointer<Byte>): LLVMBasicBlockRef
    = `LLVMCreateBasicBlockInContext$mh`.invokeExact(C,Name,) as MemorySegment

public fun LLVMAppendBasicBlockInContext(
  C: LLVMContextRef,
  Fn: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMBasicBlockRef = `LLVMAppendBasicBlockInContext$mh`.invokeExact(C,Fn,Name,) as MemorySegment

public fun LLVMAppendBasicBlock(Fn: LLVMValueRef, Name: Pointer<Byte>): LLVMBasicBlockRef =
    `LLVMAppendBasicBlock$mh`.invokeExact(Fn,Name,) as MemorySegment

public fun LLVMInsertBasicBlockInContext(
  C: LLVMContextRef,
  BB: LLVMBasicBlockRef,
  Name: Pointer<Byte>,
): LLVMBasicBlockRef = `LLVMInsertBasicBlockInContext$mh`.invokeExact(C,BB,Name,) as MemorySegment

public fun LLVMInsertBasicBlock(InsertBeforeBB: LLVMBasicBlockRef, Name: Pointer<Byte>):
    LLVMBasicBlockRef = `LLVMInsertBasicBlock$mh`.invokeExact(InsertBeforeBB,Name,) as MemorySegment

public fun LLVMDeleteBasicBlock(BB: LLVMBasicBlockRef): Unit =
    `LLVMDeleteBasicBlock$mh`.invokeExact(BB,) as Unit

public fun LLVMRemoveBasicBlockFromParent(BB: LLVMBasicBlockRef): Unit =
    `LLVMRemoveBasicBlockFromParent$mh`.invokeExact(BB,) as Unit

public fun LLVMMoveBasicBlockBefore(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): Unit =
    `LLVMMoveBasicBlockBefore$mh`.invokeExact(BB,MovePos,) as Unit

public fun LLVMMoveBasicBlockAfter(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): Unit =
    `LLVMMoveBasicBlockAfter$mh`.invokeExact(BB,MovePos,) as Unit

public fun LLVMGetFirstInstruction(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetFirstInstruction$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMGetLastInstruction(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetLastInstruction$mh`.invokeExact(BB,) as MemorySegment

public fun LLVMHasMetadata(Val: LLVMValueRef): Int = `LLVMHasMetadata$mh`.invokeExact(Val,) as Int

public fun LLVMGetMetadata(Val: LLVMValueRef, KindID: UInt): LLVMValueRef =
    `LLVMGetMetadata$mh`.invokeExact(Val,KindID.toInt(),) as MemorySegment

public fun LLVMSetMetadata(
  Val: LLVMValueRef,
  KindID: UInt,
  Node: LLVMValueRef,
): Unit = `LLVMSetMetadata$mh`.invokeExact(Val,KindID.toInt(),Node,) as Unit

public fun LLVMInstructionGetAllMetadataOtherThanDebugLoc(Instr: LLVMValueRef,
    NumEntries: Pointer<ULong>): Pointer<LLVMValueMetadataEntry> =
    `LLVMInstructionGetAllMetadataOtherThanDebugLoc$mh`.invokeExact(Instr,NumEntries,) as
    MemorySegment

public fun LLVMGetInstructionParent(Inst: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetInstructionParent$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMGetNextInstruction(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextInstruction$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMGetPreviousInstruction(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousInstruction$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMInstructionRemoveFromParent(Inst: LLVMValueRef): Unit =
    `LLVMInstructionRemoveFromParent$mh`.invokeExact(Inst,) as Unit

public fun LLVMInstructionEraseFromParent(Inst: LLVMValueRef): Unit =
    `LLVMInstructionEraseFromParent$mh`.invokeExact(Inst,) as Unit

public fun LLVMDeleteInstruction(Inst: LLVMValueRef): Unit =
    `LLVMDeleteInstruction$mh`.invokeExact(Inst,) as Unit

public fun LLVMGetInstructionOpcode(Inst: LLVMValueRef): LLVMOpcode =
    LLVMOpcode.fromInt(`LLVMGetInstructionOpcode$mh`.invokeExact(Inst,) as Int)

public fun LLVMGetICmpPredicate(Inst: LLVMValueRef): LLVMIntPredicate =
    LLVMIntPredicate.fromInt(`LLVMGetICmpPredicate$mh`.invokeExact(Inst,) as Int)

public fun LLVMGetFCmpPredicate(Inst: LLVMValueRef): LLVMRealPredicate =
    LLVMRealPredicate.fromInt(`LLVMGetFCmpPredicate$mh`.invokeExact(Inst,) as Int)

public fun LLVMInstructionClone(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMInstructionClone$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMIsATerminatorInst(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMIsATerminatorInst$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMGetNumArgOperands(Instr: LLVMValueRef): UInt =
    (`LLVMGetNumArgOperands$mh`.invokeExact(Instr,) as Int).toUInt()

public fun LLVMSetInstructionCallConv(Instr: LLVMValueRef, CC: UInt): Unit =
    `LLVMSetInstructionCallConv$mh`.invokeExact(Instr,CC.toInt(),) as Unit

public fun LLVMGetInstructionCallConv(Instr: LLVMValueRef): UInt =
    (`LLVMGetInstructionCallConv$mh`.invokeExact(Instr,) as Int).toUInt()

public fun LLVMSetInstrParamAlignment(
  Instr: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  Align: UInt,
): Unit = `LLVMSetInstrParamAlignment$mh`.invokeExact(Instr,Idx.toInt(),Align.toInt(),) as Unit

public fun LLVMAddCallSiteAttribute(
  C: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  A: LLVMAttributeRef,
): Unit = `LLVMAddCallSiteAttribute$mh`.invokeExact(C,Idx.toInt(),A,) as Unit

public fun LLVMGetCallSiteAttributeCount(C: LLVMValueRef, Idx: LLVMAttributeIndex): UInt =
    (`LLVMGetCallSiteAttributeCount$mh`.invokeExact(C,Idx.toInt(),) as Int).toUInt()

public fun LLVMGetCallSiteAttributes(
  C: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  Attrs: Pointer<LLVMAttributeRef>,
): Unit = `LLVMGetCallSiteAttributes$mh`.invokeExact(C,Idx.toInt(),Attrs,) as Unit

public fun LLVMGetCallSiteEnumAttribute(
  C: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  KindID: UInt,
): LLVMAttributeRef = `LLVMGetCallSiteEnumAttribute$mh`.invokeExact(C,Idx.toInt(),KindID.toInt(),)
    as MemorySegment

public fun LLVMGetCallSiteStringAttribute(
  C: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  K: Pointer<Byte>,
  KLen: UInt,
): LLVMAttributeRef = `LLVMGetCallSiteStringAttribute$mh`.invokeExact(C,Idx.toInt(),K,KLen.toInt(),)
    as MemorySegment

public fun LLVMRemoveCallSiteEnumAttribute(
  C: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  KindID: UInt,
): Unit = `LLVMRemoveCallSiteEnumAttribute$mh`.invokeExact(C,Idx.toInt(),KindID.toInt(),) as Unit

public fun LLVMRemoveCallSiteStringAttribute(
  C: LLVMValueRef,
  Idx: LLVMAttributeIndex,
  K: Pointer<Byte>,
  KLen: UInt,
): Unit = `LLVMRemoveCallSiteStringAttribute$mh`.invokeExact(C,Idx.toInt(),K,KLen.toInt(),) as Unit

public fun LLVMGetCalledFunctionType(C: LLVMValueRef): LLVMTypeRef =
    `LLVMGetCalledFunctionType$mh`.invokeExact(C,) as MemorySegment

public fun LLVMGetCalledValue(Instr: LLVMValueRef): LLVMValueRef =
    `LLVMGetCalledValue$mh`.invokeExact(Instr,) as MemorySegment

public fun LLVMGetNumOperandBundles(C: LLVMValueRef): UInt =
    (`LLVMGetNumOperandBundles$mh`.invokeExact(C,) as Int).toUInt()

public fun LLVMGetOperandBundleAtIndex(C: LLVMValueRef, Index: UInt): LLVMOperandBundleRef =
    `LLVMGetOperandBundleAtIndex$mh`.invokeExact(C,Index.toInt(),) as MemorySegment

public fun LLVMIsTailCall(CallInst: LLVMValueRef): LLVMBool =
    `LLVMIsTailCall$mh`.invokeExact(CallInst,) as Int

public fun LLVMSetTailCall(CallInst: LLVMValueRef, IsTailCall: LLVMBool): Unit =
    `LLVMSetTailCall$mh`.invokeExact(CallInst,IsTailCall,) as Unit

public fun LLVMGetTailCallKind(CallInst: LLVMValueRef): LLVMTailCallKind =
    LLVMTailCallKind.fromInt(`LLVMGetTailCallKind$mh`.invokeExact(CallInst,) as Int)

public fun LLVMSetTailCallKind(CallInst: LLVMValueRef, kind: LLVMTailCallKind): Unit =
    `LLVMSetTailCallKind$mh`.invokeExact(CallInst,kind.value,) as Unit

public fun LLVMGetNormalDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetNormalDest$mh`.invokeExact(InvokeInst,) as MemorySegment

public fun LLVMGetUnwindDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetUnwindDest$mh`.invokeExact(InvokeInst,) as MemorySegment

public fun LLVMSetNormalDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef): Unit =
    `LLVMSetNormalDest$mh`.invokeExact(InvokeInst,B,) as Unit

public fun LLVMSetUnwindDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef): Unit =
    `LLVMSetUnwindDest$mh`.invokeExact(InvokeInst,B,) as Unit

public fun LLVMGetNumSuccessors(Term: LLVMValueRef): UInt =
    (`LLVMGetNumSuccessors$mh`.invokeExact(Term,) as Int).toUInt()

public fun LLVMGetSuccessor(Term: LLVMValueRef, i: UInt): LLVMBasicBlockRef =
    `LLVMGetSuccessor$mh`.invokeExact(Term,i.toInt(),) as MemorySegment

public fun LLVMSetSuccessor(
  Term: LLVMValueRef,
  i: UInt,
  block: LLVMBasicBlockRef,
): Unit = `LLVMSetSuccessor$mh`.invokeExact(Term,i.toInt(),block,) as Unit

public fun LLVMIsConditional(Branch: LLVMValueRef): LLVMBool =
    `LLVMIsConditional$mh`.invokeExact(Branch,) as Int

public fun LLVMGetCondition(Branch: LLVMValueRef): LLVMValueRef =
    `LLVMGetCondition$mh`.invokeExact(Branch,) as MemorySegment

public fun LLVMSetCondition(Branch: LLVMValueRef, Cond: LLVMValueRef): Unit =
    `LLVMSetCondition$mh`.invokeExact(Branch,Cond,) as Unit

public fun LLVMGetSwitchDefaultDest(SwitchInstr: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetSwitchDefaultDest$mh`.invokeExact(SwitchInstr,) as MemorySegment

public fun LLVMGetAllocatedType(Alloca: LLVMValueRef): LLVMTypeRef =
    `LLVMGetAllocatedType$mh`.invokeExact(Alloca,) as MemorySegment

public fun LLVMIsInBounds(GEP: LLVMValueRef): LLVMBool = `LLVMIsInBounds$mh`.invokeExact(GEP,) as
    Int

public fun LLVMSetIsInBounds(GEP: LLVMValueRef, InBounds: LLVMBool): Unit =
    `LLVMSetIsInBounds$mh`.invokeExact(GEP,InBounds,) as Unit

public fun LLVMGetGEPSourceElementType(GEP: LLVMValueRef): LLVMTypeRef =
    `LLVMGetGEPSourceElementType$mh`.invokeExact(GEP,) as MemorySegment

public fun LLVMAddIncoming(
  PhiNode: LLVMValueRef,
  IncomingValues: Pointer<LLVMValueRef>,
  IncomingBlocks: Pointer<LLVMBasicBlockRef>,
  Count: UInt,
): Unit = `LLVMAddIncoming$mh`.invokeExact(PhiNode,IncomingValues,IncomingBlocks,Count.toInt(),) as
    Unit

public fun LLVMCountIncoming(PhiNode: LLVMValueRef): UInt =
    (`LLVMCountIncoming$mh`.invokeExact(PhiNode,) as Int).toUInt()

public fun LLVMGetIncomingValue(PhiNode: LLVMValueRef, Index: UInt): LLVMValueRef =
    `LLVMGetIncomingValue$mh`.invokeExact(PhiNode,Index.toInt(),) as MemorySegment

public fun LLVMGetIncomingBlock(PhiNode: LLVMValueRef, Index: UInt): LLVMBasicBlockRef =
    `LLVMGetIncomingBlock$mh`.invokeExact(PhiNode,Index.toInt(),) as MemorySegment

public fun LLVMGetNumIndices(Inst: LLVMValueRef): UInt = (`LLVMGetNumIndices$mh`.invokeExact(Inst,)
    as Int).toUInt()

public fun LLVMGetIndices(Inst: LLVMValueRef): Pointer<UInt> =
    `LLVMGetIndices$mh`.invokeExact(Inst,) as MemorySegment

public fun LLVMCreateBuilderInContext(C: LLVMContextRef): LLVMBuilderRef =
    `LLVMCreateBuilderInContext$mh`.invokeExact(C,) as MemorySegment

public fun LLVMCreateBuilder(): LLVMBuilderRef = `LLVMCreateBuilder$mh`.invokeExact() as
    MemorySegment

public fun LLVMPositionBuilder(
  Builder: LLVMBuilderRef,
  Block: LLVMBasicBlockRef,
  Instr: LLVMValueRef,
): Unit = `LLVMPositionBuilder$mh`.invokeExact(Builder,Block,Instr,) as Unit

public fun LLVMPositionBuilderBefore(Builder: LLVMBuilderRef, Instr: LLVMValueRef): Unit =
    `LLVMPositionBuilderBefore$mh`.invokeExact(Builder,Instr,) as Unit

public fun LLVMPositionBuilderAtEnd(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef): Unit =
    `LLVMPositionBuilderAtEnd$mh`.invokeExact(Builder,Block,) as Unit

public fun LLVMGetInsertBlock(Builder: LLVMBuilderRef): LLVMBasicBlockRef =
    `LLVMGetInsertBlock$mh`.invokeExact(Builder,) as MemorySegment

public fun LLVMClearInsertionPosition(Builder: LLVMBuilderRef): Unit =
    `LLVMClearInsertionPosition$mh`.invokeExact(Builder,) as Unit

public fun LLVMInsertIntoBuilder(Builder: LLVMBuilderRef, Instr: LLVMValueRef): Unit =
    `LLVMInsertIntoBuilder$mh`.invokeExact(Builder,Instr,) as Unit

public fun LLVMInsertIntoBuilderWithName(
  Builder: LLVMBuilderRef,
  Instr: LLVMValueRef,
  Name: Pointer<Byte>,
): Unit = `LLVMInsertIntoBuilderWithName$mh`.invokeExact(Builder,Instr,Name,) as Unit

public fun LLVMDisposeBuilder(Builder: LLVMBuilderRef): Unit =
    `LLVMDisposeBuilder$mh`.invokeExact(Builder,) as Unit

public fun LLVMGetCurrentDebugLocation2(Builder: LLVMBuilderRef): LLVMMetadataRef =
    `LLVMGetCurrentDebugLocation2$mh`.invokeExact(Builder,) as MemorySegment

public fun LLVMSetCurrentDebugLocation2(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef): Unit =
    `LLVMSetCurrentDebugLocation2$mh`.invokeExact(Builder,Loc,) as Unit

public fun LLVMSetInstDebugLocation(Builder: LLVMBuilderRef, Inst: LLVMValueRef): Unit =
    `LLVMSetInstDebugLocation$mh`.invokeExact(Builder,Inst,) as Unit

public fun LLVMAddMetadataToInst(Builder: LLVMBuilderRef, Inst: LLVMValueRef): Unit =
    `LLVMAddMetadataToInst$mh`.invokeExact(Builder,Inst,) as Unit

public fun LLVMBuilderGetDefaultFPMathTag(Builder: LLVMBuilderRef): LLVMMetadataRef =
    `LLVMBuilderGetDefaultFPMathTag$mh`.invokeExact(Builder,) as MemorySegment

public fun LLVMBuilderSetDefaultFPMathTag(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef): Unit
    = `LLVMBuilderSetDefaultFPMathTag$mh`.invokeExact(Builder,FPMathTag,) as Unit

public fun LLVMSetCurrentDebugLocation(Builder: LLVMBuilderRef, L: LLVMValueRef): Unit =
    `LLVMSetCurrentDebugLocation$mh`.invokeExact(Builder,L,) as Unit

public fun LLVMGetCurrentDebugLocation(Builder: LLVMBuilderRef): LLVMValueRef =
    `LLVMGetCurrentDebugLocation$mh`.invokeExact(Builder,) as MemorySegment

public fun LLVMBuildRetVoid(`$p0`: LLVMBuilderRef): LLVMValueRef =
    `LLVMBuildRetVoid$mh`.invokeExact(`$p0`,) as MemorySegment

public fun LLVMBuildRet(`$p0`: LLVMBuilderRef, V: LLVMValueRef): LLVMValueRef =
    `LLVMBuildRet$mh`.invokeExact(`$p0`,V,) as MemorySegment

public fun LLVMBuildAggregateRet(
  `$p0`: LLVMBuilderRef,
  RetVals: Pointer<LLVMValueRef>,
  N: UInt,
): LLVMValueRef = `LLVMBuildAggregateRet$mh`.invokeExact(`$p0`,RetVals,N.toInt(),) as MemorySegment

public fun LLVMBuildBr(`$p0`: LLVMBuilderRef, Dest: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMBuildBr$mh`.invokeExact(`$p0`,Dest,) as MemorySegment

public fun LLVMBuildCondBr(
  `$p0`: LLVMBuilderRef,
  If: LLVMValueRef,
  Then: LLVMBasicBlockRef,
  Else: LLVMBasicBlockRef,
): LLVMValueRef = `LLVMBuildCondBr$mh`.invokeExact(`$p0`,If,Then,Else,) as MemorySegment

public fun LLVMBuildSwitch(
  `$p0`: LLVMBuilderRef,
  V: LLVMValueRef,
  Else: LLVMBasicBlockRef,
  NumCases: UInt,
): LLVMValueRef = `LLVMBuildSwitch$mh`.invokeExact(`$p0`,V,Else,NumCases.toInt(),) as MemorySegment

public fun LLVMBuildIndirectBr(
  B: LLVMBuilderRef,
  Addr: LLVMValueRef,
  NumDests: UInt,
): LLVMValueRef = `LLVMBuildIndirectBr$mh`.invokeExact(B,Addr,NumDests.toInt(),) as MemorySegment

public fun LLVMBuildInvoke2(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Fn: LLVMValueRef,
  Args: Pointer<LLVMValueRef>,
  NumArgs: UInt,
  Then: LLVMBasicBlockRef,
  Catch: LLVMBasicBlockRef,
  Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildInvoke2$mh`.invokeExact(`$p0`,Ty,Fn,Args,NumArgs.toInt(),Then,Catch,Name,) as
    MemorySegment

public fun LLVMBuildInvokeWithOperandBundles(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Fn: LLVMValueRef,
  Args: Pointer<LLVMValueRef>,
  NumArgs: UInt,
  Then: LLVMBasicBlockRef,
  Catch: LLVMBasicBlockRef,
  Bundles: Pointer<LLVMOperandBundleRef>,
  NumBundles: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildInvokeWithOperandBundles$mh`.invokeExact(`$p0`,Ty,Fn,Args,NumArgs.toInt(),Then,Catch,Bundles,NumBundles.toInt(),Name,)
    as MemorySegment

public fun LLVMBuildUnreachable(`$p0`: LLVMBuilderRef): LLVMValueRef =
    `LLVMBuildUnreachable$mh`.invokeExact(`$p0`,) as MemorySegment

public fun LLVMBuildResume(B: LLVMBuilderRef, Exn: LLVMValueRef): LLVMValueRef =
    `LLVMBuildResume$mh`.invokeExact(B,Exn,) as MemorySegment

public fun LLVMBuildLandingPad(
  B: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  PersFn: LLVMValueRef,
  NumClauses: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildLandingPad$mh`.invokeExact(B,Ty,PersFn,NumClauses.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildCleanupRet(
  B: LLVMBuilderRef,
  CatchPad: LLVMValueRef,
  BB: LLVMBasicBlockRef,
): LLVMValueRef = `LLVMBuildCleanupRet$mh`.invokeExact(B,CatchPad,BB,) as MemorySegment

public fun LLVMBuildCatchRet(
  B: LLVMBuilderRef,
  CatchPad: LLVMValueRef,
  BB: LLVMBasicBlockRef,
): LLVMValueRef = `LLVMBuildCatchRet$mh`.invokeExact(B,CatchPad,BB,) as MemorySegment

public fun LLVMBuildCatchPad(
  B: LLVMBuilderRef,
  ParentPad: LLVMValueRef,
  Args: Pointer<LLVMValueRef>,
  NumArgs: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCatchPad$mh`.invokeExact(B,ParentPad,Args,NumArgs.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildCleanupPad(
  B: LLVMBuilderRef,
  ParentPad: LLVMValueRef,
  Args: Pointer<LLVMValueRef>,
  NumArgs: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCleanupPad$mh`.invokeExact(B,ParentPad,Args,NumArgs.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildCatchSwitch(
  B: LLVMBuilderRef,
  ParentPad: LLVMValueRef,
  UnwindBB: LLVMBasicBlockRef,
  NumHandlers: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildCatchSwitch$mh`.invokeExact(B,ParentPad,UnwindBB,NumHandlers.toInt(),Name,) as
    MemorySegment

public fun LLVMAddCase(
  Switch: LLVMValueRef,
  OnVal: LLVMValueRef,
  Dest: LLVMBasicBlockRef,
): Unit = `LLVMAddCase$mh`.invokeExact(Switch,OnVal,Dest,) as Unit

public fun LLVMAddDestination(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef): Unit =
    `LLVMAddDestination$mh`.invokeExact(IndirectBr,Dest,) as Unit

public fun LLVMGetNumClauses(LandingPad: LLVMValueRef): UInt =
    (`LLVMGetNumClauses$mh`.invokeExact(LandingPad,) as Int).toUInt()

public fun LLVMGetClause(LandingPad: LLVMValueRef, Idx: UInt): LLVMValueRef =
    `LLVMGetClause$mh`.invokeExact(LandingPad,Idx.toInt(),) as MemorySegment

public fun LLVMAddClause(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef): Unit =
    `LLVMAddClause$mh`.invokeExact(LandingPad,ClauseVal,) as Unit

public fun LLVMIsCleanup(LandingPad: LLVMValueRef): LLVMBool =
    `LLVMIsCleanup$mh`.invokeExact(LandingPad,) as Int

public fun LLVMSetCleanup(LandingPad: LLVMValueRef, Val: LLVMBool): Unit =
    `LLVMSetCleanup$mh`.invokeExact(LandingPad,Val,) as Unit

public fun LLVMAddHandler(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef): Unit =
    `LLVMAddHandler$mh`.invokeExact(CatchSwitch,Dest,) as Unit

public fun LLVMGetNumHandlers(CatchSwitch: LLVMValueRef): UInt =
    (`LLVMGetNumHandlers$mh`.invokeExact(CatchSwitch,) as Int).toUInt()

public fun LLVMGetHandlers(CatchSwitch: LLVMValueRef, Handlers: Pointer<LLVMBasicBlockRef>): Unit =
    `LLVMGetHandlers$mh`.invokeExact(CatchSwitch,Handlers,) as Unit

public fun LLVMGetArgOperand(Funclet: LLVMValueRef, i: UInt): LLVMValueRef =
    `LLVMGetArgOperand$mh`.invokeExact(Funclet,i.toInt(),) as MemorySegment

public fun LLVMSetArgOperand(
  Funclet: LLVMValueRef,
  i: UInt,
  `value`: LLVMValueRef,
): Unit = `LLVMSetArgOperand$mh`.invokeExact(Funclet,i.toInt(),`value`,) as Unit

public fun LLVMGetParentCatchSwitch(CatchPad: LLVMValueRef): LLVMValueRef =
    `LLVMGetParentCatchSwitch$mh`.invokeExact(CatchPad,) as MemorySegment

public fun LLVMSetParentCatchSwitch(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef): Unit =
    `LLVMSetParentCatchSwitch$mh`.invokeExact(CatchPad,CatchSwitch,) as Unit

public fun LLVMBuildAdd(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAdd$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildNSWAdd(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWAdd$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildNUWAdd(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWAdd$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildFAdd(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFAdd$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildSub(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSub$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildNSWSub(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWSub$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildNUWSub(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWSub$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildFSub(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFSub$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildMul(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildMul$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildNSWMul(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWMul$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildNUWMul(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWMul$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildFMul(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFMul$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildUDiv(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildUDiv$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildExactUDiv(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExactUDiv$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildSDiv(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSDiv$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildExactSDiv(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExactSDiv$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildFDiv(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFDiv$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildURem(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildURem$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildSRem(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSRem$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildFRem(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFRem$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildShl(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildShl$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildLShr(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildLShr$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildAShr(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAShr$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildAnd(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAnd$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildOr(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildOr$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildXor(
  `$p0`: LLVMBuilderRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildXor$mh`.invokeExact(`$p0`,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildBinOp(
  B: LLVMBuilderRef,
  Op: LLVMOpcode,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildBinOp$mh`.invokeExact(B,Op.value,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildNeg(
  `$p0`: LLVMBuilderRef,
  V: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNeg$mh`.invokeExact(`$p0`,V,Name,) as MemorySegment

public fun LLVMBuildNSWNeg(
  B: LLVMBuilderRef,
  V: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWNeg$mh`.invokeExact(B,V,Name,) as MemorySegment

public fun LLVMBuildNUWNeg(
  B: LLVMBuilderRef,
  V: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWNeg$mh`.invokeExact(B,V,Name,) as MemorySegment

public fun LLVMBuildFNeg(
  `$p0`: LLVMBuilderRef,
  V: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFNeg$mh`.invokeExact(`$p0`,V,Name,) as MemorySegment

public fun LLVMBuildNot(
  `$p0`: LLVMBuilderRef,
  V: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNot$mh`.invokeExact(`$p0`,V,Name,) as MemorySegment

public fun LLVMGetNUW(ArithInst: LLVMValueRef): LLVMBool = `LLVMGetNUW$mh`.invokeExact(ArithInst,)
    as Int

public fun LLVMSetNUW(ArithInst: LLVMValueRef, HasNUW: LLVMBool): Unit =
    `LLVMSetNUW$mh`.invokeExact(ArithInst,HasNUW,) as Unit

public fun LLVMGetNSW(ArithInst: LLVMValueRef): LLVMBool = `LLVMGetNSW$mh`.invokeExact(ArithInst,)
    as Int

public fun LLVMSetNSW(ArithInst: LLVMValueRef, HasNSW: LLVMBool): Unit =
    `LLVMSetNSW$mh`.invokeExact(ArithInst,HasNSW,) as Unit

public fun LLVMGetExact(DivOrShrInst: LLVMValueRef): LLVMBool =
    `LLVMGetExact$mh`.invokeExact(DivOrShrInst,) as Int

public fun LLVMSetExact(DivOrShrInst: LLVMValueRef, IsExact: LLVMBool): Unit =
    `LLVMSetExact$mh`.invokeExact(DivOrShrInst,IsExact,) as Unit

public fun LLVMGetNNeg(NonNegInst: LLVMValueRef): LLVMBool =
    `LLVMGetNNeg$mh`.invokeExact(NonNegInst,) as Int

public fun LLVMSetNNeg(NonNegInst: LLVMValueRef, IsNonNeg: LLVMBool): Unit =
    `LLVMSetNNeg$mh`.invokeExact(NonNegInst,IsNonNeg,) as Unit

public fun LLVMGetFastMathFlags(FPMathInst: LLVMValueRef): LLVMFastMathFlags =
    (`LLVMGetFastMathFlags$mh`.invokeExact(FPMathInst,) as Int).toUInt()

public fun LLVMSetFastMathFlags(FPMathInst: LLVMValueRef, FMF: LLVMFastMathFlags): Unit =
    `LLVMSetFastMathFlags$mh`.invokeExact(FPMathInst,FMF.toInt(),) as Unit

public fun LLVMCanValueUseFastMathFlags(Inst: LLVMValueRef): LLVMBool =
    `LLVMCanValueUseFastMathFlags$mh`.invokeExact(Inst,) as Int

public fun LLVMGetIsDisjoint(Inst: LLVMValueRef): LLVMBool =
    `LLVMGetIsDisjoint$mh`.invokeExact(Inst,) as Int

public fun LLVMSetIsDisjoint(Inst: LLVMValueRef, IsDisjoint: LLVMBool): Unit =
    `LLVMSetIsDisjoint$mh`.invokeExact(Inst,IsDisjoint,) as Unit

public fun LLVMBuildMalloc(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildMalloc$mh`.invokeExact(`$p0`,Ty,Name,) as MemorySegment

public fun LLVMBuildArrayMalloc(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Val: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildArrayMalloc$mh`.invokeExact(`$p0`,Ty,Val,Name,) as MemorySegment

public fun LLVMBuildMemSet(
  B: LLVMBuilderRef,
  Ptr: LLVMValueRef,
  Val: LLVMValueRef,
  Len: LLVMValueRef,
  Align: UInt,
): LLVMValueRef = `LLVMBuildMemSet$mh`.invokeExact(B,Ptr,Val,Len,Align.toInt(),) as MemorySegment

public fun LLVMBuildMemCpy(
  B: LLVMBuilderRef,
  Dst: LLVMValueRef,
  DstAlign: UInt,
  Src: LLVMValueRef,
  SrcAlign: UInt,
  Size: LLVMValueRef,
): LLVMValueRef =
    `LLVMBuildMemCpy$mh`.invokeExact(B,Dst,DstAlign.toInt(),Src,SrcAlign.toInt(),Size,) as
    MemorySegment

public fun LLVMBuildMemMove(
  B: LLVMBuilderRef,
  Dst: LLVMValueRef,
  DstAlign: UInt,
  Src: LLVMValueRef,
  SrcAlign: UInt,
  Size: LLVMValueRef,
): LLVMValueRef =
    `LLVMBuildMemMove$mh`.invokeExact(B,Dst,DstAlign.toInt(),Src,SrcAlign.toInt(),Size,) as
    MemorySegment

public fun LLVMBuildAlloca(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAlloca$mh`.invokeExact(`$p0`,Ty,Name,) as MemorySegment

public fun LLVMBuildArrayAlloca(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Val: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildArrayAlloca$mh`.invokeExact(`$p0`,Ty,Val,Name,) as MemorySegment

public fun LLVMBuildFree(`$p0`: LLVMBuilderRef, PointerVal: LLVMValueRef): LLVMValueRef =
    `LLVMBuildFree$mh`.invokeExact(`$p0`,PointerVal,) as MemorySegment

public fun LLVMBuildLoad2(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  PointerVal: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildLoad2$mh`.invokeExact(`$p0`,Ty,PointerVal,Name,) as MemorySegment

public fun LLVMBuildStore(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  Ptr: LLVMValueRef,
): LLVMValueRef = `LLVMBuildStore$mh`.invokeExact(`$p0`,Val,Ptr,) as MemorySegment

public fun LLVMBuildGEP2(
  B: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Pointer: LLVMValueRef,
  Indices: Pointer<LLVMValueRef>,
  NumIndices: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildGEP2$mh`.invokeExact(B,Ty,Pointer,Indices,NumIndices.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildInBoundsGEP2(
  B: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Pointer: LLVMValueRef,
  Indices: Pointer<LLVMValueRef>,
  NumIndices: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildInBoundsGEP2$mh`.invokeExact(B,Ty,Pointer,Indices,NumIndices.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildStructGEP2(
  B: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Pointer: LLVMValueRef,
  Idx: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildStructGEP2$mh`.invokeExact(B,Ty,Pointer,Idx.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildGlobalString(
  B: LLVMBuilderRef,
  Str: Pointer<Byte>,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildGlobalString$mh`.invokeExact(B,Str,Name,) as MemorySegment

public fun LLVMBuildGlobalStringPtr(
  B: LLVMBuilderRef,
  Str: Pointer<Byte>,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildGlobalStringPtr$mh`.invokeExact(B,Str,Name,) as MemorySegment

public fun LLVMGetVolatile(MemoryAccessInst: LLVMValueRef): LLVMBool =
    `LLVMGetVolatile$mh`.invokeExact(MemoryAccessInst,) as Int

public fun LLVMSetVolatile(MemoryAccessInst: LLVMValueRef, IsVolatile: LLVMBool): Unit =
    `LLVMSetVolatile$mh`.invokeExact(MemoryAccessInst,IsVolatile,) as Unit

public fun LLVMGetWeak(CmpXchgInst: LLVMValueRef): LLVMBool =
    `LLVMGetWeak$mh`.invokeExact(CmpXchgInst,) as Int

public fun LLVMSetWeak(CmpXchgInst: LLVMValueRef, IsWeak: LLVMBool): Unit =
    `LLVMSetWeak$mh`.invokeExact(CmpXchgInst,IsWeak,) as Unit

public fun LLVMGetOrdering(MemoryAccessInst: LLVMValueRef): LLVMAtomicOrdering =
    LLVMAtomicOrdering.fromInt(`LLVMGetOrdering$mh`.invokeExact(MemoryAccessInst,) as Int)

public fun LLVMSetOrdering(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): Unit =
    `LLVMSetOrdering$mh`.invokeExact(MemoryAccessInst,Ordering.value,) as Unit

public fun LLVMGetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef): LLVMAtomicRMWBinOp =
    LLVMAtomicRMWBinOp.fromInt(`LLVMGetAtomicRMWBinOp$mh`.invokeExact(AtomicRMWInst,) as Int)

public fun LLVMSetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp): Unit =
    `LLVMSetAtomicRMWBinOp$mh`.invokeExact(AtomicRMWInst,BinOp.value,) as Unit

public fun LLVMBuildTrunc(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildTrunc$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildZExt(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildZExt$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildSExt(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSExt$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildFPToUI(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPToUI$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildFPToSI(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPToSI$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildUIToFP(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildUIToFP$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildSIToFP(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSIToFP$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildFPTrunc(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPTrunc$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildFPExt(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPExt$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildPtrToInt(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPtrToInt$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildIntToPtr(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIntToPtr$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildBitCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildBitCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildAddrSpaceCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAddrSpaceCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildZExtOrBitCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildZExtOrBitCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildSExtOrBitCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSExtOrBitCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildTruncOrBitCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildTruncOrBitCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildCast(
  B: LLVMBuilderRef,
  Op: LLVMOpcode,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCast$mh`.invokeExact(B,Op.value,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildPointerCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPointerCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildIntCast2(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  IsSigned: LLVMBool,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIntCast2$mh`.invokeExact(`$p0`,Val,DestTy,IsSigned,Name,) as
    MemorySegment

public fun LLVMBuildFPCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMBuildIntCast(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  DestTy: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIntCast$mh`.invokeExact(`$p0`,Val,DestTy,Name,) as MemorySegment

public fun LLVMGetCastOpcode(
  Src: LLVMValueRef,
  SrcIsSigned: LLVMBool,
  DestTy: LLVMTypeRef,
  DestIsSigned: LLVMBool,
): LLVMOpcode =
    LLVMOpcode.fromInt(`LLVMGetCastOpcode$mh`.invokeExact(Src,SrcIsSigned,DestTy,DestIsSigned,) as
    Int)

public fun LLVMBuildICmp(
  `$p0`: LLVMBuilderRef,
  Op: LLVMIntPredicate,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildICmp$mh`.invokeExact(`$p0`,Op.value,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildFCmp(
  `$p0`: LLVMBuilderRef,
  Op: LLVMRealPredicate,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFCmp$mh`.invokeExact(`$p0`,Op.value,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildPhi(
  `$p0`: LLVMBuilderRef,
  Ty: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPhi$mh`.invokeExact(`$p0`,Ty,Name,) as MemorySegment

public fun LLVMBuildCall2(
  `$p0`: LLVMBuilderRef,
  `$p1`: LLVMTypeRef,
  Fn: LLVMValueRef,
  Args: Pointer<LLVMValueRef>,
  NumArgs: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCall2$mh`.invokeExact(`$p0`,`$p1`,Fn,Args,NumArgs.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildCallWithOperandBundles(
  `$p0`: LLVMBuilderRef,
  `$p1`: LLVMTypeRef,
  Fn: LLVMValueRef,
  Args: Pointer<LLVMValueRef>,
  NumArgs: UInt,
  Bundles: Pointer<LLVMOperandBundleRef>,
  NumBundles: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildCallWithOperandBundles$mh`.invokeExact(`$p0`,`$p1`,Fn,Args,NumArgs.toInt(),Bundles,NumBundles.toInt(),Name,)
    as MemorySegment

public fun LLVMBuildSelect(
  `$p0`: LLVMBuilderRef,
  If: LLVMValueRef,
  Then: LLVMValueRef,
  Else: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSelect$mh`.invokeExact(`$p0`,If,Then,Else,Name,) as MemorySegment

public fun LLVMBuildVAArg(
  `$p0`: LLVMBuilderRef,
  List: LLVMValueRef,
  Ty: LLVMTypeRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildVAArg$mh`.invokeExact(`$p0`,List,Ty,Name,) as MemorySegment

public fun LLVMBuildExtractElement(
  `$p0`: LLVMBuilderRef,
  VecVal: LLVMValueRef,
  Index: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExtractElement$mh`.invokeExact(`$p0`,VecVal,Index,Name,) as
    MemorySegment

public fun LLVMBuildInsertElement(
  `$p0`: LLVMBuilderRef,
  VecVal: LLVMValueRef,
  EltVal: LLVMValueRef,
  Index: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildInsertElement$mh`.invokeExact(`$p0`,VecVal,EltVal,Index,Name,) as
    MemorySegment

public fun LLVMBuildShuffleVector(
  `$p0`: LLVMBuilderRef,
  V1: LLVMValueRef,
  V2: LLVMValueRef,
  Mask: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildShuffleVector$mh`.invokeExact(`$p0`,V1,V2,Mask,Name,) as MemorySegment

public fun LLVMBuildExtractValue(
  `$p0`: LLVMBuilderRef,
  AggVal: LLVMValueRef,
  Index: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExtractValue$mh`.invokeExact(`$p0`,AggVal,Index.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildInsertValue(
  `$p0`: LLVMBuilderRef,
  AggVal: LLVMValueRef,
  EltVal: LLVMValueRef,
  Index: UInt,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildInsertValue$mh`.invokeExact(`$p0`,AggVal,EltVal,Index.toInt(),Name,) as
    MemorySegment

public fun LLVMBuildFreeze(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFreeze$mh`.invokeExact(`$p0`,Val,Name,) as MemorySegment

public fun LLVMBuildIsNull(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIsNull$mh`.invokeExact(`$p0`,Val,Name,) as MemorySegment

public fun LLVMBuildIsNotNull(
  `$p0`: LLVMBuilderRef,
  Val: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIsNotNull$mh`.invokeExact(`$p0`,Val,Name,) as MemorySegment

public fun LLVMBuildPtrDiff2(
  `$p0`: LLVMBuilderRef,
  ElemTy: LLVMTypeRef,
  LHS: LLVMValueRef,
  RHS: LLVMValueRef,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPtrDiff2$mh`.invokeExact(`$p0`,ElemTy,LHS,RHS,Name,) as MemorySegment

public fun LLVMBuildFence(
  B: LLVMBuilderRef,
  ordering: LLVMAtomicOrdering,
  singleThread: LLVMBool,
  Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFence$mh`.invokeExact(B,ordering.value,singleThread,Name,) as
    MemorySegment

public fun LLVMBuildAtomicRMW(
  B: LLVMBuilderRef,
  op: LLVMAtomicRMWBinOp,
  PTR: LLVMValueRef,
  Val: LLVMValueRef,
  ordering: LLVMAtomicOrdering,
  singleThread: LLVMBool,
): LLVMValueRef =
    `LLVMBuildAtomicRMW$mh`.invokeExact(B,op.value,PTR,Val,ordering.value,singleThread,) as
    MemorySegment

public fun LLVMBuildAtomicCmpXchg(
  B: LLVMBuilderRef,
  Ptr: LLVMValueRef,
  Cmp: LLVMValueRef,
  New: LLVMValueRef,
  SuccessOrdering: LLVMAtomicOrdering,
  FailureOrdering: LLVMAtomicOrdering,
  SingleThread: LLVMBool,
): LLVMValueRef =
    `LLVMBuildAtomicCmpXchg$mh`.invokeExact(B,Ptr,Cmp,New,SuccessOrdering.value,FailureOrdering.value,SingleThread,)
    as MemorySegment

public fun LLVMGetNumMaskElements(ShuffleVectorInst: LLVMValueRef): UInt =
    (`LLVMGetNumMaskElements$mh`.invokeExact(ShuffleVectorInst,) as Int).toUInt()

public fun LLVMGetUndefMaskElem(): Int = `LLVMGetUndefMaskElem$mh`.invokeExact() as Int

public fun LLVMGetMaskValue(ShuffleVectorInst: LLVMValueRef, Elt: UInt): Int =
    `LLVMGetMaskValue$mh`.invokeExact(ShuffleVectorInst,Elt.toInt(),) as Int

public fun LLVMIsAtomicSingleThread(AtomicInst: LLVMValueRef): LLVMBool =
    `LLVMIsAtomicSingleThread$mh`.invokeExact(AtomicInst,) as Int

public fun LLVMSetAtomicSingleThread(AtomicInst: LLVMValueRef, SingleThread: LLVMBool): Unit =
    `LLVMSetAtomicSingleThread$mh`.invokeExact(AtomicInst,SingleThread,) as Unit

public fun LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering =
    LLVMAtomicOrdering.fromInt(`LLVMGetCmpXchgSuccessOrdering$mh`.invokeExact(CmpXchgInst,) as Int)

public fun LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering):
    Unit = `LLVMSetCmpXchgSuccessOrdering$mh`.invokeExact(CmpXchgInst,Ordering.value,) as Unit

public fun LLVMGetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering =
    LLVMAtomicOrdering.fromInt(`LLVMGetCmpXchgFailureOrdering$mh`.invokeExact(CmpXchgInst,) as Int)

public fun LLVMSetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering):
    Unit = `LLVMSetCmpXchgFailureOrdering$mh`.invokeExact(CmpXchgInst,Ordering.value,) as Unit

public fun LLVMCreateModuleProviderForExistingModule(M: LLVMModuleRef): LLVMModuleProviderRef =
    `LLVMCreateModuleProviderForExistingModule$mh`.invokeExact(M,) as MemorySegment

public fun LLVMDisposeModuleProvider(M: LLVMModuleProviderRef): Unit =
    `LLVMDisposeModuleProvider$mh`.invokeExact(M,) as Unit

public fun LLVMCreateMemoryBufferWithContentsOfFile(
  Path: Pointer<Byte>,
  OutMemBuf: Pointer<LLVMMemoryBufferRef>,
  OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateMemoryBufferWithContentsOfFile$mh`.invokeExact(Path,OutMemBuf,OutMessage,)
    as Int

public fun LLVMCreateMemoryBufferWithSTDIN(OutMemBuf: Pointer<LLVMMemoryBufferRef>,
    OutMessage: Pointer<Pointer<Byte>>): LLVMBool =
    `LLVMCreateMemoryBufferWithSTDIN$mh`.invokeExact(OutMemBuf,OutMessage,) as Int

public fun LLVMCreateMemoryBufferWithMemoryRange(
  InputData: Pointer<Byte>,
  InputDataLength: ULong,
  BufferName: Pointer<Byte>,
  RequiresNullTerminator: LLVMBool,
): LLVMMemoryBufferRef =
    `LLVMCreateMemoryBufferWithMemoryRange$mh`.invokeExact(InputData,InputDataLength.toLong(),BufferName,RequiresNullTerminator,)
    as MemorySegment

public fun LLVMCreateMemoryBufferWithMemoryRangeCopy(
  InputData: Pointer<Byte>,
  InputDataLength: ULong,
  BufferName: Pointer<Byte>,
): LLVMMemoryBufferRef =
    `LLVMCreateMemoryBufferWithMemoryRangeCopy$mh`.invokeExact(InputData,InputDataLength.toLong(),BufferName,)
    as MemorySegment

public fun LLVMGetBufferStart(MemBuf: LLVMMemoryBufferRef): Pointer<Byte> =
    `LLVMGetBufferStart$mh`.invokeExact(MemBuf,) as MemorySegment

public fun LLVMGetBufferSize(MemBuf: LLVMMemoryBufferRef): ULong =
    (`LLVMGetBufferSize$mh`.invokeExact(MemBuf,) as Long).toULong()

public fun LLVMDisposeMemoryBuffer(MemBuf: LLVMMemoryBufferRef): Unit =
    `LLVMDisposeMemoryBuffer$mh`.invokeExact(MemBuf,) as Unit

public fun LLVMCreatePassManager(): LLVMPassManagerRef = `LLVMCreatePassManager$mh`.invokeExact() as
    MemorySegment

public fun LLVMCreateFunctionPassManagerForModule(M: LLVMModuleRef): LLVMPassManagerRef =
    `LLVMCreateFunctionPassManagerForModule$mh`.invokeExact(M,) as MemorySegment

public fun LLVMCreateFunctionPassManager(MP: LLVMModuleProviderRef): LLVMPassManagerRef =
    `LLVMCreateFunctionPassManager$mh`.invokeExact(MP,) as MemorySegment

public fun LLVMRunPassManager(PM: LLVMPassManagerRef, M: LLVMModuleRef): LLVMBool =
    `LLVMRunPassManager$mh`.invokeExact(PM,M,) as Int

public fun LLVMInitializeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool =
    `LLVMInitializeFunctionPassManager$mh`.invokeExact(FPM,) as Int

public fun LLVMRunFunctionPassManager(FPM: LLVMPassManagerRef, F: LLVMValueRef): LLVMBool =
    `LLVMRunFunctionPassManager$mh`.invokeExact(FPM,F,) as Int

public fun LLVMFinalizeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool =
    `LLVMFinalizeFunctionPassManager$mh`.invokeExact(FPM,) as Int

public fun LLVMDisposePassManager(PM: LLVMPassManagerRef): Unit =
    `LLVMDisposePassManager$mh`.invokeExact(PM,) as Unit

public fun LLVMStartMultithreaded(): LLVMBool = `LLVMStartMultithreaded$mh`.invokeExact() as Int

public fun LLVMStopMultithreaded(): Unit = `LLVMStopMultithreaded$mh`.invokeExact() as Unit

public fun LLVMIsMultithreaded(): LLVMBool = `LLVMIsMultithreaded$mh`.invokeExact() as Int

public fun lto_get_version(): Pointer<Byte> = `lto_get_version$mh`.invokeExact() as MemorySegment

public fun lto_get_error_message(): Pointer<Byte> = `lto_get_error_message$mh`.invokeExact() as
    MemorySegment

public fun lto_module_is_object_file(path: Pointer<Byte>): lto_bool_t =
    `lto_module_is_object_file$mh`.invokeExact(path,) as Boolean

public fun lto_module_is_object_file_for_target(path: Pointer<Byte>,
    target_triple_prefix: Pointer<Byte>): lto_bool_t =
    `lto_module_is_object_file_for_target$mh`.invokeExact(path,target_triple_prefix,) as Boolean

public fun lto_module_has_objc_category(mem: Pointer<Unit>, length: ULong): lto_bool_t =
    `lto_module_has_objc_category$mh`.invokeExact(mem,length.toLong(),) as Boolean

public fun lto_module_is_object_file_in_memory(mem: Pointer<Unit>, length: ULong): lto_bool_t =
    `lto_module_is_object_file_in_memory$mh`.invokeExact(mem,length.toLong(),) as Boolean

public fun lto_module_is_object_file_in_memory_for_target(
  mem: Pointer<Unit>,
  length: ULong,
  target_triple_prefix: Pointer<Byte>,
): lto_bool_t =
    `lto_module_is_object_file_in_memory_for_target$mh`.invokeExact(mem,length.toLong(),target_triple_prefix,)
    as Boolean

public fun lto_module_create(path: Pointer<Byte>): lto_module_t =
    `lto_module_create$mh`.invokeExact(path,) as MemorySegment

public fun lto_module_create_from_memory(mem: Pointer<Unit>, length: ULong): lto_module_t =
    `lto_module_create_from_memory$mh`.invokeExact(mem,length.toLong(),) as MemorySegment

public fun lto_module_create_from_memory_with_path(
  mem: Pointer<Unit>,
  length: ULong,
  path: Pointer<Byte>,
): lto_module_t =
    `lto_module_create_from_memory_with_path$mh`.invokeExact(mem,length.toLong(),path,) as
    MemorySegment

public fun lto_module_create_in_local_context(
  mem: Pointer<Unit>,
  length: ULong,
  path: Pointer<Byte>,
): lto_module_t = `lto_module_create_in_local_context$mh`.invokeExact(mem,length.toLong(),path,) as
    MemorySegment

public fun lto_module_create_in_codegen_context(
  mem: Pointer<Unit>,
  length: ULong,
  path: Pointer<Byte>,
  cg: lto_code_gen_t,
): lto_module_t =
    `lto_module_create_in_codegen_context$mh`.invokeExact(mem,length.toLong(),path,cg,) as
    MemorySegment

public fun lto_module_create_from_fd(
  fd: Int,
  path: Pointer<Byte>,
  file_size: ULong,
): lto_module_t = `lto_module_create_from_fd$mh`.invokeExact(fd,path,file_size.toLong(),) as
    MemorySegment

public fun lto_module_create_from_fd_at_offset(
  fd: Int,
  path: Pointer<Byte>,
  file_size: ULong,
  map_size: ULong,
  offset: off_t,
): lto_module_t =
    `lto_module_create_from_fd_at_offset$mh`.invokeExact(fd,path,file_size.toLong(),map_size.toLong(),offset,)
    as MemorySegment

public fun lto_module_dispose(mod: lto_module_t): Unit = `lto_module_dispose$mh`.invokeExact(mod,)
    as Unit

public fun lto_module_get_target_triple(mod: lto_module_t): Pointer<Byte> =
    `lto_module_get_target_triple$mh`.invokeExact(mod,) as MemorySegment

public fun lto_module_set_target_triple(mod: lto_module_t, triple: Pointer<Byte>): Unit =
    `lto_module_set_target_triple$mh`.invokeExact(mod,triple,) as Unit

public fun lto_module_get_num_symbols(mod: lto_module_t): UInt =
    (`lto_module_get_num_symbols$mh`.invokeExact(mod,) as Int).toUInt()

public fun lto_module_get_symbol_name(mod: lto_module_t, index: UInt): Pointer<Byte> =
    `lto_module_get_symbol_name$mh`.invokeExact(mod,index.toInt(),) as MemorySegment

public fun lto_module_get_symbol_attribute(mod: lto_module_t, index: UInt): lto_symbol_attributes =
    lto_symbol_attributes.fromInt(`lto_module_get_symbol_attribute$mh`.invokeExact(mod,index.toInt(),)
    as Int)

public fun lto_module_get_linkeropts(mod: lto_module_t): Pointer<Byte> =
    `lto_module_get_linkeropts$mh`.invokeExact(mod,) as MemorySegment

public fun lto_module_get_macho_cputype(
  mod: lto_module_t,
  out_cputype: Pointer<UInt>,
  out_cpusubtype: Pointer<UInt>,
): lto_bool_t = `lto_module_get_macho_cputype$mh`.invokeExact(mod,out_cputype,out_cpusubtype,) as
    Boolean

public fun lto_module_has_ctor_dtor(mod: lto_module_t): lto_bool_t =
    `lto_module_has_ctor_dtor$mh`.invokeExact(mod,) as Boolean

public fun lto_codegen_set_diagnostic_handler(
  `$p0`: lto_code_gen_t,
  `$p1`: lto_diagnostic_handler_t,
  `$p2`: Pointer<Unit>,
): Unit = `lto_codegen_set_diagnostic_handler$mh`.invokeExact(`$p0`,`$p1`,`$p2`,) as Unit

public fun lto_codegen_create(): lto_code_gen_t = `lto_codegen_create$mh`.invokeExact() as
    MemorySegment

public fun lto_codegen_create_in_local_context(): lto_code_gen_t =
    `lto_codegen_create_in_local_context$mh`.invokeExact() as MemorySegment

public fun lto_codegen_dispose(`$p0`: lto_code_gen_t): Unit =
    `lto_codegen_dispose$mh`.invokeExact(`$p0`,) as Unit

public fun lto_codegen_add_module(cg: lto_code_gen_t, mod: lto_module_t): lto_bool_t =
    `lto_codegen_add_module$mh`.invokeExact(cg,mod,) as Boolean

public fun lto_codegen_set_module(cg: lto_code_gen_t, mod: lto_module_t): Unit =
    `lto_codegen_set_module$mh`.invokeExact(cg,mod,) as Unit

public fun lto_codegen_set_debug_model(cg: lto_code_gen_t, `$p1`: lto_debug_model): lto_bool_t =
    `lto_codegen_set_debug_model$mh`.invokeExact(cg,`$p1`.value,) as Boolean

public fun lto_codegen_set_pic_model(cg: lto_code_gen_t, `$p1`: lto_codegen_model): lto_bool_t =
    `lto_codegen_set_pic_model$mh`.invokeExact(cg,`$p1`.value,) as Boolean

public fun lto_codegen_set_cpu(cg: lto_code_gen_t, cpu: Pointer<Byte>): Unit =
    `lto_codegen_set_cpu$mh`.invokeExact(cg,cpu,) as Unit

public fun lto_codegen_set_assembler_path(cg: lto_code_gen_t, path: Pointer<Byte>): Unit =
    `lto_codegen_set_assembler_path$mh`.invokeExact(cg,path,) as Unit

public fun lto_codegen_set_assembler_args(
  cg: lto_code_gen_t,
  args: Pointer<Pointer<Byte>>,
  nargs: Int,
): Unit = `lto_codegen_set_assembler_args$mh`.invokeExact(cg,args,nargs,) as Unit

public fun lto_codegen_add_must_preserve_symbol(cg: lto_code_gen_t, symbol: Pointer<Byte>): Unit =
    `lto_codegen_add_must_preserve_symbol$mh`.invokeExact(cg,symbol,) as Unit

public fun lto_codegen_write_merged_modules(cg: lto_code_gen_t, path: Pointer<Byte>): lto_bool_t =
    `lto_codegen_write_merged_modules$mh`.invokeExact(cg,path,) as Boolean

public fun lto_codegen_compile(cg: lto_code_gen_t, length: Pointer<ULong>): Pointer<Unit> =
    `lto_codegen_compile$mh`.invokeExact(cg,length,) as MemorySegment

public fun lto_codegen_compile_to_file(cg: lto_code_gen_t, name: Pointer<Pointer<Byte>>): lto_bool_t
    = `lto_codegen_compile_to_file$mh`.invokeExact(cg,name,) as Boolean

public fun lto_codegen_optimize(cg: lto_code_gen_t): lto_bool_t =
    `lto_codegen_optimize$mh`.invokeExact(cg,) as Boolean

public fun lto_codegen_compile_optimized(cg: lto_code_gen_t, length: Pointer<ULong>): Pointer<Unit>
    = `lto_codegen_compile_optimized$mh`.invokeExact(cg,length,) as MemorySegment

public fun lto_api_version(): UInt = (`lto_api_version$mh`.invokeExact() as Int).toUInt()

public fun lto_set_debug_options(options: Pointer<Pointer<Byte>>, number: Int): Unit =
    `lto_set_debug_options$mh`.invokeExact(options,number,) as Unit

public fun lto_codegen_debug_options(cg: lto_code_gen_t, `$p1`: Pointer<Byte>): Unit =
    `lto_codegen_debug_options$mh`.invokeExact(cg,`$p1`,) as Unit

public fun lto_codegen_debug_options_array(
  cg: lto_code_gen_t,
  `$p1`: Pointer<Byte>,
  number: Int,
): Unit = `lto_codegen_debug_options_array$mh`.invokeExact(cg,`$p1`,number,) as Unit

public fun lto_initialize_disassembler(): Unit = `lto_initialize_disassembler$mh`.invokeExact() as
    Unit

public fun lto_codegen_set_should_internalize(cg: lto_code_gen_t, ShouldInternalize: lto_bool_t):
    Unit = `lto_codegen_set_should_internalize$mh`.invokeExact(cg,ShouldInternalize,) as Unit

public fun lto_codegen_set_should_embed_uselists(cg: lto_code_gen_t,
    ShouldEmbedUselists: lto_bool_t): Unit =
    `lto_codegen_set_should_embed_uselists$mh`.invokeExact(cg,ShouldEmbedUselists,) as Unit

public fun lto_input_create(
  buffer: Pointer<Unit>,
  buffer_size: ULong,
  path: Pointer<Byte>,
): lto_input_t = `lto_input_create$mh`.invokeExact(buffer,buffer_size.toLong(),path,) as
    MemorySegment

public fun lto_input_dispose(input: lto_input_t): Unit = `lto_input_dispose$mh`.invokeExact(input,)
    as Unit

public fun lto_input_get_num_dependent_libraries(input: lto_input_t): UInt =
    (`lto_input_get_num_dependent_libraries$mh`.invokeExact(input,) as Int).toUInt()

public fun lto_input_get_dependent_library(
  input: lto_input_t,
  index: ULong,
  size: Pointer<ULong>,
): Pointer<Byte> = `lto_input_get_dependent_library$mh`.invokeExact(input,index.toLong(),size,) as
    MemorySegment

public fun lto_runtime_lib_symbols_list(size: Pointer<ULong>): Pointer<Pointer<Byte>> =
    `lto_runtime_lib_symbols_list$mh`.invokeExact(size,) as MemorySegment

public fun lto_module_is_thinlto(mod: lto_module_t): lto_bool_t =
    `lto_module_is_thinlto$mh`.invokeExact(mod,) as Boolean

public fun LLVMLinkModules2(Dest: LLVMModuleRef, Src: LLVMModuleRef): LLVMBool =
    `LLVMLinkModules2$mh`.invokeExact(Dest,Src,) as Int
