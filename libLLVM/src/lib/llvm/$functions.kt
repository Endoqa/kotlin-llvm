// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.foreign.MemorySegment

public fun LLVMInstallFatalErrorHandler(Handler: LLVMFatalErrorHandler): Unit =
    `LLVMInstallFatalErrorHandler$mh`.invokeExact(Handler) as Unit

public fun LLVMResetFatalErrorHandler(): Unit = `LLVMResetFatalErrorHandler$mh`.invokeExact() as Unit

public fun LLVMEnablePrettyStackTrace(): Unit = `LLVMEnablePrettyStackTrace$mh`.invokeExact() as Unit

public fun LLVMShutdown(): Unit = `LLVMShutdown$mh`.invokeExact() as Unit

public fun LLVMGetVersion(
    Major: Pointer<UInt>,
    Minor: Pointer<UInt>,
    Patch: Pointer<UInt>,
): Unit = `LLVMGetVersion$mh`.invokeExact(Major, Minor, Patch) as Unit

public fun LLVMCreateMessage(Message: Pointer<Byte>): Pointer<Byte> =
    `LLVMCreateMessage$mh`.invokeExact(Message) as MemorySegment

public fun LLVMDisposeMessage(Message: Pointer<Byte>): Unit = `LLVMDisposeMessage$mh`.invokeExact(Message) as Unit

public fun LLVMContextCreate(): LLVMContextRef = `LLVMContextCreate$mh`.invokeExact() as MemorySegment

public fun LLVMGetGlobalContext(): LLVMContextRef = `LLVMGetGlobalContext$mh`.invokeExact() as MemorySegment

public fun LLVMContextSetDiagnosticHandler(
    C: LLVMContextRef,
    Handler: LLVMDiagnosticHandler,
    DiagnosticContext: Pointer<Unit>,
): Unit = `LLVMContextSetDiagnosticHandler$mh`.invokeExact(C, Handler, DiagnosticContext) as Unit

public fun LLVMContextGetDiagnosticHandler(C: LLVMContextRef): LLVMDiagnosticHandler =
    `LLVMContextGetDiagnosticHandler$mh`.invokeExact(C) as MemorySegment

public fun LLVMContextGetDiagnosticContext(C: LLVMContextRef): Pointer<Unit> =
    `LLVMContextGetDiagnosticContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMContextSetYieldCallback(
    C: LLVMContextRef,
    Callback: LLVMYieldCallback,
    OpaqueHandle: Pointer<Unit>,
): Unit = `LLVMContextSetYieldCallback$mh`.invokeExact(C, Callback, OpaqueHandle) as Unit

public fun LLVMContextShouldDiscardValueNames(C: LLVMContextRef): LLVMBool =
    `LLVMContextShouldDiscardValueNames$mh`.invokeExact(C) as Int

public fun LLVMContextSetDiscardValueNames(C: LLVMContextRef, Discard: LLVMBool): Unit =
    `LLVMContextSetDiscardValueNames$mh`.invokeExact(C, Discard) as Unit

public fun LLVMContextDispose(C: LLVMContextRef): Unit = `LLVMContextDispose$mh`.invokeExact(C) as Unit

public fun LLVMGetDiagInfoDescription(DI: LLVMDiagnosticInfoRef): Pointer<Byte> =
    `LLVMGetDiagInfoDescription$mh`.invokeExact(DI) as MemorySegment

public fun LLVMGetDiagInfoSeverity(DI: LLVMDiagnosticInfoRef): LLVMDiagnosticSeverity =
    LLVMDiagnosticSeverity.fromInt(`LLVMGetDiagInfoSeverity$mh`.invokeExact(DI) as Int)

public fun LLVMGetMDKindIDInContext(
    C: LLVMContextRef,
    Name: Pointer<Byte>,
    SLen: UInt,
): UInt = (`LLVMGetMDKindIDInContext$mh`.invokeExact(C, Name, SLen.toInt()) as Int).toUInt()

public fun LLVMGetMDKindID(Name: Pointer<Byte>, SLen: UInt): UInt =
    (`LLVMGetMDKindID$mh`.invokeExact(Name, SLen.toInt()) as Int).toUInt()

public fun LLVMGetSyncScopeID(
    C: LLVMContextRef,
    Name: Pointer<Byte>,
    SLen: ULong,
): UInt = (`LLVMGetSyncScopeID$mh`.invokeExact(C, Name, SLen.toLong()) as Int).toUInt()

public fun LLVMGetEnumAttributeKindForName(Name: Pointer<Byte>, SLen: ULong): UInt =
    (`LLVMGetEnumAttributeKindForName$mh`.invokeExact(Name, SLen.toLong()) as Int).toUInt()

public fun LLVMGetLastEnumAttributeKind(): UInt = (`LLVMGetLastEnumAttributeKind$mh`.invokeExact() as Int).toUInt()

public fun LLVMCreateEnumAttribute(
    C: LLVMContextRef,
    KindID: UInt,
    Val: ULong,
): LLVMAttributeRef = `LLVMCreateEnumAttribute$mh`.invokeExact(C, KindID.toInt(), Val.toLong()) as MemorySegment

public fun LLVMGetEnumAttributeKind(A: LLVMAttributeRef): UInt =
    (`LLVMGetEnumAttributeKind$mh`.invokeExact(A) as Int).toUInt()

public fun LLVMGetEnumAttributeValue(A: LLVMAttributeRef): ULong =
    (`LLVMGetEnumAttributeValue$mh`.invokeExact(A) as Long).toULong()

public fun LLVMCreateTypeAttribute(
    C: LLVMContextRef,
    KindID: UInt,
    type_ref: LLVMTypeRef,
): LLVMAttributeRef = `LLVMCreateTypeAttribute$mh`.invokeExact(C, KindID.toInt(), type_ref) as MemorySegment

public fun LLVMGetTypeAttributeValue(A: LLVMAttributeRef): LLVMTypeRef =
    `LLVMGetTypeAttributeValue$mh`.invokeExact(A) as MemorySegment

public fun LLVMCreateConstantRangeAttribute(
    C: LLVMContextRef,
    KindID: UInt,
    NumBits: UInt,
    LowerWords: NativeArray<ULong>,
    UpperWords: NativeArray<ULong>,
): LLVMAttributeRef = `LLVMCreateConstantRangeAttribute$mh`.invokeExact(
    C,
    KindID.toInt(),
    NumBits.toInt(),
    LowerWords,
    UpperWords,
) as MemorySegment

public fun LLVMCreateStringAttribute(
    C: LLVMContextRef,
    K: Pointer<Byte>,
    KLength: UInt,
    V: Pointer<Byte>,
    VLength: UInt,
): LLVMAttributeRef =
    `LLVMCreateStringAttribute$mh`.invokeExact(C, K, KLength.toInt(), V, VLength.toInt()) as MemorySegment

public fun LLVMGetStringAttributeKind(A: LLVMAttributeRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetStringAttributeKind$mh`.invokeExact(A, Length) as MemorySegment

public fun LLVMGetStringAttributeValue(A: LLVMAttributeRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetStringAttributeValue$mh`.invokeExact(A, Length) as MemorySegment

public fun LLVMIsEnumAttribute(A: LLVMAttributeRef): LLVMBool = `LLVMIsEnumAttribute$mh`.invokeExact(A) as Int

public fun LLVMIsStringAttribute(A: LLVMAttributeRef): LLVMBool = `LLVMIsStringAttribute$mh`.invokeExact(A) as Int

public fun LLVMIsTypeAttribute(A: LLVMAttributeRef): LLVMBool = `LLVMIsTypeAttribute$mh`.invokeExact(A) as Int

public fun LLVMGetTypeByName2(C: LLVMContextRef, Name: Pointer<Byte>): LLVMTypeRef =
    `LLVMGetTypeByName2$mh`.invokeExact(C, Name) as MemorySegment

public fun LLVMModuleCreateWithName(ModuleID: Pointer<Byte>): LLVMModuleRef =
    `LLVMModuleCreateWithName$mh`.invokeExact(ModuleID) as MemorySegment

public fun LLVMModuleCreateWithNameInContext(ModuleID: Pointer<Byte>, C: LLVMContextRef): LLVMModuleRef =
    `LLVMModuleCreateWithNameInContext$mh`.invokeExact(ModuleID, C) as MemorySegment

public fun LLVMCloneModule(M: LLVMModuleRef): LLVMModuleRef = `LLVMCloneModule$mh`.invokeExact(M) as MemorySegment

public fun LLVMDisposeModule(M: LLVMModuleRef): Unit = `LLVMDisposeModule$mh`.invokeExact(M) as Unit

public fun LLVMIsNewDbgInfoFormat(M: LLVMModuleRef): LLVMBool = `LLVMIsNewDbgInfoFormat$mh`.invokeExact(M) as Int

public fun LLVMSetIsNewDbgInfoFormat(M: LLVMModuleRef, UseNewFormat: LLVMBool): Unit =
    `LLVMSetIsNewDbgInfoFormat$mh`.invokeExact(M, UseNewFormat) as Unit

public fun LLVMGetModuleIdentifier(M: LLVMModuleRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetModuleIdentifier$mh`.invokeExact(M, Len) as MemorySegment

public fun LLVMSetModuleIdentifier(
    M: LLVMModuleRef,
    Ident: Pointer<Byte>,
    Len: ULong,
): Unit = `LLVMSetModuleIdentifier$mh`.invokeExact(M, Ident, Len.toLong()) as Unit

public fun LLVMGetSourceFileName(M: LLVMModuleRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetSourceFileName$mh`.invokeExact(M, Len) as MemorySegment

public fun LLVMSetSourceFileName(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    Len: ULong,
): Unit = `LLVMSetSourceFileName$mh`.invokeExact(M, Name, Len.toLong()) as Unit

public fun LLVMGetDataLayoutStr(M: LLVMModuleRef): Pointer<Byte> =
    `LLVMGetDataLayoutStr$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetDataLayout(M: LLVMModuleRef): Pointer<Byte> = `LLVMGetDataLayout$mh`.invokeExact(M) as MemorySegment

public fun LLVMSetDataLayout(M: LLVMModuleRef, DataLayoutStr: Pointer<Byte>): Unit =
    `LLVMSetDataLayout$mh`.invokeExact(M, DataLayoutStr) as Unit

public fun LLVMGetTarget(M: LLVMModuleRef): Pointer<Byte> = `LLVMGetTarget$mh`.invokeExact(M) as MemorySegment

public fun LLVMSetTarget(M: LLVMModuleRef, Triple: Pointer<Byte>): Unit =
    `LLVMSetTarget$mh`.invokeExact(M, Triple) as Unit

public fun LLVMCopyModuleFlagsMetadata(M: LLVMModuleRef, Len: Pointer<ULong>): Pointer<LLVMModuleFlagEntry> =
    `LLVMCopyModuleFlagsMetadata$mh`.invokeExact(M, Len) as MemorySegment

public fun LLVMDisposeModuleFlagsMetadata(Entries: Pointer<LLVMModuleFlagEntry>): Unit =
    `LLVMDisposeModuleFlagsMetadata$mh`.invokeExact(Entries) as Unit

public fun LLVMModuleFlagEntriesGetFlagBehavior(
    Entries: Pointer<LLVMModuleFlagEntry>,
    Index: UInt
): LLVMModuleFlagBehavior = LLVMModuleFlagBehavior.fromInt(
    `LLVMModuleFlagEntriesGetFlagBehavior$mh`.invokeExact(
        Entries,
        Index.toInt(),
    ) as Int
)

public fun LLVMModuleFlagEntriesGetKey(
    Entries: Pointer<LLVMModuleFlagEntry>,
    Index: UInt,
    Len: Pointer<ULong>,
): Pointer<Byte> = `LLVMModuleFlagEntriesGetKey$mh`.invokeExact(Entries, Index.toInt(), Len) as MemorySegment

public fun LLVMModuleFlagEntriesGetMetadata(Entries: Pointer<LLVMModuleFlagEntry>, Index: UInt): LLVMMetadataRef =
    `LLVMModuleFlagEntriesGetMetadata$mh`.invokeExact(Entries, Index.toInt()) as MemorySegment

public fun LLVMGetModuleFlag(
    M: LLVMModuleRef,
    Key: Pointer<Byte>,
    KeyLen: ULong,
): LLVMMetadataRef = `LLVMGetModuleFlag$mh`.invokeExact(M, Key, KeyLen.toLong()) as MemorySegment

public fun LLVMAddModuleFlag(
    M: LLVMModuleRef,
    Behavior: LLVMModuleFlagBehavior,
    Key: Pointer<Byte>,
    KeyLen: ULong,
    Val: LLVMMetadataRef,
): Unit = `LLVMAddModuleFlag$mh`.invokeExact(M, Behavior.value, Key, KeyLen.toLong(), Val) as Unit

public fun LLVMDumpModule(M: LLVMModuleRef): Unit = `LLVMDumpModule$mh`.invokeExact(M) as Unit

public fun LLVMPrintModuleToFile(
    M: LLVMModuleRef,
    Filename: Pointer<Byte>,
    ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMPrintModuleToFile$mh`.invokeExact(M, Filename, ErrorMessage) as Int

public fun LLVMPrintModuleToString(M: LLVMModuleRef): Pointer<Byte> =
    `LLVMPrintModuleToString$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetModuleInlineAsm(M: LLVMModuleRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetModuleInlineAsm$mh`.invokeExact(M, Len) as MemorySegment

public fun LLVMSetModuleInlineAsm2(
    M: LLVMModuleRef,
    Asm: Pointer<Byte>,
    Len: ULong,
): Unit = `LLVMSetModuleInlineAsm2$mh`.invokeExact(M, Asm, Len.toLong()) as Unit

public fun LLVMAppendModuleInlineAsm(
    M: LLVMModuleRef,
    Asm: Pointer<Byte>,
    Len: ULong,
): Unit = `LLVMAppendModuleInlineAsm$mh`.invokeExact(M, Asm, Len.toLong()) as Unit

public fun LLVMGetInlineAsm(
    Ty: LLVMTypeRef,
    AsmString: Pointer<Byte>,
    AsmStringSize: ULong,
    Constraints: Pointer<Byte>,
    ConstraintsSize: ULong,
    HasSideEffects: LLVMBool,
    IsAlignStack: LLVMBool,
    Dialect: LLVMInlineAsmDialect,
    CanThrow: LLVMBool,
): LLVMValueRef = `LLVMGetInlineAsm$mh`.invokeExact(
    Ty,
    AsmString,
    AsmStringSize.toLong(),
    Constraints,
    ConstraintsSize.toLong(),
    HasSideEffects,
    IsAlignStack,
    Dialect.value,
    CanThrow,
) as MemorySegment

public fun LLVMGetInlineAsmAsmString(InlineAsmVal: LLVMValueRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetInlineAsmAsmString$mh`.invokeExact(InlineAsmVal, Len) as MemorySegment

public fun LLVMGetInlineAsmConstraintString(InlineAsmVal: LLVMValueRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetInlineAsmConstraintString$mh`.invokeExact(InlineAsmVal, Len) as MemorySegment

public fun LLVMGetInlineAsmDialect(InlineAsmVal: LLVMValueRef): LLVMInlineAsmDialect =
    LLVMInlineAsmDialect.fromInt(`LLVMGetInlineAsmDialect$mh`.invokeExact(InlineAsmVal) as Int)

public fun LLVMGetInlineAsmFunctionType(InlineAsmVal: LLVMValueRef): LLVMTypeRef =
    `LLVMGetInlineAsmFunctionType$mh`.invokeExact(InlineAsmVal) as MemorySegment

public fun LLVMGetInlineAsmHasSideEffects(InlineAsmVal: LLVMValueRef): LLVMBool =
    `LLVMGetInlineAsmHasSideEffects$mh`.invokeExact(InlineAsmVal) as Int

public fun LLVMGetInlineAsmNeedsAlignedStack(InlineAsmVal: LLVMValueRef): LLVMBool =
    `LLVMGetInlineAsmNeedsAlignedStack$mh`.invokeExact(InlineAsmVal) as Int

public fun LLVMGetInlineAsmCanUnwind(InlineAsmVal: LLVMValueRef): LLVMBool =
    `LLVMGetInlineAsmCanUnwind$mh`.invokeExact(InlineAsmVal) as Int

public fun LLVMGetModuleContext(M: LLVMModuleRef): LLVMContextRef =
    `LLVMGetModuleContext$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetTypeByName(M: LLVMModuleRef, Name: Pointer<Byte>): LLVMTypeRef =
    `LLVMGetTypeByName$mh`.invokeExact(M, Name) as MemorySegment

public fun LLVMGetFirstNamedMetadata(M: LLVMModuleRef): LLVMNamedMDNodeRef =
    `LLVMGetFirstNamedMetadata$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetLastNamedMetadata(M: LLVMModuleRef): LLVMNamedMDNodeRef =
    `LLVMGetLastNamedMetadata$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetNextNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef =
    `LLVMGetNextNamedMetadata$mh`.invokeExact(NamedMDNode) as MemorySegment

public fun LLVMGetPreviousNamedMetadata(NamedMDNode: LLVMNamedMDNodeRef): LLVMNamedMDNodeRef =
    `LLVMGetPreviousNamedMetadata$mh`.invokeExact(NamedMDNode) as MemorySegment

public fun LLVMGetNamedMetadata(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    NameLen: ULong,
): LLVMNamedMDNodeRef = `LLVMGetNamedMetadata$mh`.invokeExact(M, Name, NameLen.toLong()) as MemorySegment

public fun LLVMGetOrInsertNamedMetadata(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    NameLen: ULong,
): LLVMNamedMDNodeRef = `LLVMGetOrInsertNamedMetadata$mh`.invokeExact(M, Name, NameLen.toLong()) as MemorySegment

public fun LLVMGetNamedMetadataName(NamedMD: LLVMNamedMDNodeRef, NameLen: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetNamedMetadataName$mh`.invokeExact(NamedMD, NameLen) as MemorySegment

public fun LLVMGetNamedMetadataNumOperands(M: LLVMModuleRef, Name: Pointer<Byte>): UInt =
    (`LLVMGetNamedMetadataNumOperands$mh`.invokeExact(M, Name) as Int).toUInt()

public fun LLVMGetNamedMetadataOperands(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    Dest: Pointer<LLVMValueRef>,
): Unit = `LLVMGetNamedMetadataOperands$mh`.invokeExact(M, Name, Dest) as Unit

public fun LLVMAddNamedMetadataOperand(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    Val: LLVMValueRef,
): Unit = `LLVMAddNamedMetadataOperand$mh`.invokeExact(M, Name, Val) as Unit

public fun LLVMGetDebugLocDirectory(Val: LLVMValueRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetDebugLocDirectory$mh`.invokeExact(Val, Length) as MemorySegment

public fun LLVMGetDebugLocFilename(Val: LLVMValueRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetDebugLocFilename$mh`.invokeExact(Val, Length) as MemorySegment

public fun LLVMGetDebugLocLine(Val: LLVMValueRef): UInt = (`LLVMGetDebugLocLine$mh`.invokeExact(Val) as Int).toUInt()

public fun LLVMGetDebugLocColumn(Val: LLVMValueRef): UInt =
    (`LLVMGetDebugLocColumn$mh`.invokeExact(Val) as Int).toUInt()

public fun LLVMAddFunction(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    FunctionTy: LLVMTypeRef,
): LLVMValueRef = `LLVMAddFunction$mh`.invokeExact(M, Name, FunctionTy) as MemorySegment

public fun LLVMGetNamedFunction(M: LLVMModuleRef, Name: Pointer<Byte>): LLVMValueRef =
    `LLVMGetNamedFunction$mh`.invokeExact(M, Name) as MemorySegment

public fun LLVMGetNamedFunctionWithLength(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    Length: ULong,
): LLVMValueRef = `LLVMGetNamedFunctionWithLength$mh`.invokeExact(M, Name, Length.toLong()) as MemorySegment

public fun LLVMGetFirstFunction(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetFirstFunction$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetLastFunction(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetLastFunction$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetNextFunction(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextFunction$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMGetPreviousFunction(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousFunction$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMSetModuleInlineAsm(M: LLVMModuleRef, Asm: Pointer<Byte>): Unit =
    `LLVMSetModuleInlineAsm$mh`.invokeExact(M, Asm) as Unit

public fun LLVMGetTypeKind(Ty: LLVMTypeRef): LLVMTypeKind =
    LLVMTypeKind.fromInt(`LLVMGetTypeKind$mh`.invokeExact(Ty) as Int)

public fun LLVMTypeIsSized(Ty: LLVMTypeRef): LLVMBool = `LLVMTypeIsSized$mh`.invokeExact(Ty) as Int

public fun LLVMGetTypeContext(Ty: LLVMTypeRef): LLVMContextRef =
    `LLVMGetTypeContext$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMDumpType(Val: LLVMTypeRef): Unit = `LLVMDumpType$mh`.invokeExact(Val) as Unit

public fun LLVMPrintTypeToString(Val: LLVMTypeRef): Pointer<Byte> =
    `LLVMPrintTypeToString$mh`.invokeExact(Val) as MemorySegment

public fun LLVMInt1TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt1TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMInt8TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt8TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMInt16TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt16TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMInt32TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt32TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMInt64TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt64TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMInt128TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMInt128TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMIntTypeInContext(C: LLVMContextRef, NumBits: UInt): LLVMTypeRef =
    `LLVMIntTypeInContext$mh`.invokeExact(C, NumBits.toInt()) as MemorySegment

public fun LLVMInt1Type(): LLVMTypeRef = `LLVMInt1Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt8Type(): LLVMTypeRef = `LLVMInt8Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt16Type(): LLVMTypeRef = `LLVMInt16Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt32Type(): LLVMTypeRef = `LLVMInt32Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt64Type(): LLVMTypeRef = `LLVMInt64Type$mh`.invokeExact() as MemorySegment

public fun LLVMInt128Type(): LLVMTypeRef = `LLVMInt128Type$mh`.invokeExact() as MemorySegment

public fun LLVMIntType(NumBits: UInt): LLVMTypeRef = `LLVMIntType$mh`.invokeExact(NumBits.toInt()) as MemorySegment

public fun LLVMGetIntTypeWidth(IntegerTy: LLVMTypeRef): UInt =
    (`LLVMGetIntTypeWidth$mh`.invokeExact(IntegerTy) as Int).toUInt()

public fun LLVMHalfTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMHalfTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMBFloatTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMBFloatTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMFloatTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMFloatTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMDoubleTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMDoubleTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMX86FP80TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMX86FP80TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMFP128TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMFP128TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMPPCFP128TypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMPPCFP128TypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMHalfType(): LLVMTypeRef = `LLVMHalfType$mh`.invokeExact() as MemorySegment

public fun LLVMBFloatType(): LLVMTypeRef = `LLVMBFloatType$mh`.invokeExact() as MemorySegment

public fun LLVMFloatType(): LLVMTypeRef = `LLVMFloatType$mh`.invokeExact() as MemorySegment

public fun LLVMDoubleType(): LLVMTypeRef = `LLVMDoubleType$mh`.invokeExact() as MemorySegment

public fun LLVMX86FP80Type(): LLVMTypeRef = `LLVMX86FP80Type$mh`.invokeExact() as MemorySegment

public fun LLVMFP128Type(): LLVMTypeRef = `LLVMFP128Type$mh`.invokeExact() as MemorySegment

public fun LLVMPPCFP128Type(): LLVMTypeRef = `LLVMPPCFP128Type$mh`.invokeExact() as MemorySegment

public fun LLVMFunctionType(
    ReturnType: LLVMTypeRef,
    ParamTypes: Pointer<LLVMTypeRef>,
    ParamCount: UInt,
    IsVarArg: LLVMBool,
): LLVMTypeRef =
    `LLVMFunctionType$mh`.invokeExact(ReturnType, ParamTypes, ParamCount.toInt(), IsVarArg) as MemorySegment

public fun LLVMIsFunctionVarArg(FunctionTy: LLVMTypeRef): LLVMBool =
    `LLVMIsFunctionVarArg$mh`.invokeExact(FunctionTy) as Int

public fun LLVMGetReturnType(FunctionTy: LLVMTypeRef): LLVMTypeRef =
    `LLVMGetReturnType$mh`.invokeExact(FunctionTy) as MemorySegment

public fun LLVMCountParamTypes(FunctionTy: LLVMTypeRef): UInt =
    (`LLVMCountParamTypes$mh`.invokeExact(FunctionTy) as Int).toUInt()

public fun LLVMGetParamTypes(FunctionTy: LLVMTypeRef, Dest: Pointer<LLVMTypeRef>): Unit =
    `LLVMGetParamTypes$mh`.invokeExact(FunctionTy, Dest) as Unit

public fun LLVMStructTypeInContext(
    C: LLVMContextRef,
    ElementTypes: Pointer<LLVMTypeRef>,
    ElementCount: UInt,
    Packed: LLVMBool,
): LLVMTypeRef =
    `LLVMStructTypeInContext$mh`.invokeExact(C, ElementTypes, ElementCount.toInt(), Packed) as MemorySegment

public fun LLVMStructType(
    ElementTypes: Pointer<LLVMTypeRef>,
    ElementCount: UInt,
    Packed: LLVMBool,
): LLVMTypeRef = `LLVMStructType$mh`.invokeExact(ElementTypes, ElementCount.toInt(), Packed) as MemorySegment

public fun LLVMStructCreateNamed(C: LLVMContextRef, Name: Pointer<Byte>): LLVMTypeRef =
    `LLVMStructCreateNamed$mh`.invokeExact(C, Name) as MemorySegment

public fun LLVMGetStructName(Ty: LLVMTypeRef): Pointer<Byte> = `LLVMGetStructName$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMStructSetBody(
    StructTy: LLVMTypeRef,
    ElementTypes: Pointer<LLVMTypeRef>,
    ElementCount: UInt,
    Packed: LLVMBool,
): Unit = `LLVMStructSetBody$mh`.invokeExact(StructTy, ElementTypes, ElementCount.toInt(), Packed) as Unit

public fun LLVMCountStructElementTypes(StructTy: LLVMTypeRef): UInt =
    (`LLVMCountStructElementTypes$mh`.invokeExact(StructTy) as Int).toUInt()

public fun LLVMGetStructElementTypes(StructTy: LLVMTypeRef, Dest: Pointer<LLVMTypeRef>): Unit =
    `LLVMGetStructElementTypes$mh`.invokeExact(StructTy, Dest) as Unit

public fun LLVMStructGetTypeAtIndex(StructTy: LLVMTypeRef, i: UInt): LLVMTypeRef =
    `LLVMStructGetTypeAtIndex$mh`.invokeExact(StructTy, i.toInt()) as MemorySegment

public fun LLVMIsPackedStruct(StructTy: LLVMTypeRef): LLVMBool = `LLVMIsPackedStruct$mh`.invokeExact(StructTy) as Int

public fun LLVMIsOpaqueStruct(StructTy: LLVMTypeRef): LLVMBool = `LLVMIsOpaqueStruct$mh`.invokeExact(StructTy) as Int

public fun LLVMIsLiteralStruct(StructTy: LLVMTypeRef): LLVMBool = `LLVMIsLiteralStruct$mh`.invokeExact(StructTy) as Int

public fun LLVMGetElementType(Ty: LLVMTypeRef): LLVMTypeRef = `LLVMGetElementType$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMGetSubtypes(Tp: LLVMTypeRef, Arr: Pointer<LLVMTypeRef>): Unit =
    `LLVMGetSubtypes$mh`.invokeExact(Tp, Arr) as Unit

public fun LLVMGetNumContainedTypes(Tp: LLVMTypeRef): UInt =
    (`LLVMGetNumContainedTypes$mh`.invokeExact(Tp) as Int).toUInt()

public fun LLVMArrayType(ElementType: LLVMTypeRef, ElementCount: UInt): LLVMTypeRef =
    `LLVMArrayType$mh`.invokeExact(ElementType, ElementCount.toInt()) as MemorySegment

public fun LLVMArrayType2(ElementType: LLVMTypeRef, ElementCount: ULong): LLVMTypeRef =
    `LLVMArrayType2$mh`.invokeExact(ElementType, ElementCount.toLong()) as MemorySegment

public fun LLVMGetArrayLength(ArrayTy: LLVMTypeRef): UInt =
    (`LLVMGetArrayLength$mh`.invokeExact(ArrayTy) as Int).toUInt()

public fun LLVMGetArrayLength2(ArrayTy: LLVMTypeRef): ULong =
    (`LLVMGetArrayLength2$mh`.invokeExact(ArrayTy) as Long).toULong()

public fun LLVMPointerType(ElementType: LLVMTypeRef, AddressSpace: UInt): LLVMTypeRef =
    `LLVMPointerType$mh`.invokeExact(ElementType, AddressSpace.toInt()) as MemorySegment

public fun LLVMPointerTypeIsOpaque(Ty: LLVMTypeRef): LLVMBool = `LLVMPointerTypeIsOpaque$mh`.invokeExact(Ty) as Int

public fun LLVMPointerTypeInContext(C: LLVMContextRef, AddressSpace: UInt): LLVMTypeRef =
    `LLVMPointerTypeInContext$mh`.invokeExact(C, AddressSpace.toInt()) as MemorySegment

public fun LLVMGetPointerAddressSpace(PointerTy: LLVMTypeRef): UInt =
    (`LLVMGetPointerAddressSpace$mh`.invokeExact(PointerTy) as Int).toUInt()

public fun LLVMVectorType(ElementType: LLVMTypeRef, ElementCount: UInt): LLVMTypeRef =
    `LLVMVectorType$mh`.invokeExact(ElementType, ElementCount.toInt()) as MemorySegment

public fun LLVMScalableVectorType(ElementType: LLVMTypeRef, ElementCount: UInt): LLVMTypeRef =
    `LLVMScalableVectorType$mh`.invokeExact(ElementType, ElementCount.toInt()) as MemorySegment

public fun LLVMGetVectorSize(VectorTy: LLVMTypeRef): UInt =
    (`LLVMGetVectorSize$mh`.invokeExact(VectorTy) as Int).toUInt()

public fun LLVMGetConstantPtrAuthPointer(PtrAuth: LLVMValueRef): LLVMValueRef =
    `LLVMGetConstantPtrAuthPointer$mh`.invokeExact(PtrAuth) as MemorySegment

public fun LLVMGetConstantPtrAuthKey(PtrAuth: LLVMValueRef): LLVMValueRef =
    `LLVMGetConstantPtrAuthKey$mh`.invokeExact(PtrAuth) as MemorySegment

public fun LLVMGetConstantPtrAuthDiscriminator(PtrAuth: LLVMValueRef): LLVMValueRef =
    `LLVMGetConstantPtrAuthDiscriminator$mh`.invokeExact(PtrAuth) as MemorySegment

public fun LLVMGetConstantPtrAuthAddrDiscriminator(PtrAuth: LLVMValueRef): LLVMValueRef =
    `LLVMGetConstantPtrAuthAddrDiscriminator$mh`.invokeExact(PtrAuth) as MemorySegment

public fun LLVMVoidTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMVoidTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMLabelTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMLabelTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMX86AMXTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMX86AMXTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMTokenTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMTokenTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMMetadataTypeInContext(C: LLVMContextRef): LLVMTypeRef =
    `LLVMMetadataTypeInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMVoidType(): LLVMTypeRef = `LLVMVoidType$mh`.invokeExact() as MemorySegment

public fun LLVMLabelType(): LLVMTypeRef = `LLVMLabelType$mh`.invokeExact() as MemorySegment

public fun LLVMX86AMXType(): LLVMTypeRef = `LLVMX86AMXType$mh`.invokeExact() as MemorySegment

public fun LLVMTargetExtTypeInContext(
    C: LLVMContextRef,
    Name: Pointer<Byte>,
    TypeParams: Pointer<LLVMTypeRef>,
    TypeParamCount: UInt,
    IntParams: Pointer<UInt>,
    IntParamCount: UInt,
): LLVMTypeRef = `LLVMTargetExtTypeInContext$mh`.invokeExact(
    C,
    Name,
    TypeParams,
    TypeParamCount.toInt(),
    IntParams,
    IntParamCount.toInt(),
) as MemorySegment

public fun LLVMGetTargetExtTypeName(TargetExtTy: LLVMTypeRef): Pointer<Byte> =
    `LLVMGetTargetExtTypeName$mh`.invokeExact(TargetExtTy) as MemorySegment

public fun LLVMGetTargetExtTypeNumTypeParams(TargetExtTy: LLVMTypeRef): UInt =
    (`LLVMGetTargetExtTypeNumTypeParams$mh`.invokeExact(TargetExtTy) as Int).toUInt()

public fun LLVMGetTargetExtTypeTypeParam(TargetExtTy: LLVMTypeRef, Idx: UInt): LLVMTypeRef =
    `LLVMGetTargetExtTypeTypeParam$mh`.invokeExact(TargetExtTy, Idx.toInt()) as MemorySegment

public fun LLVMGetTargetExtTypeNumIntParams(TargetExtTy: LLVMTypeRef): UInt =
    (`LLVMGetTargetExtTypeNumIntParams$mh`.invokeExact(TargetExtTy) as Int).toUInt()

public fun LLVMGetTargetExtTypeIntParam(TargetExtTy: LLVMTypeRef, Idx: UInt): UInt =
    (`LLVMGetTargetExtTypeIntParam$mh`.invokeExact(TargetExtTy, Idx.toInt()) as Int).toUInt()

public fun LLVMTypeOf(Val: LLVMValueRef): LLVMTypeRef = `LLVMTypeOf$mh`.invokeExact(Val) as MemorySegment

public fun LLVMGetValueKind(Val: LLVMValueRef): LLVMValueKind =
    LLVMValueKind.fromInt(`LLVMGetValueKind$mh`.invokeExact(Val) as Int)

public fun LLVMGetValueName2(Val: LLVMValueRef, Length: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetValueName2$mh`.invokeExact(Val, Length) as MemorySegment

public fun LLVMSetValueName2(
    Val: LLVMValueRef,
    Name: Pointer<Byte>,
    NameLen: ULong,
): Unit = `LLVMSetValueName2$mh`.invokeExact(Val, Name, NameLen.toLong()) as Unit

public fun LLVMDumpValue(Val: LLVMValueRef): Unit = `LLVMDumpValue$mh`.invokeExact(Val) as Unit

public fun LLVMPrintValueToString(Val: LLVMValueRef): Pointer<Byte> =
    `LLVMPrintValueToString$mh`.invokeExact(Val) as MemorySegment

public fun LLVMGetValueContext(Val: LLVMValueRef): LLVMContextRef =
    `LLVMGetValueContext$mh`.invokeExact(Val) as MemorySegment

public fun LLVMPrintDbgRecordToString(Record: LLVMDbgRecordRef): Pointer<Byte> =
    `LLVMPrintDbgRecordToString$mh`.invokeExact(Record) as MemorySegment

public fun LLVMReplaceAllUsesWith(OldVal: LLVMValueRef, NewVal: LLVMValueRef): Unit =
    `LLVMReplaceAllUsesWith$mh`.invokeExact(OldVal, NewVal) as Unit

public fun LLVMIsConstant(Val: LLVMValueRef): LLVMBool = `LLVMIsConstant$mh`.invokeExact(Val) as Int

public fun LLVMIsUndef(Val: LLVMValueRef): LLVMBool = `LLVMIsUndef$mh`.invokeExact(Val) as Int

public fun LLVMIsPoison(Val: LLVMValueRef): LLVMBool = `LLVMIsPoison$mh`.invokeExact(Val) as Int

public fun LLVMIsAArgument(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAArgument$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsABasicBlock(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABasicBlock$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAInlineAsm(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAInlineAsm$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAUser(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAUser$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstant(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAConstant$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsABlockAddress(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABlockAddress$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantAggregateZero(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantAggregateZero$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantArray(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantArray$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantDataSequential(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantDataSequential$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantDataArray(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantDataArray$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantDataVector(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantDataVector$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantExpr(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantExpr$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantFP(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantFP$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantInt(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantInt$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantPointerNull(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantPointerNull$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantStruct(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantStruct$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantTokenNone(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantTokenNone$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantVector(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantVector$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAConstantPtrAuth(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAConstantPtrAuth$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAGlobalValue(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalValue$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAGlobalAlias(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalAlias$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAGlobalObject(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalObject$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFunction(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAFunction$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAGlobalVariable(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalVariable$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAGlobalIFunc(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGlobalIFunc$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAUndefValue(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUndefValue$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAPoisonValue(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAPoisonValue$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAInstruction(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInstruction$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAUnaryOperator(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUnaryOperator$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsABinaryOperator(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABinaryOperator$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACallInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsACallInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAIntrinsicInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAIntrinsicInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsADbgInfoIntrinsic(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgInfoIntrinsic$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsADbgVariableIntrinsic(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgVariableIntrinsic$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsADbgDeclareInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgDeclareInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsADbgLabelInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsADbgLabelInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAMemIntrinsic(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemIntrinsic$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAMemCpyInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemCpyInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAMemMoveInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemMoveInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAMemSetInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAMemSetInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACmpInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsACmpInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFCmpInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAFCmpInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAICmpInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAICmpInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAExtractElementInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAExtractElementInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAGetElementPtrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAGetElementPtrInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAInsertElementInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInsertElementInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAInsertValueInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInsertValueInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsALandingPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsALandingPadInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAPHINode(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAPHINode$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsASelectInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsASelectInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAShuffleVectorInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAShuffleVectorInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAStoreInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAStoreInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsABranchInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABranchInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAIndirectBrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAIndirectBrInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAInvokeInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAInvokeInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAReturnInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAReturnInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsASwitchInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsASwitchInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAUnreachableInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUnreachableInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAResumeInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAResumeInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACleanupReturnInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACleanupReturnInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACatchReturnInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACatchReturnInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACatchSwitchInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACatchSwitchInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACallBrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACallBrInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFuncletPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFuncletPadInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACatchPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACatchPadInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACleanupPadInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsACleanupPadInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAUnaryInstruction(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUnaryInstruction$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAAllocaInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAllocaInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsACastInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsACastInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAAddrSpaceCastInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAddrSpaceCastInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsABitCastInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsABitCastInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFPExtInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAFPExtInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFPToSIInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFPToSIInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFPToUIInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFPToUIInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFPTruncInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFPTruncInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAIntToPtrInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAIntToPtrInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAPtrToIntInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAPtrToIntInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsASExtInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsASExtInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsASIToFPInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsASIToFPInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsATruncInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsATruncInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAUIToFPInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAUIToFPInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAZExtInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAZExtInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAExtractValueInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAExtractValueInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsALoadInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsALoadInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAVAArgInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAVAArgInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFreezeInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAFreezeInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAAtomicCmpXchgInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAtomicCmpXchgInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAAtomicRMWInst(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAAtomicRMWInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAFenceInst(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAFenceInst$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAMDNode(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAMDNode$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAValueAsMetadata(Val: LLVMValueRef): LLVMValueRef =
    `LLVMIsAValueAsMetadata$mh`.invokeExact(Val) as MemorySegment

public fun LLVMIsAMDString(Val: LLVMValueRef): LLVMValueRef = `LLVMIsAMDString$mh`.invokeExact(Val) as MemorySegment

public fun LLVMGetValueName(Val: LLVMValueRef): Pointer<Byte> = `LLVMGetValueName$mh`.invokeExact(Val) as MemorySegment

public fun LLVMSetValueName(Val: LLVMValueRef, Name: Pointer<Byte>): Unit =
    `LLVMSetValueName$mh`.invokeExact(Val, Name) as Unit

public fun LLVMGetFirstUse(Val: LLVMValueRef): LLVMUseRef = `LLVMGetFirstUse$mh`.invokeExact(Val) as MemorySegment

public fun LLVMGetNextUse(U: LLVMUseRef): LLVMUseRef = `LLVMGetNextUse$mh`.invokeExact(U) as MemorySegment

public fun LLVMGetUser(U: LLVMUseRef): LLVMValueRef = `LLVMGetUser$mh`.invokeExact(U) as MemorySegment

public fun LLVMGetUsedValue(U: LLVMUseRef): LLVMValueRef = `LLVMGetUsedValue$mh`.invokeExact(U) as MemorySegment

public fun LLVMGetOperand(Val: LLVMValueRef, Index: UInt): LLVMValueRef =
    `LLVMGetOperand$mh`.invokeExact(Val, Index.toInt()) as MemorySegment

public fun LLVMGetOperandUse(Val: LLVMValueRef, Index: UInt): LLVMUseRef =
    `LLVMGetOperandUse$mh`.invokeExact(Val, Index.toInt()) as MemorySegment

public fun LLVMSetOperand(
    User: LLVMValueRef,
    Index: UInt,
    Val: LLVMValueRef,
): Unit = `LLVMSetOperand$mh`.invokeExact(User, Index.toInt(), Val) as Unit

public fun LLVMGetNumOperands(Val: LLVMValueRef): Int = `LLVMGetNumOperands$mh`.invokeExact(Val) as Int

public fun LLVMConstNull(Ty: LLVMTypeRef): LLVMValueRef = `LLVMConstNull$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMConstAllOnes(Ty: LLVMTypeRef): LLVMValueRef = `LLVMConstAllOnes$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMGetUndef(Ty: LLVMTypeRef): LLVMValueRef = `LLVMGetUndef$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMGetPoison(Ty: LLVMTypeRef): LLVMValueRef = `LLVMGetPoison$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMIsNull(Val: LLVMValueRef): LLVMBool = `LLVMIsNull$mh`.invokeExact(Val) as Int

public fun LLVMConstPointerNull(Ty: LLVMTypeRef): LLVMValueRef =
    `LLVMConstPointerNull$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMConstInt(
    IntTy: LLVMTypeRef,
    N: ULong,
    SignExtend: LLVMBool,
): LLVMValueRef = `LLVMConstInt$mh`.invokeExact(IntTy, N.toLong(), SignExtend) as MemorySegment

public fun LLVMConstIntOfArbitraryPrecision(
    IntTy: LLVMTypeRef,
    NumWords: UInt,
    Words: NativeArray<ULong>,
): LLVMValueRef = `LLVMConstIntOfArbitraryPrecision$mh`.invokeExact(IntTy, NumWords.toInt(), Words) as MemorySegment

public fun LLVMConstIntOfString(
    IntTy: LLVMTypeRef,
    Text: Pointer<Byte>,
    Radix: UByte,
): LLVMValueRef = `LLVMConstIntOfString$mh`.invokeExact(IntTy, Text, Radix.toByte()) as MemorySegment

public fun LLVMConstIntOfStringAndSize(
    IntTy: LLVMTypeRef,
    Text: Pointer<Byte>,
    SLen: UInt,
    Radix: UByte,
): LLVMValueRef =
    `LLVMConstIntOfStringAndSize$mh`.invokeExact(IntTy, Text, SLen.toInt(), Radix.toByte()) as MemorySegment

public fun LLVMConstReal(RealTy: LLVMTypeRef, N: Double): LLVMValueRef =
    `LLVMConstReal$mh`.invokeExact(RealTy, N) as MemorySegment

public fun LLVMConstRealOfString(RealTy: LLVMTypeRef, Text: Pointer<Byte>): LLVMValueRef =
    `LLVMConstRealOfString$mh`.invokeExact(RealTy, Text) as MemorySegment

public fun LLVMConstRealOfStringAndSize(
    RealTy: LLVMTypeRef,
    Text: Pointer<Byte>,
    SLen: UInt,
): LLVMValueRef = `LLVMConstRealOfStringAndSize$mh`.invokeExact(RealTy, Text, SLen.toInt()) as MemorySegment

public fun LLVMConstIntGetZExtValue(ConstantVal: LLVMValueRef): ULong =
    (`LLVMConstIntGetZExtValue$mh`.invokeExact(ConstantVal) as Long).toULong()

public fun LLVMConstIntGetSExtValue(ConstantVal: LLVMValueRef): Long =
    `LLVMConstIntGetSExtValue$mh`.invokeExact(ConstantVal) as Long

public fun LLVMConstRealGetDouble(ConstantVal: LLVMValueRef, losesInfo: Pointer<LLVMBool>): Double =
    `LLVMConstRealGetDouble$mh`.invokeExact(ConstantVal, losesInfo) as Double

public fun LLVMConstStringInContext(
    C: LLVMContextRef,
    Str: Pointer<Byte>,
    Length: UInt,
    DontNullTerminate: LLVMBool,
): LLVMValueRef = `LLVMConstStringInContext$mh`.invokeExact(C, Str, Length.toInt(), DontNullTerminate) as MemorySegment

public fun LLVMConstStringInContext2(
    C: LLVMContextRef,
    Str: Pointer<Byte>,
    Length: ULong,
    DontNullTerminate: LLVMBool,
): LLVMValueRef =
    `LLVMConstStringInContext2$mh`.invokeExact(C, Str, Length.toLong(), DontNullTerminate) as MemorySegment

public fun LLVMConstString(
    Str: Pointer<Byte>,
    Length: UInt,
    DontNullTerminate: LLVMBool,
): LLVMValueRef = `LLVMConstString$mh`.invokeExact(Str, Length.toInt(), DontNullTerminate) as MemorySegment

public fun LLVMIsConstantString(c: LLVMValueRef): LLVMBool = `LLVMIsConstantString$mh`.invokeExact(c) as Int

public fun LLVMGetAsString(c: LLVMValueRef, Length: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetAsString$mh`.invokeExact(c, Length) as MemorySegment

public fun LLVMConstStructInContext(
    C: LLVMContextRef,
    ConstantVals: Pointer<LLVMValueRef>,
    Count: UInt,
    Packed: LLVMBool,
): LLVMValueRef = `LLVMConstStructInContext$mh`.invokeExact(C, ConstantVals, Count.toInt(), Packed) as MemorySegment

public fun LLVMConstStruct(
    ConstantVals: Pointer<LLVMValueRef>,
    Count: UInt,
    Packed: LLVMBool,
): LLVMValueRef = `LLVMConstStruct$mh`.invokeExact(ConstantVals, Count.toInt(), Packed) as MemorySegment

public fun LLVMConstArray(
    ElementTy: LLVMTypeRef,
    ConstantVals: Pointer<LLVMValueRef>,
    Length: UInt,
): LLVMValueRef = `LLVMConstArray$mh`.invokeExact(ElementTy, ConstantVals, Length.toInt()) as MemorySegment

public fun LLVMConstArray2(
    ElementTy: LLVMTypeRef,
    ConstantVals: Pointer<LLVMValueRef>,
    Length: ULong,
): LLVMValueRef = `LLVMConstArray2$mh`.invokeExact(ElementTy, ConstantVals, Length.toLong()) as MemorySegment

public fun LLVMConstNamedStruct(
    StructTy: LLVMTypeRef,
    ConstantVals: Pointer<LLVMValueRef>,
    Count: UInt,
): LLVMValueRef = `LLVMConstNamedStruct$mh`.invokeExact(StructTy, ConstantVals, Count.toInt()) as MemorySegment

public fun LLVMGetAggregateElement(C: LLVMValueRef, Idx: UInt): LLVMValueRef =
    `LLVMGetAggregateElement$mh`.invokeExact(C, Idx.toInt()) as MemorySegment

public fun LLVMGetElementAsConstant(C: LLVMValueRef, idx: UInt): LLVMValueRef =
    `LLVMGetElementAsConstant$mh`.invokeExact(C, idx.toInt()) as MemorySegment

public fun LLVMConstVector(ScalarConstantVals: Pointer<LLVMValueRef>, Size: UInt): LLVMValueRef =
    `LLVMConstVector$mh`.invokeExact(ScalarConstantVals, Size.toInt()) as MemorySegment

public fun LLVMConstantPtrAuth(
    Ptr: LLVMValueRef,
    Key: LLVMValueRef,
    Disc: LLVMValueRef,
    AddrDisc: LLVMValueRef,
): LLVMValueRef = `LLVMConstantPtrAuth$mh`.invokeExact(Ptr, Key, Disc, AddrDisc) as MemorySegment

public fun LLVMGetConstOpcode(ConstantVal: LLVMValueRef): LLVMOpcode =
    LLVMOpcode.fromInt(`LLVMGetConstOpcode$mh`.invokeExact(ConstantVal) as Int)

public fun LLVMAlignOf(Ty: LLVMTypeRef): LLVMValueRef = `LLVMAlignOf$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMSizeOf(Ty: LLVMTypeRef): LLVMValueRef = `LLVMSizeOf$mh`.invokeExact(Ty) as MemorySegment

public fun LLVMConstNeg(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNeg$mh`.invokeExact(ConstantVal) as MemorySegment

public fun LLVMConstNSWNeg(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWNeg$mh`.invokeExact(ConstantVal) as MemorySegment

public fun LLVMConstNUWNeg(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWNeg$mh`.invokeExact(ConstantVal) as MemorySegment

public fun LLVMConstNot(ConstantVal: LLVMValueRef): LLVMValueRef =
    `LLVMConstNot$mh`.invokeExact(ConstantVal) as MemorySegment

public fun LLVMConstAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstAdd$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstNSWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWAdd$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstNUWAdd(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWAdd$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstSub$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstNSWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWSub$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstNUWSub(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWSub$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstMul$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstNSWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNSWMul$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstNUWMul(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstNUWMul$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstXor(LHSConstant: LLVMValueRef, RHSConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstXor$mh`.invokeExact(LHSConstant, RHSConstant) as MemorySegment

public fun LLVMConstGEP2(
    Ty: LLVMTypeRef,
    ConstantVal: LLVMValueRef,
    ConstantIndices: Pointer<LLVMValueRef>,
    NumIndices: UInt,
): LLVMValueRef = `LLVMConstGEP2$mh`.invokeExact(Ty, ConstantVal, ConstantIndices, NumIndices.toInt()) as MemorySegment

public fun LLVMConstInBoundsGEP2(
    Ty: LLVMTypeRef,
    ConstantVal: LLVMValueRef,
    ConstantIndices: Pointer<LLVMValueRef>,
    NumIndices: UInt,
): LLVMValueRef =
    `LLVMConstInBoundsGEP2$mh`.invokeExact(Ty, ConstantVal, ConstantIndices, NumIndices.toInt()) as MemorySegment

public fun LLVMConstGEPWithNoWrapFlags(
    Ty: LLVMTypeRef,
    ConstantVal: LLVMValueRef,
    ConstantIndices: Pointer<LLVMValueRef>,
    NumIndices: UInt,
    NoWrapFlags: LLVMGEPNoWrapFlags,
): LLVMValueRef = `LLVMConstGEPWithNoWrapFlags$mh`.invokeExact(
    Ty,
    ConstantVal,
    ConstantIndices,
    NumIndices.toInt(),
    NoWrapFlags.toInt(),
) as MemorySegment

public fun LLVMConstTrunc(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstTrunc$mh`.invokeExact(ConstantVal, ToType) as MemorySegment

public fun LLVMConstPtrToInt(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstPtrToInt$mh`.invokeExact(ConstantVal, ToType) as MemorySegment

public fun LLVMConstIntToPtr(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstIntToPtr$mh`.invokeExact(ConstantVal, ToType) as MemorySegment

public fun LLVMConstBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstBitCast$mh`.invokeExact(ConstantVal, ToType) as MemorySegment

public fun LLVMConstAddrSpaceCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstAddrSpaceCast$mh`.invokeExact(ConstantVal, ToType) as MemorySegment

public fun LLVMConstTruncOrBitCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstTruncOrBitCast$mh`.invokeExact(ConstantVal, ToType) as MemorySegment

public fun LLVMConstPointerCast(ConstantVal: LLVMValueRef, ToType: LLVMTypeRef): LLVMValueRef =
    `LLVMConstPointerCast$mh`.invokeExact(ConstantVal, ToType) as MemorySegment

public fun LLVMConstExtractElement(VectorConstant: LLVMValueRef, IndexConstant: LLVMValueRef): LLVMValueRef =
    `LLVMConstExtractElement$mh`.invokeExact(VectorConstant, IndexConstant) as MemorySegment

public fun LLVMConstInsertElement(
    VectorConstant: LLVMValueRef,
    ElementValueConstant: LLVMValueRef,
    IndexConstant: LLVMValueRef,
): LLVMValueRef =
    `LLVMConstInsertElement$mh`.invokeExact(VectorConstant, ElementValueConstant, IndexConstant) as MemorySegment

public fun LLVMConstShuffleVector(
    VectorAConstant: LLVMValueRef,
    VectorBConstant: LLVMValueRef,
    MaskConstant: LLVMValueRef,
): LLVMValueRef =
    `LLVMConstShuffleVector$mh`.invokeExact(VectorAConstant, VectorBConstant, MaskConstant) as MemorySegment

public fun LLVMBlockAddress(F: LLVMValueRef, BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMBlockAddress$mh`.invokeExact(F, BB) as MemorySegment

public fun LLVMGetBlockAddressFunction(BlockAddr: LLVMValueRef): LLVMValueRef =
    `LLVMGetBlockAddressFunction$mh`.invokeExact(BlockAddr) as MemorySegment

public fun LLVMGetBlockAddressBasicBlock(BlockAddr: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetBlockAddressBasicBlock$mh`.invokeExact(BlockAddr) as MemorySegment

public fun LLVMConstInlineAsm(
    Ty: LLVMTypeRef,
    AsmString: Pointer<Byte>,
    Constraints: Pointer<Byte>,
    HasSideEffects: LLVMBool,
    IsAlignStack: LLVMBool,
): LLVMValueRef =
    `LLVMConstInlineAsm$mh`.invokeExact(Ty, AsmString, Constraints, HasSideEffects, IsAlignStack) as MemorySegment

public fun LLVMGetGlobalParent(Global: LLVMValueRef): LLVMModuleRef =
    `LLVMGetGlobalParent$mh`.invokeExact(Global) as MemorySegment

public fun LLVMIsDeclaration(Global: LLVMValueRef): LLVMBool = `LLVMIsDeclaration$mh`.invokeExact(Global) as Int

public fun LLVMGetLinkage(Global: LLVMValueRef): LLVMLinkage =
    LLVMLinkage.fromInt(`LLVMGetLinkage$mh`.invokeExact(Global) as Int)

public fun LLVMSetLinkage(Global: LLVMValueRef, Linkage: LLVMLinkage): Unit =
    `LLVMSetLinkage$mh`.invokeExact(Global, Linkage.value) as Unit

public fun LLVMGetSection(Global: LLVMValueRef): Pointer<Byte> =
    `LLVMGetSection$mh`.invokeExact(Global) as MemorySegment

public fun LLVMSetSection(Global: LLVMValueRef, Section: Pointer<Byte>): Unit =
    `LLVMSetSection$mh`.invokeExact(Global, Section) as Unit

public fun LLVMGetVisibility(Global: LLVMValueRef): LLVMVisibility =
    LLVMVisibility.fromInt(`LLVMGetVisibility$mh`.invokeExact(Global) as Int)

public fun LLVMSetVisibility(Global: LLVMValueRef, Viz: LLVMVisibility): Unit =
    `LLVMSetVisibility$mh`.invokeExact(Global, Viz.value) as Unit

public fun LLVMGetDLLStorageClass(Global: LLVMValueRef): LLVMDLLStorageClass =
    LLVMDLLStorageClass.fromInt(`LLVMGetDLLStorageClass$mh`.invokeExact(Global) as Int)

public fun LLVMSetDLLStorageClass(Global: LLVMValueRef, Class: LLVMDLLStorageClass): Unit =
    `LLVMSetDLLStorageClass$mh`.invokeExact(Global, Class.value) as Unit

public fun LLVMGetUnnamedAddress(Global: LLVMValueRef): LLVMUnnamedAddr =
    LLVMUnnamedAddr.fromInt(`LLVMGetUnnamedAddress$mh`.invokeExact(Global) as Int)

public fun LLVMSetUnnamedAddress(Global: LLVMValueRef, UnnamedAddr: LLVMUnnamedAddr): Unit =
    `LLVMSetUnnamedAddress$mh`.invokeExact(Global, UnnamedAddr.value) as Unit

public fun LLVMGlobalGetValueType(Global: LLVMValueRef): LLVMTypeRef =
    `LLVMGlobalGetValueType$mh`.invokeExact(Global) as MemorySegment

public fun LLVMHasUnnamedAddr(Global: LLVMValueRef): LLVMBool = `LLVMHasUnnamedAddr$mh`.invokeExact(Global) as Int

public fun LLVMSetUnnamedAddr(Global: LLVMValueRef, HasUnnamedAddr: LLVMBool): Unit =
    `LLVMSetUnnamedAddr$mh`.invokeExact(Global, HasUnnamedAddr) as Unit

public fun LLVMGetAlignment(V: LLVMValueRef): UInt = (`LLVMGetAlignment$mh`.invokeExact(V) as Int).toUInt()

public fun LLVMSetAlignment(V: LLVMValueRef, Bytes: UInt): Unit =
    `LLVMSetAlignment$mh`.invokeExact(V, Bytes.toInt()) as Unit

public fun LLVMGlobalSetMetadata(
    Global: LLVMValueRef,
    Kind: UInt,
    MD: LLVMMetadataRef,
): Unit = `LLVMGlobalSetMetadata$mh`.invokeExact(Global, Kind.toInt(), MD) as Unit

public fun LLVMGlobalEraseMetadata(Global: LLVMValueRef, Kind: UInt): Unit =
    `LLVMGlobalEraseMetadata$mh`.invokeExact(Global, Kind.toInt()) as Unit

public fun LLVMGlobalClearMetadata(Global: LLVMValueRef): Unit =
    `LLVMGlobalClearMetadata$mh`.invokeExact(Global) as Unit

public fun LLVMGlobalCopyAllMetadata(Value: LLVMValueRef, NumEntries: Pointer<ULong>): Pointer<LLVMValueMetadataEntry> =
    `LLVMGlobalCopyAllMetadata$mh`.invokeExact(Value, NumEntries) as MemorySegment

public fun LLVMDisposeValueMetadataEntries(Entries: Pointer<LLVMValueMetadataEntry>): Unit =
    `LLVMDisposeValueMetadataEntries$mh`.invokeExact(Entries) as Unit

public fun LLVMValueMetadataEntriesGetKind(Entries: Pointer<LLVMValueMetadataEntry>, Index: UInt): UInt =
    (`LLVMValueMetadataEntriesGetKind$mh`.invokeExact(Entries, Index.toInt()) as Int).toUInt()

public fun LLVMValueMetadataEntriesGetMetadata(Entries: Pointer<LLVMValueMetadataEntry>, Index: UInt): LLVMMetadataRef =
    `LLVMValueMetadataEntriesGetMetadata$mh`.invokeExact(Entries, Index.toInt()) as MemorySegment

public fun LLVMAddGlobal(
    M: LLVMModuleRef,
    Ty: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMAddGlobal$mh`.invokeExact(M, Ty, Name) as MemorySegment

public fun LLVMAddGlobalInAddressSpace(
    M: LLVMModuleRef,
    Ty: LLVMTypeRef,
    Name: Pointer<Byte>,
    AddressSpace: UInt,
): LLVMValueRef = `LLVMAddGlobalInAddressSpace$mh`.invokeExact(M, Ty, Name, AddressSpace.toInt()) as MemorySegment

public fun LLVMGetNamedGlobal(M: LLVMModuleRef, Name: Pointer<Byte>): LLVMValueRef =
    `LLVMGetNamedGlobal$mh`.invokeExact(M, Name) as MemorySegment

public fun LLVMGetNamedGlobalWithLength(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    Length: ULong,
): LLVMValueRef = `LLVMGetNamedGlobalWithLength$mh`.invokeExact(M, Name, Length.toLong()) as MemorySegment

public fun LLVMGetFirstGlobal(M: LLVMModuleRef): LLVMValueRef = `LLVMGetFirstGlobal$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetLastGlobal(M: LLVMModuleRef): LLVMValueRef = `LLVMGetLastGlobal$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetNextGlobal(GlobalVar: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextGlobal$mh`.invokeExact(GlobalVar) as MemorySegment

public fun LLVMGetPreviousGlobal(GlobalVar: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousGlobal$mh`.invokeExact(GlobalVar) as MemorySegment

public fun LLVMDeleteGlobal(GlobalVar: LLVMValueRef): Unit = `LLVMDeleteGlobal$mh`.invokeExact(GlobalVar) as Unit

public fun LLVMGetInitializer(GlobalVar: LLVMValueRef): LLVMValueRef =
    `LLVMGetInitializer$mh`.invokeExact(GlobalVar) as MemorySegment

public fun LLVMSetInitializer(GlobalVar: LLVMValueRef, ConstantVal: LLVMValueRef): Unit =
    `LLVMSetInitializer$mh`.invokeExact(GlobalVar, ConstantVal) as Unit

public fun LLVMIsThreadLocal(GlobalVar: LLVMValueRef): LLVMBool = `LLVMIsThreadLocal$mh`.invokeExact(GlobalVar) as Int

public fun LLVMSetThreadLocal(GlobalVar: LLVMValueRef, IsThreadLocal: LLVMBool): Unit =
    `LLVMSetThreadLocal$mh`.invokeExact(GlobalVar, IsThreadLocal) as Unit

public fun LLVMIsGlobalConstant(GlobalVar: LLVMValueRef): LLVMBool =
    `LLVMIsGlobalConstant$mh`.invokeExact(GlobalVar) as Int

public fun LLVMSetGlobalConstant(GlobalVar: LLVMValueRef, IsConstant: LLVMBool): Unit =
    `LLVMSetGlobalConstant$mh`.invokeExact(GlobalVar, IsConstant) as Unit

public fun LLVMGetThreadLocalMode(GlobalVar: LLVMValueRef): LLVMThreadLocalMode =
    LLVMThreadLocalMode.fromInt(`LLVMGetThreadLocalMode$mh`.invokeExact(GlobalVar) as Int)

public fun LLVMSetThreadLocalMode(GlobalVar: LLVMValueRef, Mode: LLVMThreadLocalMode): Unit =
    `LLVMSetThreadLocalMode$mh`.invokeExact(GlobalVar, Mode.value) as Unit

public fun LLVMIsExternallyInitialized(GlobalVar: LLVMValueRef): LLVMBool =
    `LLVMIsExternallyInitialized$mh`.invokeExact(GlobalVar) as Int

public fun LLVMSetExternallyInitialized(GlobalVar: LLVMValueRef, IsExtInit: LLVMBool): Unit =
    `LLVMSetExternallyInitialized$mh`.invokeExact(GlobalVar, IsExtInit) as Unit

public fun LLVMAddAlias2(
    M: LLVMModuleRef,
    ValueTy: LLVMTypeRef,
    AddrSpace: UInt,
    Aliasee: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMAddAlias2$mh`.invokeExact(M, ValueTy, AddrSpace.toInt(), Aliasee, Name) as MemorySegment

public fun LLVMGetNamedGlobalAlias(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    NameLen: ULong,
): LLVMValueRef = `LLVMGetNamedGlobalAlias$mh`.invokeExact(M, Name, NameLen.toLong()) as MemorySegment

public fun LLVMGetFirstGlobalAlias(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetFirstGlobalAlias$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetLastGlobalAlias(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetLastGlobalAlias$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetNextGlobalAlias(GA: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextGlobalAlias$mh`.invokeExact(GA) as MemorySegment

public fun LLVMGetPreviousGlobalAlias(GA: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousGlobalAlias$mh`.invokeExact(GA) as MemorySegment

public fun LLVMAliasGetAliasee(Alias: LLVMValueRef): LLVMValueRef =
    `LLVMAliasGetAliasee$mh`.invokeExact(Alias) as MemorySegment

public fun LLVMAliasSetAliasee(Alias: LLVMValueRef, Aliasee: LLVMValueRef): Unit =
    `LLVMAliasSetAliasee$mh`.invokeExact(Alias, Aliasee) as Unit

public fun LLVMDeleteFunction(Fn: LLVMValueRef): Unit = `LLVMDeleteFunction$mh`.invokeExact(Fn) as Unit

public fun LLVMHasPersonalityFn(Fn: LLVMValueRef): LLVMBool = `LLVMHasPersonalityFn$mh`.invokeExact(Fn) as Int

public fun LLVMGetPersonalityFn(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetPersonalityFn$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMSetPersonalityFn(Fn: LLVMValueRef, PersonalityFn: LLVMValueRef): Unit =
    `LLVMSetPersonalityFn$mh`.invokeExact(Fn, PersonalityFn) as Unit

public fun LLVMLookupIntrinsicID(Name: Pointer<Byte>, NameLen: ULong): UInt =
    (`LLVMLookupIntrinsicID$mh`.invokeExact(Name, NameLen.toLong()) as Int).toUInt()

public fun LLVMGetIntrinsicID(Fn: LLVMValueRef): UInt = (`LLVMGetIntrinsicID$mh`.invokeExact(Fn) as Int).toUInt()

public fun LLVMGetIntrinsicDeclaration(
    Mod: LLVMModuleRef,
    ID: UInt,
    ParamTypes: Pointer<LLVMTypeRef>,
    ParamCount: ULong,
): LLVMValueRef =
    `LLVMGetIntrinsicDeclaration$mh`.invokeExact(Mod, ID.toInt(), ParamTypes, ParamCount.toLong()) as MemorySegment

public fun LLVMIntrinsicGetType(
    Ctx: LLVMContextRef,
    ID: UInt,
    ParamTypes: Pointer<LLVMTypeRef>,
    ParamCount: ULong,
): LLVMTypeRef =
    `LLVMIntrinsicGetType$mh`.invokeExact(Ctx, ID.toInt(), ParamTypes, ParamCount.toLong()) as MemorySegment

public fun LLVMIntrinsicGetName(ID: UInt, NameLength: Pointer<ULong>): Pointer<Byte> =
    `LLVMIntrinsicGetName$mh`.invokeExact(ID.toInt(), NameLength) as MemorySegment

public fun LLVMIntrinsicCopyOverloadedName(
    ID: UInt,
    ParamTypes: Pointer<LLVMTypeRef>,
    ParamCount: ULong,
    NameLength: Pointer<ULong>,
): Pointer<Byte> = `LLVMIntrinsicCopyOverloadedName$mh`.invokeExact(
    ID.toInt(),
    ParamTypes,
    ParamCount.toLong(),
    NameLength,
) as MemorySegment

public fun LLVMIntrinsicCopyOverloadedName2(
    Mod: LLVMModuleRef,
    ID: UInt,
    ParamTypes: Pointer<LLVMTypeRef>,
    ParamCount: ULong,
    NameLength: Pointer<ULong>,
): Pointer<Byte> = `LLVMIntrinsicCopyOverloadedName2$mh`.invokeExact(
    Mod,
    ID.toInt(),
    ParamTypes,
    ParamCount.toLong(),
    NameLength,
) as MemorySegment

public fun LLVMIntrinsicIsOverloaded(ID: UInt): LLVMBool =
    `LLVMIntrinsicIsOverloaded$mh`.invokeExact(ID.toInt()) as Int

public fun LLVMGetFunctionCallConv(Fn: LLVMValueRef): UInt =
    (`LLVMGetFunctionCallConv$mh`.invokeExact(Fn) as Int).toUInt()

public fun LLVMSetFunctionCallConv(Fn: LLVMValueRef, CC: UInt): Unit =
    `LLVMSetFunctionCallConv$mh`.invokeExact(Fn, CC.toInt()) as Unit

public fun LLVMGetGC(Fn: LLVMValueRef): Pointer<Byte> = `LLVMGetGC$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMSetGC(Fn: LLVMValueRef, Name: Pointer<Byte>): Unit = `LLVMSetGC$mh`.invokeExact(Fn, Name) as Unit

public fun LLVMGetPrefixData(Fn: LLVMValueRef): LLVMValueRef = `LLVMGetPrefixData$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMHasPrefixData(Fn: LLVMValueRef): LLVMBool = `LLVMHasPrefixData$mh`.invokeExact(Fn) as Int

public fun LLVMSetPrefixData(Fn: LLVMValueRef, prefixData: LLVMValueRef): Unit =
    `LLVMSetPrefixData$mh`.invokeExact(Fn, prefixData) as Unit

public fun LLVMGetPrologueData(Fn: LLVMValueRef): LLVMValueRef =
    `LLVMGetPrologueData$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMHasPrologueData(Fn: LLVMValueRef): LLVMBool = `LLVMHasPrologueData$mh`.invokeExact(Fn) as Int

public fun LLVMSetPrologueData(Fn: LLVMValueRef, prologueData: LLVMValueRef): Unit =
    `LLVMSetPrologueData$mh`.invokeExact(Fn, prologueData) as Unit

public fun LLVMAddAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    A: LLVMAttributeRef,
): Unit = `LLVMAddAttributeAtIndex$mh`.invokeExact(F, Idx.toInt(), A) as Unit

public fun LLVMGetAttributeCountAtIndex(F: LLVMValueRef, Idx: LLVMAttributeIndex): UInt =
    (`LLVMGetAttributeCountAtIndex$mh`.invokeExact(F, Idx.toInt()) as Int).toUInt()

public fun LLVMGetAttributesAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    Attrs: Pointer<LLVMAttributeRef>,
): Unit = `LLVMGetAttributesAtIndex$mh`.invokeExact(F, Idx.toInt(), Attrs) as Unit

public fun LLVMGetEnumAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: UInt,
): LLVMAttributeRef = `LLVMGetEnumAttributeAtIndex$mh`.invokeExact(F, Idx.toInt(), KindID.toInt()) as MemorySegment

public fun LLVMGetStringAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: Pointer<Byte>,
    KLen: UInt,
): LLVMAttributeRef = `LLVMGetStringAttributeAtIndex$mh`.invokeExact(F, Idx.toInt(), K, KLen.toInt()) as MemorySegment

public fun LLVMRemoveEnumAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: UInt,
): Unit = `LLVMRemoveEnumAttributeAtIndex$mh`.invokeExact(F, Idx.toInt(), KindID.toInt()) as Unit

public fun LLVMRemoveStringAttributeAtIndex(
    F: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: Pointer<Byte>,
    KLen: UInt,
): Unit = `LLVMRemoveStringAttributeAtIndex$mh`.invokeExact(F, Idx.toInt(), K, KLen.toInt()) as Unit

public fun LLVMAddTargetDependentFunctionAttr(
    Fn: LLVMValueRef,
    A: Pointer<Byte>,
    V: Pointer<Byte>,
): Unit = `LLVMAddTargetDependentFunctionAttr$mh`.invokeExact(Fn, A, V) as Unit

public fun LLVMCountParams(Fn: LLVMValueRef): UInt = (`LLVMCountParams$mh`.invokeExact(Fn) as Int).toUInt()

public fun LLVMGetParams(Fn: LLVMValueRef, Params: Pointer<LLVMValueRef>): Unit =
    `LLVMGetParams$mh`.invokeExact(Fn, Params) as Unit

public fun LLVMGetParam(Fn: LLVMValueRef, Index: UInt): LLVMValueRef =
    `LLVMGetParam$mh`.invokeExact(Fn, Index.toInt()) as MemorySegment

public fun LLVMGetParamParent(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMGetParamParent$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMGetFirstParam(Fn: LLVMValueRef): LLVMValueRef = `LLVMGetFirstParam$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMGetLastParam(Fn: LLVMValueRef): LLVMValueRef = `LLVMGetLastParam$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMGetNextParam(Arg: LLVMValueRef): LLVMValueRef = `LLVMGetNextParam$mh`.invokeExact(Arg) as MemorySegment

public fun LLVMGetPreviousParam(Arg: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousParam$mh`.invokeExact(Arg) as MemorySegment

public fun LLVMSetParamAlignment(Arg: LLVMValueRef, Align: UInt): Unit =
    `LLVMSetParamAlignment$mh`.invokeExact(Arg, Align.toInt()) as Unit

public fun LLVMAddGlobalIFunc(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    NameLen: ULong,
    Ty: LLVMTypeRef,
    AddrSpace: UInt,
    Resolver: LLVMValueRef,
): LLVMValueRef =
    `LLVMAddGlobalIFunc$mh`.invokeExact(M, Name, NameLen.toLong(), Ty, AddrSpace.toInt(), Resolver) as MemorySegment

public fun LLVMGetNamedGlobalIFunc(
    M: LLVMModuleRef,
    Name: Pointer<Byte>,
    NameLen: ULong,
): LLVMValueRef = `LLVMGetNamedGlobalIFunc$mh`.invokeExact(M, Name, NameLen.toLong()) as MemorySegment

public fun LLVMGetFirstGlobalIFunc(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetFirstGlobalIFunc$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetLastGlobalIFunc(M: LLVMModuleRef): LLVMValueRef =
    `LLVMGetLastGlobalIFunc$mh`.invokeExact(M) as MemorySegment

public fun LLVMGetNextGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextGlobalIFunc$mh`.invokeExact(IFunc) as MemorySegment

public fun LLVMGetPreviousGlobalIFunc(IFunc: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousGlobalIFunc$mh`.invokeExact(IFunc) as MemorySegment

public fun LLVMGetGlobalIFuncResolver(IFunc: LLVMValueRef): LLVMValueRef =
    `LLVMGetGlobalIFuncResolver$mh`.invokeExact(IFunc) as MemorySegment

public fun LLVMSetGlobalIFuncResolver(IFunc: LLVMValueRef, Resolver: LLVMValueRef): Unit =
    `LLVMSetGlobalIFuncResolver$mh`.invokeExact(IFunc, Resolver) as Unit

public fun LLVMEraseGlobalIFunc(IFunc: LLVMValueRef): Unit = `LLVMEraseGlobalIFunc$mh`.invokeExact(IFunc) as Unit

public fun LLVMRemoveGlobalIFunc(IFunc: LLVMValueRef): Unit = `LLVMRemoveGlobalIFunc$mh`.invokeExact(IFunc) as Unit

public fun LLVMMDStringInContext2(
    C: LLVMContextRef,
    Str: Pointer<Byte>,
    SLen: ULong,
): LLVMMetadataRef = `LLVMMDStringInContext2$mh`.invokeExact(C, Str, SLen.toLong()) as MemorySegment

public fun LLVMMDNodeInContext2(
    C: LLVMContextRef,
    MDs: Pointer<LLVMMetadataRef>,
    Count: ULong,
): LLVMMetadataRef = `LLVMMDNodeInContext2$mh`.invokeExact(C, MDs, Count.toLong()) as MemorySegment

public fun LLVMMetadataAsValue(C: LLVMContextRef, MD: LLVMMetadataRef): LLVMValueRef =
    `LLVMMetadataAsValue$mh`.invokeExact(C, MD) as MemorySegment

public fun LLVMValueAsMetadata(Val: LLVMValueRef): LLVMMetadataRef =
    `LLVMValueAsMetadata$mh`.invokeExact(Val) as MemorySegment

public fun LLVMGetMDString(V: LLVMValueRef, Length: Pointer<UInt>): Pointer<Byte> =
    `LLVMGetMDString$mh`.invokeExact(V, Length) as MemorySegment

public fun LLVMGetMDNodeNumOperands(V: LLVMValueRef): UInt =
    (`LLVMGetMDNodeNumOperands$mh`.invokeExact(V) as Int).toUInt()

public fun LLVMGetMDNodeOperands(V: LLVMValueRef, Dest: Pointer<LLVMValueRef>): Unit =
    `LLVMGetMDNodeOperands$mh`.invokeExact(V, Dest) as Unit

public fun LLVMReplaceMDNodeOperandWith(
    V: LLVMValueRef,
    Index: UInt,
    Replacement: LLVMMetadataRef,
): Unit = `LLVMReplaceMDNodeOperandWith$mh`.invokeExact(V, Index.toInt(), Replacement) as Unit

public fun LLVMMDStringInContext(
    C: LLVMContextRef,
    Str: Pointer<Byte>,
    SLen: UInt,
): LLVMValueRef = `LLVMMDStringInContext$mh`.invokeExact(C, Str, SLen.toInt()) as MemorySegment

public fun LLVMMDString(Str: Pointer<Byte>, SLen: UInt): LLVMValueRef =
    `LLVMMDString$mh`.invokeExact(Str, SLen.toInt()) as MemorySegment

public fun LLVMMDNodeInContext(
    C: LLVMContextRef,
    Vals: Pointer<LLVMValueRef>,
    Count: UInt,
): LLVMValueRef = `LLVMMDNodeInContext$mh`.invokeExact(C, Vals, Count.toInt()) as MemorySegment

public fun LLVMMDNode(Vals: Pointer<LLVMValueRef>, Count: UInt): LLVMValueRef =
    `LLVMMDNode$mh`.invokeExact(Vals, Count.toInt()) as MemorySegment

public fun LLVMCreateOperandBundle(
    Tag: Pointer<Byte>,
    TagLen: ULong,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
): LLVMOperandBundleRef =
    `LLVMCreateOperandBundle$mh`.invokeExact(Tag, TagLen.toLong(), Args, NumArgs.toInt()) as MemorySegment

public fun LLVMDisposeOperandBundle(Bundle: LLVMOperandBundleRef): Unit =
    `LLVMDisposeOperandBundle$mh`.invokeExact(Bundle) as Unit

public fun LLVMGetOperandBundleTag(Bundle: LLVMOperandBundleRef, Len: Pointer<ULong>): Pointer<Byte> =
    `LLVMGetOperandBundleTag$mh`.invokeExact(Bundle, Len) as MemorySegment

public fun LLVMGetNumOperandBundleArgs(Bundle: LLVMOperandBundleRef): UInt =
    (`LLVMGetNumOperandBundleArgs$mh`.invokeExact(Bundle) as Int).toUInt()

public fun LLVMGetOperandBundleArgAtIndex(Bundle: LLVMOperandBundleRef, Index: UInt): LLVMValueRef =
    `LLVMGetOperandBundleArgAtIndex$mh`.invokeExact(Bundle, Index.toInt()) as MemorySegment

public fun LLVMBasicBlockAsValue(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMBasicBlockAsValue$mh`.invokeExact(BB) as MemorySegment

public fun LLVMValueIsBasicBlock(Val: LLVMValueRef): LLVMBool = `LLVMValueIsBasicBlock$mh`.invokeExact(Val) as Int

public fun LLVMValueAsBasicBlock(Val: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMValueAsBasicBlock$mh`.invokeExact(Val) as MemorySegment

public fun LLVMGetBasicBlockName(BB: LLVMBasicBlockRef): Pointer<Byte> =
    `LLVMGetBasicBlockName$mh`.invokeExact(BB) as MemorySegment

public fun LLVMGetBasicBlockParent(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetBasicBlockParent$mh`.invokeExact(BB) as MemorySegment

public fun LLVMGetBasicBlockTerminator(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetBasicBlockTerminator$mh`.invokeExact(BB) as MemorySegment

public fun LLVMCountBasicBlocks(Fn: LLVMValueRef): UInt = (`LLVMCountBasicBlocks$mh`.invokeExact(Fn) as Int).toUInt()

public fun LLVMGetBasicBlocks(Fn: LLVMValueRef, BasicBlocks: Pointer<LLVMBasicBlockRef>): Unit =
    `LLVMGetBasicBlocks$mh`.invokeExact(Fn, BasicBlocks) as Unit

public fun LLVMGetFirstBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetFirstBasicBlock$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMGetLastBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetLastBasicBlock$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMGetNextBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef =
    `LLVMGetNextBasicBlock$mh`.invokeExact(BB) as MemorySegment

public fun LLVMGetPreviousBasicBlock(BB: LLVMBasicBlockRef): LLVMBasicBlockRef =
    `LLVMGetPreviousBasicBlock$mh`.invokeExact(BB) as MemorySegment

public fun LLVMGetEntryBasicBlock(Fn: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetEntryBasicBlock$mh`.invokeExact(Fn) as MemorySegment

public fun LLVMInsertExistingBasicBlockAfterInsertBlock(Builder: LLVMBuilderRef, BB: LLVMBasicBlockRef): Unit =
    `LLVMInsertExistingBasicBlockAfterInsertBlock$mh`.invokeExact(Builder, BB) as Unit

public fun LLVMAppendExistingBasicBlock(Fn: LLVMValueRef, BB: LLVMBasicBlockRef): Unit =
    `LLVMAppendExistingBasicBlock$mh`.invokeExact(Fn, BB) as Unit

public fun LLVMCreateBasicBlockInContext(C: LLVMContextRef, Name: Pointer<Byte>): LLVMBasicBlockRef =
    `LLVMCreateBasicBlockInContext$mh`.invokeExact(C, Name) as MemorySegment

public fun LLVMAppendBasicBlockInContext(
    C: LLVMContextRef,
    Fn: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMBasicBlockRef = `LLVMAppendBasicBlockInContext$mh`.invokeExact(C, Fn, Name) as MemorySegment

public fun LLVMAppendBasicBlock(Fn: LLVMValueRef, Name: Pointer<Byte>): LLVMBasicBlockRef =
    `LLVMAppendBasicBlock$mh`.invokeExact(Fn, Name) as MemorySegment

public fun LLVMInsertBasicBlockInContext(
    C: LLVMContextRef,
    BB: LLVMBasicBlockRef,
    Name: Pointer<Byte>,
): LLVMBasicBlockRef = `LLVMInsertBasicBlockInContext$mh`.invokeExact(C, BB, Name) as MemorySegment

public fun LLVMInsertBasicBlock(InsertBeforeBB: LLVMBasicBlockRef, Name: Pointer<Byte>): LLVMBasicBlockRef =
    `LLVMInsertBasicBlock$mh`.invokeExact(InsertBeforeBB, Name) as MemorySegment

public fun LLVMDeleteBasicBlock(BB: LLVMBasicBlockRef): Unit = `LLVMDeleteBasicBlock$mh`.invokeExact(BB) as Unit

public fun LLVMRemoveBasicBlockFromParent(BB: LLVMBasicBlockRef): Unit =
    `LLVMRemoveBasicBlockFromParent$mh`.invokeExact(BB) as Unit

public fun LLVMMoveBasicBlockBefore(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): Unit =
    `LLVMMoveBasicBlockBefore$mh`.invokeExact(BB, MovePos) as Unit

public fun LLVMMoveBasicBlockAfter(BB: LLVMBasicBlockRef, MovePos: LLVMBasicBlockRef): Unit =
    `LLVMMoveBasicBlockAfter$mh`.invokeExact(BB, MovePos) as Unit

public fun LLVMGetFirstInstruction(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetFirstInstruction$mh`.invokeExact(BB) as MemorySegment

public fun LLVMGetLastInstruction(BB: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMGetLastInstruction$mh`.invokeExact(BB) as MemorySegment

public fun LLVMHasMetadata(Val: LLVMValueRef): Int = `LLVMHasMetadata$mh`.invokeExact(Val) as Int

public fun LLVMGetMetadata(Val: LLVMValueRef, KindID: UInt): LLVMValueRef =
    `LLVMGetMetadata$mh`.invokeExact(Val, KindID.toInt()) as MemorySegment

public fun LLVMSetMetadata(
    Val: LLVMValueRef,
    KindID: UInt,
    Node: LLVMValueRef,
): Unit = `LLVMSetMetadata$mh`.invokeExact(Val, KindID.toInt(), Node) as Unit

public fun LLVMInstructionGetAllMetadataOtherThanDebugLoc(
    Instr: LLVMValueRef,
    NumEntries: Pointer<ULong>
): Pointer<LLVMValueMetadataEntry> =
    `LLVMInstructionGetAllMetadataOtherThanDebugLoc$mh`.invokeExact(Instr, NumEntries) as MemorySegment

public fun LLVMGetInstructionParent(Inst: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetInstructionParent$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMGetNextInstruction(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMGetNextInstruction$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMGetPreviousInstruction(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMGetPreviousInstruction$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMInstructionRemoveFromParent(Inst: LLVMValueRef): Unit =
    `LLVMInstructionRemoveFromParent$mh`.invokeExact(Inst) as Unit

public fun LLVMInstructionEraseFromParent(Inst: LLVMValueRef): Unit =
    `LLVMInstructionEraseFromParent$mh`.invokeExact(Inst) as Unit

public fun LLVMDeleteInstruction(Inst: LLVMValueRef): Unit = `LLVMDeleteInstruction$mh`.invokeExact(Inst) as Unit

public fun LLVMGetInstructionOpcode(Inst: LLVMValueRef): LLVMOpcode =
    LLVMOpcode.fromInt(`LLVMGetInstructionOpcode$mh`.invokeExact(Inst) as Int)

public fun LLVMGetICmpPredicate(Inst: LLVMValueRef): LLVMIntPredicate =
    LLVMIntPredicate.fromInt(`LLVMGetICmpPredicate$mh`.invokeExact(Inst) as Int)

public fun LLVMGetFCmpPredicate(Inst: LLVMValueRef): LLVMRealPredicate =
    LLVMRealPredicate.fromInt(`LLVMGetFCmpPredicate$mh`.invokeExact(Inst) as Int)

public fun LLVMInstructionClone(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMInstructionClone$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMIsATerminatorInst(Inst: LLVMValueRef): LLVMValueRef =
    `LLVMIsATerminatorInst$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMGetFirstDbgRecord(Inst: LLVMValueRef): LLVMDbgRecordRef =
    `LLVMGetFirstDbgRecord$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMGetLastDbgRecord(Inst: LLVMValueRef): LLVMDbgRecordRef =
    `LLVMGetLastDbgRecord$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMGetNextDbgRecord(DbgRecord: LLVMDbgRecordRef): LLVMDbgRecordRef =
    `LLVMGetNextDbgRecord$mh`.invokeExact(DbgRecord) as MemorySegment

public fun LLVMGetPreviousDbgRecord(DbgRecord: LLVMDbgRecordRef): LLVMDbgRecordRef =
    `LLVMGetPreviousDbgRecord$mh`.invokeExact(DbgRecord) as MemorySegment

public fun LLVMGetNumArgOperands(Instr: LLVMValueRef): UInt =
    (`LLVMGetNumArgOperands$mh`.invokeExact(Instr) as Int).toUInt()

public fun LLVMSetInstructionCallConv(Instr: LLVMValueRef, CC: UInt): Unit =
    `LLVMSetInstructionCallConv$mh`.invokeExact(Instr, CC.toInt()) as Unit

public fun LLVMGetInstructionCallConv(Instr: LLVMValueRef): UInt =
    (`LLVMGetInstructionCallConv$mh`.invokeExact(Instr) as Int).toUInt()

public fun LLVMSetInstrParamAlignment(
    Instr: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    Align: UInt,
): Unit = `LLVMSetInstrParamAlignment$mh`.invokeExact(Instr, Idx.toInt(), Align.toInt()) as Unit

public fun LLVMAddCallSiteAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    A: LLVMAttributeRef,
): Unit = `LLVMAddCallSiteAttribute$mh`.invokeExact(C, Idx.toInt(), A) as Unit

public fun LLVMGetCallSiteAttributeCount(C: LLVMValueRef, Idx: LLVMAttributeIndex): UInt =
    (`LLVMGetCallSiteAttributeCount$mh`.invokeExact(C, Idx.toInt()) as Int).toUInt()

public fun LLVMGetCallSiteAttributes(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    Attrs: Pointer<LLVMAttributeRef>,
): Unit = `LLVMGetCallSiteAttributes$mh`.invokeExact(C, Idx.toInt(), Attrs) as Unit

public fun LLVMGetCallSiteEnumAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: UInt,
): LLVMAttributeRef = `LLVMGetCallSiteEnumAttribute$mh`.invokeExact(C, Idx.toInt(), KindID.toInt()) as MemorySegment

public fun LLVMGetCallSiteStringAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: Pointer<Byte>,
    KLen: UInt,
): LLVMAttributeRef = `LLVMGetCallSiteStringAttribute$mh`.invokeExact(C, Idx.toInt(), K, KLen.toInt()) as MemorySegment

public fun LLVMRemoveCallSiteEnumAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    KindID: UInt,
): Unit = `LLVMRemoveCallSiteEnumAttribute$mh`.invokeExact(C, Idx.toInt(), KindID.toInt()) as Unit

public fun LLVMRemoveCallSiteStringAttribute(
    C: LLVMValueRef,
    Idx: LLVMAttributeIndex,
    K: Pointer<Byte>,
    KLen: UInt,
): Unit = `LLVMRemoveCallSiteStringAttribute$mh`.invokeExact(C, Idx.toInt(), K, KLen.toInt()) as Unit

public fun LLVMGetCalledFunctionType(C: LLVMValueRef): LLVMTypeRef =
    `LLVMGetCalledFunctionType$mh`.invokeExact(C) as MemorySegment

public fun LLVMGetCalledValue(Instr: LLVMValueRef): LLVMValueRef =
    `LLVMGetCalledValue$mh`.invokeExact(Instr) as MemorySegment

public fun LLVMGetNumOperandBundles(C: LLVMValueRef): UInt =
    (`LLVMGetNumOperandBundles$mh`.invokeExact(C) as Int).toUInt()

public fun LLVMGetOperandBundleAtIndex(C: LLVMValueRef, Index: UInt): LLVMOperandBundleRef =
    `LLVMGetOperandBundleAtIndex$mh`.invokeExact(C, Index.toInt()) as MemorySegment

public fun LLVMIsTailCall(CallInst: LLVMValueRef): LLVMBool = `LLVMIsTailCall$mh`.invokeExact(CallInst) as Int

public fun LLVMSetTailCall(CallInst: LLVMValueRef, IsTailCall: LLVMBool): Unit =
    `LLVMSetTailCall$mh`.invokeExact(CallInst, IsTailCall) as Unit

public fun LLVMGetTailCallKind(CallInst: LLVMValueRef): LLVMTailCallKind =
    LLVMTailCallKind.fromInt(`LLVMGetTailCallKind$mh`.invokeExact(CallInst) as Int)

public fun LLVMSetTailCallKind(CallInst: LLVMValueRef, kind: LLVMTailCallKind): Unit =
    `LLVMSetTailCallKind$mh`.invokeExact(CallInst, kind.value) as Unit

public fun LLVMGetNormalDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetNormalDest$mh`.invokeExact(InvokeInst) as MemorySegment

public fun LLVMGetUnwindDest(InvokeInst: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetUnwindDest$mh`.invokeExact(InvokeInst) as MemorySegment

public fun LLVMSetNormalDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef): Unit =
    `LLVMSetNormalDest$mh`.invokeExact(InvokeInst, B) as Unit

public fun LLVMSetUnwindDest(InvokeInst: LLVMValueRef, B: LLVMBasicBlockRef): Unit =
    `LLVMSetUnwindDest$mh`.invokeExact(InvokeInst, B) as Unit

public fun LLVMGetCallBrDefaultDest(CallBr: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetCallBrDefaultDest$mh`.invokeExact(CallBr) as MemorySegment

public fun LLVMGetCallBrNumIndirectDests(CallBr: LLVMValueRef): UInt =
    (`LLVMGetCallBrNumIndirectDests$mh`.invokeExact(CallBr) as Int).toUInt()

public fun LLVMGetCallBrIndirectDest(CallBr: LLVMValueRef, Idx: UInt): LLVMBasicBlockRef =
    `LLVMGetCallBrIndirectDest$mh`.invokeExact(CallBr, Idx.toInt()) as MemorySegment

public fun LLVMGetNumSuccessors(Term: LLVMValueRef): UInt =
    (`LLVMGetNumSuccessors$mh`.invokeExact(Term) as Int).toUInt()

public fun LLVMGetSuccessor(Term: LLVMValueRef, i: UInt): LLVMBasicBlockRef =
    `LLVMGetSuccessor$mh`.invokeExact(Term, i.toInt()) as MemorySegment

public fun LLVMSetSuccessor(
    Term: LLVMValueRef,
    i: UInt,
    block: LLVMBasicBlockRef,
): Unit = `LLVMSetSuccessor$mh`.invokeExact(Term, i.toInt(), block) as Unit

public fun LLVMIsConditional(Branch: LLVMValueRef): LLVMBool = `LLVMIsConditional$mh`.invokeExact(Branch) as Int

public fun LLVMGetCondition(Branch: LLVMValueRef): LLVMValueRef =
    `LLVMGetCondition$mh`.invokeExact(Branch) as MemorySegment

public fun LLVMSetCondition(Branch: LLVMValueRef, Cond: LLVMValueRef): Unit =
    `LLVMSetCondition$mh`.invokeExact(Branch, Cond) as Unit

public fun LLVMGetSwitchDefaultDest(SwitchInstr: LLVMValueRef): LLVMBasicBlockRef =
    `LLVMGetSwitchDefaultDest$mh`.invokeExact(SwitchInstr) as MemorySegment

public fun LLVMGetAllocatedType(Alloca: LLVMValueRef): LLVMTypeRef =
    `LLVMGetAllocatedType$mh`.invokeExact(Alloca) as MemorySegment

public fun LLVMIsInBounds(GEP: LLVMValueRef): LLVMBool = `LLVMIsInBounds$mh`.invokeExact(GEP) as Int

public fun LLVMSetIsInBounds(GEP: LLVMValueRef, InBounds: LLVMBool): Unit =
    `LLVMSetIsInBounds$mh`.invokeExact(GEP, InBounds) as Unit

public fun LLVMGetGEPSourceElementType(GEP: LLVMValueRef): LLVMTypeRef =
    `LLVMGetGEPSourceElementType$mh`.invokeExact(GEP) as MemorySegment

public fun LLVMGEPGetNoWrapFlags(GEP: LLVMValueRef): LLVMGEPNoWrapFlags =
    (`LLVMGEPGetNoWrapFlags$mh`.invokeExact(GEP) as Int).toUInt()

public fun LLVMGEPSetNoWrapFlags(GEP: LLVMValueRef, NoWrapFlags: LLVMGEPNoWrapFlags): Unit =
    `LLVMGEPSetNoWrapFlags$mh`.invokeExact(GEP, NoWrapFlags.toInt()) as Unit

public fun LLVMAddIncoming(
    PhiNode: LLVMValueRef,
    IncomingValues: Pointer<LLVMValueRef>,
    IncomingBlocks: Pointer<LLVMBasicBlockRef>,
    Count: UInt,
): Unit = `LLVMAddIncoming$mh`.invokeExact(PhiNode, IncomingValues, IncomingBlocks, Count.toInt()) as Unit

public fun LLVMCountIncoming(PhiNode: LLVMValueRef): UInt =
    (`LLVMCountIncoming$mh`.invokeExact(PhiNode) as Int).toUInt()

public fun LLVMGetIncomingValue(PhiNode: LLVMValueRef, Index: UInt): LLVMValueRef =
    `LLVMGetIncomingValue$mh`.invokeExact(PhiNode, Index.toInt()) as MemorySegment

public fun LLVMGetIncomingBlock(PhiNode: LLVMValueRef, Index: UInt): LLVMBasicBlockRef =
    `LLVMGetIncomingBlock$mh`.invokeExact(PhiNode, Index.toInt()) as MemorySegment

public fun LLVMGetNumIndices(Inst: LLVMValueRef): UInt = (`LLVMGetNumIndices$mh`.invokeExact(Inst) as Int).toUInt()

public fun LLVMGetIndices(Inst: LLVMValueRef): Pointer<UInt> = `LLVMGetIndices$mh`.invokeExact(Inst) as MemorySegment

public fun LLVMCreateBuilderInContext(C: LLVMContextRef): LLVMBuilderRef =
    `LLVMCreateBuilderInContext$mh`.invokeExact(C) as MemorySegment

public fun LLVMCreateBuilder(): LLVMBuilderRef = `LLVMCreateBuilder$mh`.invokeExact() as MemorySegment

public fun LLVMPositionBuilder(
    Builder: LLVMBuilderRef,
    Block: LLVMBasicBlockRef,
    Instr: LLVMValueRef,
): Unit = `LLVMPositionBuilder$mh`.invokeExact(Builder, Block, Instr) as Unit

public fun LLVMPositionBuilderBeforeDbgRecords(
    Builder: LLVMBuilderRef,
    Block: LLVMBasicBlockRef,
    Inst: LLVMValueRef,
): Unit = `LLVMPositionBuilderBeforeDbgRecords$mh`.invokeExact(Builder, Block, Inst) as Unit

public fun LLVMPositionBuilderBefore(Builder: LLVMBuilderRef, Instr: LLVMValueRef): Unit =
    `LLVMPositionBuilderBefore$mh`.invokeExact(Builder, Instr) as Unit

public fun LLVMPositionBuilderBeforeInstrAndDbgRecords(Builder: LLVMBuilderRef, Instr: LLVMValueRef): Unit =
    `LLVMPositionBuilderBeforeInstrAndDbgRecords$mh`.invokeExact(Builder, Instr) as Unit

public fun LLVMPositionBuilderAtEnd(Builder: LLVMBuilderRef, Block: LLVMBasicBlockRef): Unit =
    `LLVMPositionBuilderAtEnd$mh`.invokeExact(Builder, Block) as Unit

public fun LLVMGetInsertBlock(Builder: LLVMBuilderRef): LLVMBasicBlockRef =
    `LLVMGetInsertBlock$mh`.invokeExact(Builder) as MemorySegment

public fun LLVMClearInsertionPosition(Builder: LLVMBuilderRef): Unit =
    `LLVMClearInsertionPosition$mh`.invokeExact(Builder) as Unit

public fun LLVMInsertIntoBuilder(Builder: LLVMBuilderRef, Instr: LLVMValueRef): Unit =
    `LLVMInsertIntoBuilder$mh`.invokeExact(Builder, Instr) as Unit

public fun LLVMInsertIntoBuilderWithName(
    Builder: LLVMBuilderRef,
    Instr: LLVMValueRef,
    Name: Pointer<Byte>,
): Unit = `LLVMInsertIntoBuilderWithName$mh`.invokeExact(Builder, Instr, Name) as Unit

public fun LLVMDisposeBuilder(Builder: LLVMBuilderRef): Unit = `LLVMDisposeBuilder$mh`.invokeExact(Builder) as Unit

public fun LLVMGetCurrentDebugLocation2(Builder: LLVMBuilderRef): LLVMMetadataRef =
    `LLVMGetCurrentDebugLocation2$mh`.invokeExact(Builder) as MemorySegment

public fun LLVMSetCurrentDebugLocation2(Builder: LLVMBuilderRef, Loc: LLVMMetadataRef): Unit =
    `LLVMSetCurrentDebugLocation2$mh`.invokeExact(Builder, Loc) as Unit

public fun LLVMSetInstDebugLocation(Builder: LLVMBuilderRef, Inst: LLVMValueRef): Unit =
    `LLVMSetInstDebugLocation$mh`.invokeExact(Builder, Inst) as Unit

public fun LLVMAddMetadataToInst(Builder: LLVMBuilderRef, Inst: LLVMValueRef): Unit =
    `LLVMAddMetadataToInst$mh`.invokeExact(Builder, Inst) as Unit

public fun LLVMBuilderGetDefaultFPMathTag(Builder: LLVMBuilderRef): LLVMMetadataRef =
    `LLVMBuilderGetDefaultFPMathTag$mh`.invokeExact(Builder) as MemorySegment

public fun LLVMBuilderSetDefaultFPMathTag(Builder: LLVMBuilderRef, FPMathTag: LLVMMetadataRef): Unit =
    `LLVMBuilderSetDefaultFPMathTag$mh`.invokeExact(Builder, FPMathTag) as Unit

public fun LLVMGetBuilderContext(Builder: LLVMBuilderRef): LLVMContextRef =
    `LLVMGetBuilderContext$mh`.invokeExact(Builder) as MemorySegment

public fun LLVMSetCurrentDebugLocation(Builder: LLVMBuilderRef, L: LLVMValueRef): Unit =
    `LLVMSetCurrentDebugLocation$mh`.invokeExact(Builder, L) as Unit

public fun LLVMGetCurrentDebugLocation(Builder: LLVMBuilderRef): LLVMValueRef =
    `LLVMGetCurrentDebugLocation$mh`.invokeExact(Builder) as MemorySegment

public fun LLVMBuildRetVoid(`$p0`: LLVMBuilderRef): LLVMValueRef =
    `LLVMBuildRetVoid$mh`.invokeExact(`$p0`) as MemorySegment

public fun LLVMBuildRet(`$p0`: LLVMBuilderRef, V: LLVMValueRef): LLVMValueRef =
    `LLVMBuildRet$mh`.invokeExact(`$p0`, V) as MemorySegment

public fun LLVMBuildAggregateRet(
    `$p0`: LLVMBuilderRef,
    RetVals: Pointer<LLVMValueRef>,
    N: UInt,
): LLVMValueRef = `LLVMBuildAggregateRet$mh`.invokeExact(`$p0`, RetVals, N.toInt()) as MemorySegment

public fun LLVMBuildBr(`$p0`: LLVMBuilderRef, Dest: LLVMBasicBlockRef): LLVMValueRef =
    `LLVMBuildBr$mh`.invokeExact(`$p0`, Dest) as MemorySegment

public fun LLVMBuildCondBr(
    `$p0`: LLVMBuilderRef,
    If: LLVMValueRef,
    Then: LLVMBasicBlockRef,
    Else: LLVMBasicBlockRef,
): LLVMValueRef = `LLVMBuildCondBr$mh`.invokeExact(`$p0`, If, Then, Else) as MemorySegment

public fun LLVMBuildSwitch(
    `$p0`: LLVMBuilderRef,
    V: LLVMValueRef,
    Else: LLVMBasicBlockRef,
    NumCases: UInt,
): LLVMValueRef = `LLVMBuildSwitch$mh`.invokeExact(`$p0`, V, Else, NumCases.toInt()) as MemorySegment

public fun LLVMBuildIndirectBr(
    B: LLVMBuilderRef,
    Addr: LLVMValueRef,
    NumDests: UInt,
): LLVMValueRef = `LLVMBuildIndirectBr$mh`.invokeExact(B, Addr, NumDests.toInt()) as MemorySegment

public fun LLVMBuildCallBr(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Fn: LLVMValueRef,
    DefaultDest: LLVMBasicBlockRef,
    IndirectDests: Pointer<LLVMBasicBlockRef>,
    NumIndirectDests: UInt,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
    Bundles: Pointer<LLVMOperandBundleRef>,
    NumBundles: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCallBr$mh`.invokeExact(
    B,
    Ty,
    Fn,
    DefaultDest,
    IndirectDests,
    NumIndirectDests.toInt(),
    Args,
    NumArgs.toInt(),
    Bundles,
    NumBundles.toInt(),
    Name,
) as MemorySegment

public fun LLVMBuildInvoke2(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Fn: LLVMValueRef,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
    Then: LLVMBasicBlockRef,
    Catch: LLVMBasicBlockRef,
    Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildInvoke2$mh`.invokeExact(`$p0`, Ty, Fn, Args, NumArgs.toInt(), Then, Catch, Name) as MemorySegment

public fun LLVMBuildInvokeWithOperandBundles(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Fn: LLVMValueRef,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
    Then: LLVMBasicBlockRef,
    Catch: LLVMBasicBlockRef,
    Bundles: Pointer<LLVMOperandBundleRef>,
    NumBundles: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildInvokeWithOperandBundles$mh`.invokeExact(
    `$p0`,
    Ty,
    Fn,
    Args,
    NumArgs.toInt(),
    Then,
    Catch,
    Bundles,
    NumBundles.toInt(),
    Name,
) as MemorySegment

public fun LLVMBuildUnreachable(`$p0`: LLVMBuilderRef): LLVMValueRef =
    `LLVMBuildUnreachable$mh`.invokeExact(`$p0`) as MemorySegment

public fun LLVMBuildResume(B: LLVMBuilderRef, Exn: LLVMValueRef): LLVMValueRef =
    `LLVMBuildResume$mh`.invokeExact(B, Exn) as MemorySegment

public fun LLVMBuildLandingPad(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    PersFn: LLVMValueRef,
    NumClauses: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildLandingPad$mh`.invokeExact(B, Ty, PersFn, NumClauses.toInt(), Name) as MemorySegment

public fun LLVMBuildCleanupRet(
    B: LLVMBuilderRef,
    CatchPad: LLVMValueRef,
    BB: LLVMBasicBlockRef,
): LLVMValueRef = `LLVMBuildCleanupRet$mh`.invokeExact(B, CatchPad, BB) as MemorySegment

public fun LLVMBuildCatchRet(
    B: LLVMBuilderRef,
    CatchPad: LLVMValueRef,
    BB: LLVMBasicBlockRef,
): LLVMValueRef = `LLVMBuildCatchRet$mh`.invokeExact(B, CatchPad, BB) as MemorySegment

public fun LLVMBuildCatchPad(
    B: LLVMBuilderRef,
    ParentPad: LLVMValueRef,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCatchPad$mh`.invokeExact(B, ParentPad, Args, NumArgs.toInt(), Name) as MemorySegment

public fun LLVMBuildCleanupPad(
    B: LLVMBuilderRef,
    ParentPad: LLVMValueRef,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCleanupPad$mh`.invokeExact(B, ParentPad, Args, NumArgs.toInt(), Name) as MemorySegment

public fun LLVMBuildCatchSwitch(
    B: LLVMBuilderRef,
    ParentPad: LLVMValueRef,
    UnwindBB: LLVMBasicBlockRef,
    NumHandlers: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildCatchSwitch$mh`.invokeExact(B, ParentPad, UnwindBB, NumHandlers.toInt(), Name) as MemorySegment

public fun LLVMAddCase(
    Switch: LLVMValueRef,
    OnVal: LLVMValueRef,
    Dest: LLVMBasicBlockRef,
): Unit = `LLVMAddCase$mh`.invokeExact(Switch, OnVal, Dest) as Unit

public fun LLVMAddDestination(IndirectBr: LLVMValueRef, Dest: LLVMBasicBlockRef): Unit =
    `LLVMAddDestination$mh`.invokeExact(IndirectBr, Dest) as Unit

public fun LLVMGetNumClauses(LandingPad: LLVMValueRef): UInt =
    (`LLVMGetNumClauses$mh`.invokeExact(LandingPad) as Int).toUInt()

public fun LLVMGetClause(LandingPad: LLVMValueRef, Idx: UInt): LLVMValueRef =
    `LLVMGetClause$mh`.invokeExact(LandingPad, Idx.toInt()) as MemorySegment

public fun LLVMAddClause(LandingPad: LLVMValueRef, ClauseVal: LLVMValueRef): Unit =
    `LLVMAddClause$mh`.invokeExact(LandingPad, ClauseVal) as Unit

public fun LLVMIsCleanup(LandingPad: LLVMValueRef): LLVMBool = `LLVMIsCleanup$mh`.invokeExact(LandingPad) as Int

public fun LLVMSetCleanup(LandingPad: LLVMValueRef, Val: LLVMBool): Unit =
    `LLVMSetCleanup$mh`.invokeExact(LandingPad, Val) as Unit

public fun LLVMAddHandler(CatchSwitch: LLVMValueRef, Dest: LLVMBasicBlockRef): Unit =
    `LLVMAddHandler$mh`.invokeExact(CatchSwitch, Dest) as Unit

public fun LLVMGetNumHandlers(CatchSwitch: LLVMValueRef): UInt =
    (`LLVMGetNumHandlers$mh`.invokeExact(CatchSwitch) as Int).toUInt()

public fun LLVMGetHandlers(CatchSwitch: LLVMValueRef, Handlers: Pointer<LLVMBasicBlockRef>): Unit =
    `LLVMGetHandlers$mh`.invokeExact(CatchSwitch, Handlers) as Unit

public fun LLVMGetArgOperand(Funclet: LLVMValueRef, i: UInt): LLVMValueRef =
    `LLVMGetArgOperand$mh`.invokeExact(Funclet, i.toInt()) as MemorySegment

public fun LLVMSetArgOperand(
    Funclet: LLVMValueRef,
    i: UInt,
    `value`: LLVMValueRef,
): Unit = `LLVMSetArgOperand$mh`.invokeExact(Funclet, i.toInt(), `value`) as Unit

public fun LLVMGetParentCatchSwitch(CatchPad: LLVMValueRef): LLVMValueRef =
    `LLVMGetParentCatchSwitch$mh`.invokeExact(CatchPad) as MemorySegment

public fun LLVMSetParentCatchSwitch(CatchPad: LLVMValueRef, CatchSwitch: LLVMValueRef): Unit =
    `LLVMSetParentCatchSwitch$mh`.invokeExact(CatchPad, CatchSwitch) as Unit

public fun LLVMBuildAdd(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAdd$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildNSWAdd(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWAdd$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildNUWAdd(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWAdd$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildFAdd(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFAdd$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildSub(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSub$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildNSWSub(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWSub$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildNUWSub(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWSub$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildFSub(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFSub$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildMul(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildMul$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildNSWMul(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWMul$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildNUWMul(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWMul$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildFMul(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFMul$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildUDiv(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildUDiv$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildExactUDiv(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExactUDiv$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildSDiv(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSDiv$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildExactSDiv(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExactSDiv$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildFDiv(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFDiv$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildURem(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildURem$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildSRem(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSRem$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildFRem(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFRem$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildShl(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildShl$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildLShr(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildLShr$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildAShr(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAShr$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildAnd(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAnd$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildOr(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildOr$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildXor(
    `$p0`: LLVMBuilderRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildXor$mh`.invokeExact(`$p0`, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildBinOp(
    B: LLVMBuilderRef,
    Op: LLVMOpcode,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildBinOp$mh`.invokeExact(B, Op.value, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildNeg(
    `$p0`: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNeg$mh`.invokeExact(`$p0`, V, Name) as MemorySegment

public fun LLVMBuildNSWNeg(
    B: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNSWNeg$mh`.invokeExact(B, V, Name) as MemorySegment

public fun LLVMBuildNUWNeg(
    B: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNUWNeg$mh`.invokeExact(B, V, Name) as MemorySegment

public fun LLVMBuildFNeg(
    `$p0`: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFNeg$mh`.invokeExact(`$p0`, V, Name) as MemorySegment

public fun LLVMBuildNot(
    `$p0`: LLVMBuilderRef,
    V: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildNot$mh`.invokeExact(`$p0`, V, Name) as MemorySegment

public fun LLVMGetNUW(ArithInst: LLVMValueRef): LLVMBool = `LLVMGetNUW$mh`.invokeExact(ArithInst) as Int

public fun LLVMSetNUW(ArithInst: LLVMValueRef, HasNUW: LLVMBool): Unit =
    `LLVMSetNUW$mh`.invokeExact(ArithInst, HasNUW) as Unit

public fun LLVMGetNSW(ArithInst: LLVMValueRef): LLVMBool = `LLVMGetNSW$mh`.invokeExact(ArithInst) as Int

public fun LLVMSetNSW(ArithInst: LLVMValueRef, HasNSW: LLVMBool): Unit =
    `LLVMSetNSW$mh`.invokeExact(ArithInst, HasNSW) as Unit

public fun LLVMGetExact(DivOrShrInst: LLVMValueRef): LLVMBool = `LLVMGetExact$mh`.invokeExact(DivOrShrInst) as Int

public fun LLVMSetExact(DivOrShrInst: LLVMValueRef, IsExact: LLVMBool): Unit =
    `LLVMSetExact$mh`.invokeExact(DivOrShrInst, IsExact) as Unit

public fun LLVMGetNNeg(NonNegInst: LLVMValueRef): LLVMBool = `LLVMGetNNeg$mh`.invokeExact(NonNegInst) as Int

public fun LLVMSetNNeg(NonNegInst: LLVMValueRef, IsNonNeg: LLVMBool): Unit =
    `LLVMSetNNeg$mh`.invokeExact(NonNegInst, IsNonNeg) as Unit

public fun LLVMGetFastMathFlags(FPMathInst: LLVMValueRef): LLVMFastMathFlags =
    (`LLVMGetFastMathFlags$mh`.invokeExact(FPMathInst) as Int).toUInt()

public fun LLVMSetFastMathFlags(FPMathInst: LLVMValueRef, FMF: LLVMFastMathFlags): Unit =
    `LLVMSetFastMathFlags$mh`.invokeExact(FPMathInst, FMF.toInt()) as Unit

public fun LLVMCanValueUseFastMathFlags(Inst: LLVMValueRef): LLVMBool =
    `LLVMCanValueUseFastMathFlags$mh`.invokeExact(Inst) as Int

public fun LLVMGetIsDisjoint(Inst: LLVMValueRef): LLVMBool = `LLVMGetIsDisjoint$mh`.invokeExact(Inst) as Int

public fun LLVMSetIsDisjoint(Inst: LLVMValueRef, IsDisjoint: LLVMBool): Unit =
    `LLVMSetIsDisjoint$mh`.invokeExact(Inst, IsDisjoint) as Unit

public fun LLVMBuildMalloc(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildMalloc$mh`.invokeExact(`$p0`, Ty, Name) as MemorySegment

public fun LLVMBuildArrayMalloc(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Val: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildArrayMalloc$mh`.invokeExact(`$p0`, Ty, Val, Name) as MemorySegment

public fun LLVMBuildMemSet(
    B: LLVMBuilderRef,
    Ptr: LLVMValueRef,
    Val: LLVMValueRef,
    Len: LLVMValueRef,
    Align: UInt,
): LLVMValueRef = `LLVMBuildMemSet$mh`.invokeExact(B, Ptr, Val, Len, Align.toInt()) as MemorySegment

public fun LLVMBuildMemCpy(
    B: LLVMBuilderRef,
    Dst: LLVMValueRef,
    DstAlign: UInt,
    Src: LLVMValueRef,
    SrcAlign: UInt,
    Size: LLVMValueRef,
): LLVMValueRef =
    `LLVMBuildMemCpy$mh`.invokeExact(B, Dst, DstAlign.toInt(), Src, SrcAlign.toInt(), Size) as MemorySegment

public fun LLVMBuildMemMove(
    B: LLVMBuilderRef,
    Dst: LLVMValueRef,
    DstAlign: UInt,
    Src: LLVMValueRef,
    SrcAlign: UInt,
    Size: LLVMValueRef,
): LLVMValueRef =
    `LLVMBuildMemMove$mh`.invokeExact(B, Dst, DstAlign.toInt(), Src, SrcAlign.toInt(), Size) as MemorySegment

public fun LLVMBuildAlloca(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAlloca$mh`.invokeExact(`$p0`, Ty, Name) as MemorySegment

public fun LLVMBuildArrayAlloca(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Val: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildArrayAlloca$mh`.invokeExact(`$p0`, Ty, Val, Name) as MemorySegment

public fun LLVMBuildFree(`$p0`: LLVMBuilderRef, PointerVal: LLVMValueRef): LLVMValueRef =
    `LLVMBuildFree$mh`.invokeExact(`$p0`, PointerVal) as MemorySegment

public fun LLVMBuildLoad2(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    PointerVal: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildLoad2$mh`.invokeExact(`$p0`, Ty, PointerVal, Name) as MemorySegment

public fun LLVMBuildStore(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    Ptr: LLVMValueRef,
): LLVMValueRef = `LLVMBuildStore$mh`.invokeExact(`$p0`, Val, Ptr) as MemorySegment

public fun LLVMBuildGEP2(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Pointer: LLVMValueRef,
    Indices: Pointer<LLVMValueRef>,
    NumIndices: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildGEP2$mh`.invokeExact(B, Ty, Pointer, Indices, NumIndices.toInt(), Name) as MemorySegment

public fun LLVMBuildInBoundsGEP2(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Pointer: LLVMValueRef,
    Indices: Pointer<LLVMValueRef>,
    NumIndices: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef =
    `LLVMBuildInBoundsGEP2$mh`.invokeExact(B, Ty, Pointer, Indices, NumIndices.toInt(), Name) as MemorySegment

public fun LLVMBuildGEPWithNoWrapFlags(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Pointer: LLVMValueRef,
    Indices: Pointer<LLVMValueRef>,
    NumIndices: UInt,
    Name: Pointer<Byte>,
    NoWrapFlags: LLVMGEPNoWrapFlags,
): LLVMValueRef = `LLVMBuildGEPWithNoWrapFlags$mh`.invokeExact(
    B,
    Ty,
    Pointer,
    Indices,
    NumIndices.toInt(),
    Name,
    NoWrapFlags.toInt(),
) as MemorySegment

public fun LLVMBuildStructGEP2(
    B: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Pointer: LLVMValueRef,
    Idx: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildStructGEP2$mh`.invokeExact(B, Ty, Pointer, Idx.toInt(), Name) as MemorySegment

public fun LLVMBuildGlobalString(
    B: LLVMBuilderRef,
    Str: Pointer<Byte>,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildGlobalString$mh`.invokeExact(B, Str, Name) as MemorySegment

public fun LLVMBuildGlobalStringPtr(
    B: LLVMBuilderRef,
    Str: Pointer<Byte>,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildGlobalStringPtr$mh`.invokeExact(B, Str, Name) as MemorySegment

public fun LLVMGetVolatile(MemoryAccessInst: LLVMValueRef): LLVMBool =
    `LLVMGetVolatile$mh`.invokeExact(MemoryAccessInst) as Int

public fun LLVMSetVolatile(MemoryAccessInst: LLVMValueRef, IsVolatile: LLVMBool): Unit =
    `LLVMSetVolatile$mh`.invokeExact(MemoryAccessInst, IsVolatile) as Unit

public fun LLVMGetWeak(CmpXchgInst: LLVMValueRef): LLVMBool = `LLVMGetWeak$mh`.invokeExact(CmpXchgInst) as Int

public fun LLVMSetWeak(CmpXchgInst: LLVMValueRef, IsWeak: LLVMBool): Unit =
    `LLVMSetWeak$mh`.invokeExact(CmpXchgInst, IsWeak) as Unit

public fun LLVMGetOrdering(MemoryAccessInst: LLVMValueRef): LLVMAtomicOrdering =
    LLVMAtomicOrdering.fromInt(`LLVMGetOrdering$mh`.invokeExact(MemoryAccessInst) as Int)

public fun LLVMSetOrdering(MemoryAccessInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): Unit =
    `LLVMSetOrdering$mh`.invokeExact(MemoryAccessInst, Ordering.value) as Unit

public fun LLVMGetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef): LLVMAtomicRMWBinOp =
    LLVMAtomicRMWBinOp.fromInt(`LLVMGetAtomicRMWBinOp$mh`.invokeExact(AtomicRMWInst) as Int)

public fun LLVMSetAtomicRMWBinOp(AtomicRMWInst: LLVMValueRef, BinOp: LLVMAtomicRMWBinOp): Unit =
    `LLVMSetAtomicRMWBinOp$mh`.invokeExact(AtomicRMWInst, BinOp.value) as Unit

public fun LLVMBuildTrunc(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildTrunc$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildZExt(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildZExt$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildSExt(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSExt$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildFPToUI(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPToUI$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildFPToSI(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPToSI$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildUIToFP(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildUIToFP$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildSIToFP(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSIToFP$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildFPTrunc(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPTrunc$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildFPExt(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPExt$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildPtrToInt(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPtrToInt$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildIntToPtr(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIntToPtr$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildBitCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildBitCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildAddrSpaceCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildAddrSpaceCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildZExtOrBitCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildZExtOrBitCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildSExtOrBitCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSExtOrBitCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildTruncOrBitCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildTruncOrBitCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildCast(
    B: LLVMBuilderRef,
    Op: LLVMOpcode,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCast$mh`.invokeExact(B, Op.value, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildPointerCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPointerCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildIntCast2(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    IsSigned: LLVMBool,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIntCast2$mh`.invokeExact(`$p0`, Val, DestTy, IsSigned, Name) as MemorySegment

public fun LLVMBuildFPCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFPCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMBuildIntCast(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    DestTy: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIntCast$mh`.invokeExact(`$p0`, Val, DestTy, Name) as MemorySegment

public fun LLVMGetCastOpcode(
    Src: LLVMValueRef,
    SrcIsSigned: LLVMBool,
    DestTy: LLVMTypeRef,
    DestIsSigned: LLVMBool,
): LLVMOpcode = LLVMOpcode.fromInt(`LLVMGetCastOpcode$mh`.invokeExact(Src, SrcIsSigned, DestTy, DestIsSigned) as Int)

public fun LLVMBuildICmp(
    `$p0`: LLVMBuilderRef,
    Op: LLVMIntPredicate,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildICmp$mh`.invokeExact(`$p0`, Op.value, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildFCmp(
    `$p0`: LLVMBuilderRef,
    Op: LLVMRealPredicate,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFCmp$mh`.invokeExact(`$p0`, Op.value, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildPhi(
    `$p0`: LLVMBuilderRef,
    Ty: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPhi$mh`.invokeExact(`$p0`, Ty, Name) as MemorySegment

public fun LLVMBuildCall2(
    `$p0`: LLVMBuilderRef,
    `$p1`: LLVMTypeRef,
    Fn: LLVMValueRef,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCall2$mh`.invokeExact(`$p0`, `$p1`, Fn, Args, NumArgs.toInt(), Name) as MemorySegment

public fun LLVMBuildCallWithOperandBundles(
    `$p0`: LLVMBuilderRef,
    `$p1`: LLVMTypeRef,
    Fn: LLVMValueRef,
    Args: Pointer<LLVMValueRef>,
    NumArgs: UInt,
    Bundles: Pointer<LLVMOperandBundleRef>,
    NumBundles: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildCallWithOperandBundles$mh`.invokeExact(
    `$p0`,
    `$p1`,
    Fn,
    Args,
    NumArgs.toInt(),
    Bundles,
    NumBundles.toInt(),
    Name,
) as MemorySegment

public fun LLVMBuildSelect(
    `$p0`: LLVMBuilderRef,
    If: LLVMValueRef,
    Then: LLVMValueRef,
    Else: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildSelect$mh`.invokeExact(`$p0`, If, Then, Else, Name) as MemorySegment

public fun LLVMBuildVAArg(
    `$p0`: LLVMBuilderRef,
    List: LLVMValueRef,
    Ty: LLVMTypeRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildVAArg$mh`.invokeExact(`$p0`, List, Ty, Name) as MemorySegment

public fun LLVMBuildExtractElement(
    `$p0`: LLVMBuilderRef,
    VecVal: LLVMValueRef,
    Index: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExtractElement$mh`.invokeExact(`$p0`, VecVal, Index, Name) as MemorySegment

public fun LLVMBuildInsertElement(
    `$p0`: LLVMBuilderRef,
    VecVal: LLVMValueRef,
    EltVal: LLVMValueRef,
    Index: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildInsertElement$mh`.invokeExact(`$p0`, VecVal, EltVal, Index, Name) as MemorySegment

public fun LLVMBuildShuffleVector(
    `$p0`: LLVMBuilderRef,
    V1: LLVMValueRef,
    V2: LLVMValueRef,
    Mask: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildShuffleVector$mh`.invokeExact(`$p0`, V1, V2, Mask, Name) as MemorySegment

public fun LLVMBuildExtractValue(
    `$p0`: LLVMBuilderRef,
    AggVal: LLVMValueRef,
    Index: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildExtractValue$mh`.invokeExact(`$p0`, AggVal, Index.toInt(), Name) as MemorySegment

public fun LLVMBuildInsertValue(
    `$p0`: LLVMBuilderRef,
    AggVal: LLVMValueRef,
    EltVal: LLVMValueRef,
    Index: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildInsertValue$mh`.invokeExact(`$p0`, AggVal, EltVal, Index.toInt(), Name) as MemorySegment

public fun LLVMBuildFreeze(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFreeze$mh`.invokeExact(`$p0`, Val, Name) as MemorySegment

public fun LLVMBuildIsNull(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIsNull$mh`.invokeExact(`$p0`, Val, Name) as MemorySegment

public fun LLVMBuildIsNotNull(
    `$p0`: LLVMBuilderRef,
    Val: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildIsNotNull$mh`.invokeExact(`$p0`, Val, Name) as MemorySegment

public fun LLVMBuildPtrDiff2(
    `$p0`: LLVMBuilderRef,
    ElemTy: LLVMTypeRef,
    LHS: LLVMValueRef,
    RHS: LLVMValueRef,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildPtrDiff2$mh`.invokeExact(`$p0`, ElemTy, LHS, RHS, Name) as MemorySegment

public fun LLVMBuildFence(
    B: LLVMBuilderRef,
    ordering: LLVMAtomicOrdering,
    singleThread: LLVMBool,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFence$mh`.invokeExact(B, ordering.value, singleThread, Name) as MemorySegment

public fun LLVMBuildFenceSyncScope(
    B: LLVMBuilderRef,
    ordering: LLVMAtomicOrdering,
    SSID: UInt,
    Name: Pointer<Byte>,
): LLVMValueRef = `LLVMBuildFenceSyncScope$mh`.invokeExact(B, ordering.value, SSID.toInt(), Name) as MemorySegment

public fun LLVMBuildAtomicRMW(
    B: LLVMBuilderRef,
    op: LLVMAtomicRMWBinOp,
    PTR: LLVMValueRef,
    Val: LLVMValueRef,
    ordering: LLVMAtomicOrdering,
    singleThread: LLVMBool,
): LLVMValueRef =
    `LLVMBuildAtomicRMW$mh`.invokeExact(B, op.value, PTR, Val, ordering.value, singleThread) as MemorySegment

public fun LLVMBuildAtomicRMWSyncScope(
    B: LLVMBuilderRef,
    op: LLVMAtomicRMWBinOp,
    PTR: LLVMValueRef,
    Val: LLVMValueRef,
    ordering: LLVMAtomicOrdering,
    SSID: UInt,
): LLVMValueRef =
    `LLVMBuildAtomicRMWSyncScope$mh`.invokeExact(B, op.value, PTR, Val, ordering.value, SSID.toInt()) as MemorySegment

public fun LLVMBuildAtomicCmpXchg(
    B: LLVMBuilderRef,
    Ptr: LLVMValueRef,
    Cmp: LLVMValueRef,
    New: LLVMValueRef,
    SuccessOrdering: LLVMAtomicOrdering,
    FailureOrdering: LLVMAtomicOrdering,
    SingleThread: LLVMBool,
): LLVMValueRef = `LLVMBuildAtomicCmpXchg$mh`.invokeExact(
    B,
    Ptr,
    Cmp,
    New,
    SuccessOrdering.value,
    FailureOrdering.value,
    SingleThread,
) as MemorySegment

public fun LLVMBuildAtomicCmpXchgSyncScope(
    B: LLVMBuilderRef,
    Ptr: LLVMValueRef,
    Cmp: LLVMValueRef,
    New: LLVMValueRef,
    SuccessOrdering: LLVMAtomicOrdering,
    FailureOrdering: LLVMAtomicOrdering,
    SSID: UInt,
): LLVMValueRef = `LLVMBuildAtomicCmpXchgSyncScope$mh`.invokeExact(
    B,
    Ptr,
    Cmp,
    New,
    SuccessOrdering.value,
    FailureOrdering.value,
    SSID.toInt(),
) as MemorySegment

public fun LLVMGetNumMaskElements(ShuffleVectorInst: LLVMValueRef): UInt =
    (`LLVMGetNumMaskElements$mh`.invokeExact(ShuffleVectorInst) as Int).toUInt()

public fun LLVMGetUndefMaskElem(): Int = `LLVMGetUndefMaskElem$mh`.invokeExact() as Int

public fun LLVMGetMaskValue(ShuffleVectorInst: LLVMValueRef, Elt: UInt): Int =
    `LLVMGetMaskValue$mh`.invokeExact(ShuffleVectorInst, Elt.toInt()) as Int

public fun LLVMIsAtomicSingleThread(AtomicInst: LLVMValueRef): LLVMBool =
    `LLVMIsAtomicSingleThread$mh`.invokeExact(AtomicInst) as Int

public fun LLVMSetAtomicSingleThread(AtomicInst: LLVMValueRef, SingleThread: LLVMBool): Unit =
    `LLVMSetAtomicSingleThread$mh`.invokeExact(AtomicInst, SingleThread) as Unit

public fun LLVMIsAtomic(Inst: LLVMValueRef): LLVMBool = `LLVMIsAtomic$mh`.invokeExact(Inst) as Int

public fun LLVMGetAtomicSyncScopeID(AtomicInst: LLVMValueRef): UInt =
    (`LLVMGetAtomicSyncScopeID$mh`.invokeExact(AtomicInst) as Int).toUInt()

public fun LLVMSetAtomicSyncScopeID(AtomicInst: LLVMValueRef, SSID: UInt): Unit =
    `LLVMSetAtomicSyncScopeID$mh`.invokeExact(AtomicInst, SSID.toInt()) as Unit

public fun LLVMGetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering =
    LLVMAtomicOrdering.fromInt(`LLVMGetCmpXchgSuccessOrdering$mh`.invokeExact(CmpXchgInst) as Int)

public fun LLVMSetCmpXchgSuccessOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): Unit =
    `LLVMSetCmpXchgSuccessOrdering$mh`.invokeExact(CmpXchgInst, Ordering.value) as Unit

public fun LLVMGetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef): LLVMAtomicOrdering =
    LLVMAtomicOrdering.fromInt(`LLVMGetCmpXchgFailureOrdering$mh`.invokeExact(CmpXchgInst) as Int)

public fun LLVMSetCmpXchgFailureOrdering(CmpXchgInst: LLVMValueRef, Ordering: LLVMAtomicOrdering): Unit =
    `LLVMSetCmpXchgFailureOrdering$mh`.invokeExact(CmpXchgInst, Ordering.value) as Unit

public fun LLVMCreateModuleProviderForExistingModule(M: LLVMModuleRef): LLVMModuleProviderRef =
    `LLVMCreateModuleProviderForExistingModule$mh`.invokeExact(M) as MemorySegment

public fun LLVMDisposeModuleProvider(M: LLVMModuleProviderRef): Unit =
    `LLVMDisposeModuleProvider$mh`.invokeExact(M) as Unit

public fun LLVMCreateMemoryBufferWithContentsOfFile(
    Path: Pointer<Byte>,
    OutMemBuf: Pointer<LLVMMemoryBufferRef>,
    OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateMemoryBufferWithContentsOfFile$mh`.invokeExact(Path, OutMemBuf, OutMessage) as Int

public fun LLVMCreateMemoryBufferWithSTDIN(
    OutMemBuf: Pointer<LLVMMemoryBufferRef>,
    OutMessage: Pointer<Pointer<Byte>>
): LLVMBool = `LLVMCreateMemoryBufferWithSTDIN$mh`.invokeExact(OutMemBuf, OutMessage) as Int

public fun LLVMCreateMemoryBufferWithMemoryRange(
    InputData: Pointer<Byte>,
    InputDataLength: ULong,
    BufferName: Pointer<Byte>,
    RequiresNullTerminator: LLVMBool,
): LLVMMemoryBufferRef = `LLVMCreateMemoryBufferWithMemoryRange$mh`.invokeExact(
    InputData,
    InputDataLength.toLong(),
    BufferName,
    RequiresNullTerminator,
) as MemorySegment

public fun LLVMCreateMemoryBufferWithMemoryRangeCopy(
    InputData: Pointer<Byte>,
    InputDataLength: ULong,
    BufferName: Pointer<Byte>,
): LLVMMemoryBufferRef = `LLVMCreateMemoryBufferWithMemoryRangeCopy$mh`.invokeExact(
    InputData,
    InputDataLength.toLong(),
    BufferName,
) as MemorySegment

public fun LLVMGetBufferStart(MemBuf: LLVMMemoryBufferRef): Pointer<Byte> =
    `LLVMGetBufferStart$mh`.invokeExact(MemBuf) as MemorySegment

public fun LLVMGetBufferSize(MemBuf: LLVMMemoryBufferRef): ULong =
    (`LLVMGetBufferSize$mh`.invokeExact(MemBuf) as Long).toULong()

public fun LLVMDisposeMemoryBuffer(MemBuf: LLVMMemoryBufferRef): Unit =
    `LLVMDisposeMemoryBuffer$mh`.invokeExact(MemBuf) as Unit

public fun LLVMCreatePassManager(): LLVMPassManagerRef = `LLVMCreatePassManager$mh`.invokeExact() as MemorySegment

public fun LLVMCreateFunctionPassManagerForModule(M: LLVMModuleRef): LLVMPassManagerRef =
    `LLVMCreateFunctionPassManagerForModule$mh`.invokeExact(M) as MemorySegment

public fun LLVMCreateFunctionPassManager(MP: LLVMModuleProviderRef): LLVMPassManagerRef =
    `LLVMCreateFunctionPassManager$mh`.invokeExact(MP) as MemorySegment

public fun LLVMRunPassManager(PM: LLVMPassManagerRef, M: LLVMModuleRef): LLVMBool =
    `LLVMRunPassManager$mh`.invokeExact(PM, M) as Int

public fun LLVMInitializeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool =
    `LLVMInitializeFunctionPassManager$mh`.invokeExact(FPM) as Int

public fun LLVMRunFunctionPassManager(FPM: LLVMPassManagerRef, F: LLVMValueRef): LLVMBool =
    `LLVMRunFunctionPassManager$mh`.invokeExact(FPM, F) as Int

public fun LLVMFinalizeFunctionPassManager(FPM: LLVMPassManagerRef): LLVMBool =
    `LLVMFinalizeFunctionPassManager$mh`.invokeExact(FPM) as Int

public fun LLVMDisposePassManager(PM: LLVMPassManagerRef): Unit = `LLVMDisposePassManager$mh`.invokeExact(PM) as Unit

public fun LLVMStartMultithreaded(): LLVMBool = `LLVMStartMultithreaded$mh`.invokeExact() as Int

public fun LLVMStopMultithreaded(): Unit = `LLVMStopMultithreaded$mh`.invokeExact() as Unit

public fun LLVMIsMultithreaded(): LLVMBool = `LLVMIsMultithreaded$mh`.invokeExact() as Int

public fun LLVMInitializeAArch64TargetInfo(): Unit = `LLVMInitializeAArch64TargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeAMDGPUTargetInfo(): Unit = `LLVMInitializeAMDGPUTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeARMTargetInfo(): Unit = `LLVMInitializeARMTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeAVRTargetInfo(): Unit = `LLVMInitializeAVRTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeBPFTargetInfo(): Unit = `LLVMInitializeBPFTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeHexagonTargetInfo(): Unit = `LLVMInitializeHexagonTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeLanaiTargetInfo(): Unit = `LLVMInitializeLanaiTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeLoongArchTargetInfo(): Unit = `LLVMInitializeLoongArchTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeMipsTargetInfo(): Unit = `LLVMInitializeMipsTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeMSP430TargetInfo(): Unit = `LLVMInitializeMSP430TargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeNVPTXTargetInfo(): Unit = `LLVMInitializeNVPTXTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializePowerPCTargetInfo(): Unit = `LLVMInitializePowerPCTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeRISCVTargetInfo(): Unit = `LLVMInitializeRISCVTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeSparcTargetInfo(): Unit = `LLVMInitializeSparcTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeSPIRVTargetInfo(): Unit = `LLVMInitializeSPIRVTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeSystemZTargetInfo(): Unit = `LLVMInitializeSystemZTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeVETargetInfo(): Unit = `LLVMInitializeVETargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeWebAssemblyTargetInfo(): Unit = `LLVMInitializeWebAssemblyTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeX86TargetInfo(): Unit = `LLVMInitializeX86TargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeXCoreTargetInfo(): Unit = `LLVMInitializeXCoreTargetInfo$mh`.invokeExact() as Unit

public fun LLVMInitializeAArch64Target(): Unit = `LLVMInitializeAArch64Target$mh`.invokeExact() as Unit

public fun LLVMInitializeAMDGPUTarget(): Unit = `LLVMInitializeAMDGPUTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeARMTarget(): Unit = `LLVMInitializeARMTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeAVRTarget(): Unit = `LLVMInitializeAVRTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeBPFTarget(): Unit = `LLVMInitializeBPFTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeHexagonTarget(): Unit = `LLVMInitializeHexagonTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeLanaiTarget(): Unit = `LLVMInitializeLanaiTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeLoongArchTarget(): Unit = `LLVMInitializeLoongArchTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeMipsTarget(): Unit = `LLVMInitializeMipsTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeMSP430Target(): Unit = `LLVMInitializeMSP430Target$mh`.invokeExact() as Unit

public fun LLVMInitializeNVPTXTarget(): Unit = `LLVMInitializeNVPTXTarget$mh`.invokeExact() as Unit

public fun LLVMInitializePowerPCTarget(): Unit = `LLVMInitializePowerPCTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeRISCVTarget(): Unit = `LLVMInitializeRISCVTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeSparcTarget(): Unit = `LLVMInitializeSparcTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeSPIRVTarget(): Unit = `LLVMInitializeSPIRVTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeSystemZTarget(): Unit = `LLVMInitializeSystemZTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeVETarget(): Unit = `LLVMInitializeVETarget$mh`.invokeExact() as Unit

public fun LLVMInitializeWebAssemblyTarget(): Unit = `LLVMInitializeWebAssemblyTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeX86Target(): Unit = `LLVMInitializeX86Target$mh`.invokeExact() as Unit

public fun LLVMInitializeXCoreTarget(): Unit = `LLVMInitializeXCoreTarget$mh`.invokeExact() as Unit

public fun LLVMInitializeAArch64TargetMC(): Unit = `LLVMInitializeAArch64TargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeAMDGPUTargetMC(): Unit = `LLVMInitializeAMDGPUTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeARMTargetMC(): Unit = `LLVMInitializeARMTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeAVRTargetMC(): Unit = `LLVMInitializeAVRTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeBPFTargetMC(): Unit = `LLVMInitializeBPFTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeHexagonTargetMC(): Unit = `LLVMInitializeHexagonTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeLanaiTargetMC(): Unit = `LLVMInitializeLanaiTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeLoongArchTargetMC(): Unit = `LLVMInitializeLoongArchTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeMipsTargetMC(): Unit = `LLVMInitializeMipsTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeMSP430TargetMC(): Unit = `LLVMInitializeMSP430TargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeNVPTXTargetMC(): Unit = `LLVMInitializeNVPTXTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializePowerPCTargetMC(): Unit = `LLVMInitializePowerPCTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeRISCVTargetMC(): Unit = `LLVMInitializeRISCVTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeSparcTargetMC(): Unit = `LLVMInitializeSparcTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeSPIRVTargetMC(): Unit = `LLVMInitializeSPIRVTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeSystemZTargetMC(): Unit = `LLVMInitializeSystemZTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeVETargetMC(): Unit = `LLVMInitializeVETargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeWebAssemblyTargetMC(): Unit = `LLVMInitializeWebAssemblyTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeX86TargetMC(): Unit = `LLVMInitializeX86TargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeXCoreTargetMC(): Unit = `LLVMInitializeXCoreTargetMC$mh`.invokeExact() as Unit

public fun LLVMInitializeAArch64AsmPrinter(): Unit = `LLVMInitializeAArch64AsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeAMDGPUAsmPrinter(): Unit = `LLVMInitializeAMDGPUAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeARMAsmPrinter(): Unit = `LLVMInitializeARMAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeAVRAsmPrinter(): Unit = `LLVMInitializeAVRAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeBPFAsmPrinter(): Unit = `LLVMInitializeBPFAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeHexagonAsmPrinter(): Unit = `LLVMInitializeHexagonAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeLanaiAsmPrinter(): Unit = `LLVMInitializeLanaiAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeLoongArchAsmPrinter(): Unit = `LLVMInitializeLoongArchAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeMipsAsmPrinter(): Unit = `LLVMInitializeMipsAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeMSP430AsmPrinter(): Unit = `LLVMInitializeMSP430AsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeNVPTXAsmPrinter(): Unit = `LLVMInitializeNVPTXAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializePowerPCAsmPrinter(): Unit = `LLVMInitializePowerPCAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeRISCVAsmPrinter(): Unit = `LLVMInitializeRISCVAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeSparcAsmPrinter(): Unit = `LLVMInitializeSparcAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeSPIRVAsmPrinter(): Unit = `LLVMInitializeSPIRVAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeSystemZAsmPrinter(): Unit = `LLVMInitializeSystemZAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeVEAsmPrinter(): Unit = `LLVMInitializeVEAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeWebAssemblyAsmPrinter(): Unit = `LLVMInitializeWebAssemblyAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeX86AsmPrinter(): Unit = `LLVMInitializeX86AsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeXCoreAsmPrinter(): Unit = `LLVMInitializeXCoreAsmPrinter$mh`.invokeExact() as Unit

public fun LLVMInitializeAArch64AsmParser(): Unit = `LLVMInitializeAArch64AsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeAMDGPUAsmParser(): Unit = `LLVMInitializeAMDGPUAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeARMAsmParser(): Unit = `LLVMInitializeARMAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeAVRAsmParser(): Unit = `LLVMInitializeAVRAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeBPFAsmParser(): Unit = `LLVMInitializeBPFAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeHexagonAsmParser(): Unit = `LLVMInitializeHexagonAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeLanaiAsmParser(): Unit = `LLVMInitializeLanaiAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeLoongArchAsmParser(): Unit = `LLVMInitializeLoongArchAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeMipsAsmParser(): Unit = `LLVMInitializeMipsAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeMSP430AsmParser(): Unit = `LLVMInitializeMSP430AsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializePowerPCAsmParser(): Unit = `LLVMInitializePowerPCAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeRISCVAsmParser(): Unit = `LLVMInitializeRISCVAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeSparcAsmParser(): Unit = `LLVMInitializeSparcAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeSystemZAsmParser(): Unit = `LLVMInitializeSystemZAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeVEAsmParser(): Unit = `LLVMInitializeVEAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeWebAssemblyAsmParser(): Unit = `LLVMInitializeWebAssemblyAsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeX86AsmParser(): Unit = `LLVMInitializeX86AsmParser$mh`.invokeExact() as Unit

public fun LLVMInitializeAArch64Disassembler(): Unit = `LLVMInitializeAArch64Disassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeAMDGPUDisassembler(): Unit = `LLVMInitializeAMDGPUDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeARMDisassembler(): Unit = `LLVMInitializeARMDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeAVRDisassembler(): Unit = `LLVMInitializeAVRDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeBPFDisassembler(): Unit = `LLVMInitializeBPFDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeHexagonDisassembler(): Unit = `LLVMInitializeHexagonDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeLanaiDisassembler(): Unit = `LLVMInitializeLanaiDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeLoongArchDisassembler(): Unit = `LLVMInitializeLoongArchDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeMipsDisassembler(): Unit = `LLVMInitializeMipsDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeMSP430Disassembler(): Unit = `LLVMInitializeMSP430Disassembler$mh`.invokeExact() as Unit

public fun LLVMInitializePowerPCDisassembler(): Unit = `LLVMInitializePowerPCDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeRISCVDisassembler(): Unit = `LLVMInitializeRISCVDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeSparcDisassembler(): Unit = `LLVMInitializeSparcDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeSystemZDisassembler(): Unit = `LLVMInitializeSystemZDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeVEDisassembler(): Unit = `LLVMInitializeVEDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeWebAssemblyDisassembler(): Unit =
    `LLVMInitializeWebAssemblyDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeX86Disassembler(): Unit = `LLVMInitializeX86Disassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeXCoreDisassembler(): Unit = `LLVMInitializeXCoreDisassembler$mh`.invokeExact() as Unit

public fun LLVMInitializeAllTargetInfos(): Unit = `LLVMInitializeAllTargetInfos$mh`.invokeExact() as Unit

public fun LLVMInitializeAllTargets(): Unit = `LLVMInitializeAllTargets$mh`.invokeExact() as Unit

public fun LLVMInitializeAllTargetMCs(): Unit = `LLVMInitializeAllTargetMCs$mh`.invokeExact() as Unit

public fun LLVMInitializeAllAsmPrinters(): Unit = `LLVMInitializeAllAsmPrinters$mh`.invokeExact() as Unit

public fun LLVMInitializeAllAsmParsers(): Unit = `LLVMInitializeAllAsmParsers$mh`.invokeExact() as Unit

public fun LLVMInitializeAllDisassemblers(): Unit = `LLVMInitializeAllDisassemblers$mh`.invokeExact() as Unit

public fun LLVMInitializeNativeTarget(): LLVMBool = `LLVMInitializeNativeTarget$mh`.invokeExact() as Int

public fun LLVMInitializeNativeAsmParser(): LLVMBool = `LLVMInitializeNativeAsmParser$mh`.invokeExact() as Int

public fun LLVMInitializeNativeAsmPrinter(): LLVMBool = `LLVMInitializeNativeAsmPrinter$mh`.invokeExact() as Int

public fun LLVMInitializeNativeDisassembler(): LLVMBool = `LLVMInitializeNativeDisassembler$mh`.invokeExact() as Int

public fun LLVMGetModuleDataLayout(M: LLVMModuleRef): LLVMTargetDataRef =
    `LLVMGetModuleDataLayout$mh`.invokeExact(M) as MemorySegment

public fun LLVMSetModuleDataLayout(M: LLVMModuleRef, DL: LLVMTargetDataRef): Unit =
    `LLVMSetModuleDataLayout$mh`.invokeExact(M, DL) as Unit

public fun LLVMCreateTargetData(StringRep: Pointer<Byte>): LLVMTargetDataRef =
    `LLVMCreateTargetData$mh`.invokeExact(StringRep) as MemorySegment

public fun LLVMDisposeTargetData(TD: LLVMTargetDataRef): Unit = `LLVMDisposeTargetData$mh`.invokeExact(TD) as Unit

public fun LLVMAddTargetLibraryInfo(TLI: LLVMTargetLibraryInfoRef, PM: LLVMPassManagerRef): Unit =
    `LLVMAddTargetLibraryInfo$mh`.invokeExact(TLI, PM) as Unit

public fun LLVMCopyStringRepOfTargetData(TD: LLVMTargetDataRef): Pointer<Byte> =
    `LLVMCopyStringRepOfTargetData$mh`.invokeExact(TD) as MemorySegment

public fun LLVMByteOrder(TD: LLVMTargetDataRef): LLVMByteOrdering =
    LLVMByteOrdering.fromInt(`LLVMByteOrder$mh`.invokeExact(TD) as Int)

public fun LLVMPointerSize(TD: LLVMTargetDataRef): UInt = (`LLVMPointerSize$mh`.invokeExact(TD) as Int).toUInt()

public fun LLVMPointerSizeForAS(TD: LLVMTargetDataRef, AS: UInt): UInt =
    (`LLVMPointerSizeForAS$mh`.invokeExact(TD, AS.toInt()) as Int).toUInt()

public fun LLVMIntPtrType(TD: LLVMTargetDataRef): LLVMTypeRef = `LLVMIntPtrType$mh`.invokeExact(TD) as MemorySegment

public fun LLVMIntPtrTypeForAS(TD: LLVMTargetDataRef, AS: UInt): LLVMTypeRef =
    `LLVMIntPtrTypeForAS$mh`.invokeExact(TD, AS.toInt()) as MemorySegment

public fun LLVMIntPtrTypeInContext(C: LLVMContextRef, TD: LLVMTargetDataRef): LLVMTypeRef =
    `LLVMIntPtrTypeInContext$mh`.invokeExact(C, TD) as MemorySegment

public fun LLVMIntPtrTypeForASInContext(
    C: LLVMContextRef,
    TD: LLVMTargetDataRef,
    AS: UInt,
): LLVMTypeRef = `LLVMIntPtrTypeForASInContext$mh`.invokeExact(C, TD, AS.toInt()) as MemorySegment

public fun LLVMSizeOfTypeInBits(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): ULong =
    (`LLVMSizeOfTypeInBits$mh`.invokeExact(TD, Ty) as Long).toULong()

public fun LLVMStoreSizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): ULong =
    (`LLVMStoreSizeOfType$mh`.invokeExact(TD, Ty) as Long).toULong()

public fun LLVMABISizeOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): ULong =
    (`LLVMABISizeOfType$mh`.invokeExact(TD, Ty) as Long).toULong()

public fun LLVMABIAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): UInt =
    (`LLVMABIAlignmentOfType$mh`.invokeExact(TD, Ty) as Int).toUInt()

public fun LLVMCallFrameAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): UInt =
    (`LLVMCallFrameAlignmentOfType$mh`.invokeExact(TD, Ty) as Int).toUInt()

public fun LLVMPreferredAlignmentOfType(TD: LLVMTargetDataRef, Ty: LLVMTypeRef): UInt =
    (`LLVMPreferredAlignmentOfType$mh`.invokeExact(TD, Ty) as Int).toUInt()

public fun LLVMPreferredAlignmentOfGlobal(TD: LLVMTargetDataRef, GlobalVar: LLVMValueRef): UInt =
    (`LLVMPreferredAlignmentOfGlobal$mh`.invokeExact(TD, GlobalVar) as Int).toUInt()

public fun LLVMElementAtOffset(
    TD: LLVMTargetDataRef,
    StructTy: LLVMTypeRef,
    Offset: ULong,
): UInt = (`LLVMElementAtOffset$mh`.invokeExact(TD, StructTy, Offset.toLong()) as Int).toUInt()

public fun LLVMOffsetOfElement(
    TD: LLVMTargetDataRef,
    StructTy: LLVMTypeRef,
    Element: UInt,
): ULong = (`LLVMOffsetOfElement$mh`.invokeExact(TD, StructTy, Element.toInt()) as Long).toULong()

public fun LLVMGetFirstTarget(): LLVMTargetRef = `LLVMGetFirstTarget$mh`.invokeExact() as MemorySegment

public fun LLVMGetNextTarget(T: LLVMTargetRef): LLVMTargetRef = `LLVMGetNextTarget$mh`.invokeExact(T) as MemorySegment

public fun LLVMGetTargetFromName(Name: Pointer<Byte>): LLVMTargetRef =
    `LLVMGetTargetFromName$mh`.invokeExact(Name) as MemorySegment

public fun LLVMGetTargetFromTriple(
    Triple: Pointer<Byte>,
    T: Pointer<LLVMTargetRef>,
    ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMGetTargetFromTriple$mh`.invokeExact(Triple, T, ErrorMessage) as Int

public fun LLVMGetTargetName(T: LLVMTargetRef): Pointer<Byte> = `LLVMGetTargetName$mh`.invokeExact(T) as MemorySegment

public fun LLVMGetTargetDescription(T: LLVMTargetRef): Pointer<Byte> =
    `LLVMGetTargetDescription$mh`.invokeExact(T) as MemorySegment

public fun LLVMTargetHasJIT(T: LLVMTargetRef): LLVMBool = `LLVMTargetHasJIT$mh`.invokeExact(T) as Int

public fun LLVMTargetHasTargetMachine(T: LLVMTargetRef): LLVMBool =
    `LLVMTargetHasTargetMachine$mh`.invokeExact(T) as Int

public fun LLVMTargetHasAsmBackend(T: LLVMTargetRef): LLVMBool = `LLVMTargetHasAsmBackend$mh`.invokeExact(T) as Int

public fun LLVMCreateTargetMachineOptions(): LLVMTargetMachineOptionsRef =
    `LLVMCreateTargetMachineOptions$mh`.invokeExact() as MemorySegment

public fun LLVMDisposeTargetMachineOptions(Options: LLVMTargetMachineOptionsRef): Unit =
    `LLVMDisposeTargetMachineOptions$mh`.invokeExact(Options) as Unit

public fun LLVMTargetMachineOptionsSetCPU(Options: LLVMTargetMachineOptionsRef, CPU: Pointer<Byte>): Unit =
    `LLVMTargetMachineOptionsSetCPU$mh`.invokeExact(Options, CPU) as Unit

public fun LLVMTargetMachineOptionsSetFeatures(Options: LLVMTargetMachineOptionsRef, Features: Pointer<Byte>): Unit =
    `LLVMTargetMachineOptionsSetFeatures$mh`.invokeExact(Options, Features) as Unit

public fun LLVMTargetMachineOptionsSetABI(Options: LLVMTargetMachineOptionsRef, ABI: Pointer<Byte>): Unit =
    `LLVMTargetMachineOptionsSetABI$mh`.invokeExact(Options, ABI) as Unit

public fun LLVMTargetMachineOptionsSetCodeGenOptLevel(
    Options: LLVMTargetMachineOptionsRef,
    Level: LLVMCodeGenOptLevel
): Unit = `LLVMTargetMachineOptionsSetCodeGenOptLevel$mh`.invokeExact(Options, Level.value) as Unit

public fun LLVMTargetMachineOptionsSetRelocMode(Options: LLVMTargetMachineOptionsRef, Reloc: LLVMRelocMode): Unit =
    `LLVMTargetMachineOptionsSetRelocMode$mh`.invokeExact(Options, Reloc.value) as Unit

public fun LLVMTargetMachineOptionsSetCodeModel(Options: LLVMTargetMachineOptionsRef, CodeModel: LLVMCodeModel): Unit =
    `LLVMTargetMachineOptionsSetCodeModel$mh`.invokeExact(Options, CodeModel.value) as Unit

public fun LLVMCreateTargetMachineWithOptions(
    T: LLVMTargetRef,
    Triple: Pointer<Byte>,
    Options: LLVMTargetMachineOptionsRef,
): LLVMTargetMachineRef = `LLVMCreateTargetMachineWithOptions$mh`.invokeExact(T, Triple, Options) as MemorySegment

public fun LLVMCreateTargetMachine(
    T: LLVMTargetRef,
    Triple: Pointer<Byte>,
    CPU: Pointer<Byte>,
    Features: Pointer<Byte>,
    Level: LLVMCodeGenOptLevel,
    Reloc: LLVMRelocMode,
    CodeModel: LLVMCodeModel,
): LLVMTargetMachineRef = `LLVMCreateTargetMachine$mh`.invokeExact(
    T,
    Triple,
    CPU,
    Features,
    Level.value,
    Reloc.value,
    CodeModel.value,
) as MemorySegment

public fun LLVMDisposeTargetMachine(T: LLVMTargetMachineRef): Unit =
    `LLVMDisposeTargetMachine$mh`.invokeExact(T) as Unit

public fun LLVMGetTargetMachineTarget(T: LLVMTargetMachineRef): LLVMTargetRef =
    `LLVMGetTargetMachineTarget$mh`.invokeExact(T) as MemorySegment

public fun LLVMGetTargetMachineTriple(T: LLVMTargetMachineRef): Pointer<Byte> =
    `LLVMGetTargetMachineTriple$mh`.invokeExact(T) as MemorySegment

public fun LLVMGetTargetMachineCPU(T: LLVMTargetMachineRef): Pointer<Byte> =
    `LLVMGetTargetMachineCPU$mh`.invokeExact(T) as MemorySegment

public fun LLVMGetTargetMachineFeatureString(T: LLVMTargetMachineRef): Pointer<Byte> =
    `LLVMGetTargetMachineFeatureString$mh`.invokeExact(T) as MemorySegment

public fun LLVMCreateTargetDataLayout(T: LLVMTargetMachineRef): LLVMTargetDataRef =
    `LLVMCreateTargetDataLayout$mh`.invokeExact(T) as MemorySegment

public fun LLVMSetTargetMachineAsmVerbosity(T: LLVMTargetMachineRef, VerboseAsm: LLVMBool): Unit =
    `LLVMSetTargetMachineAsmVerbosity$mh`.invokeExact(T, VerboseAsm) as Unit

public fun LLVMSetTargetMachineFastISel(T: LLVMTargetMachineRef, Enable: LLVMBool): Unit =
    `LLVMSetTargetMachineFastISel$mh`.invokeExact(T, Enable) as Unit

public fun LLVMSetTargetMachineGlobalISel(T: LLVMTargetMachineRef, Enable: LLVMBool): Unit =
    `LLVMSetTargetMachineGlobalISel$mh`.invokeExact(T, Enable) as Unit

public fun LLVMSetTargetMachineGlobalISelAbort(T: LLVMTargetMachineRef, Mode: LLVMGlobalISelAbortMode): Unit =
    `LLVMSetTargetMachineGlobalISelAbort$mh`.invokeExact(T, Mode.value) as Unit

public fun LLVMSetTargetMachineMachineOutliner(T: LLVMTargetMachineRef, Enable: LLVMBool): Unit =
    `LLVMSetTargetMachineMachineOutliner$mh`.invokeExact(T, Enable) as Unit

public fun LLVMTargetMachineEmitToFile(
    T: LLVMTargetMachineRef,
    M: LLVMModuleRef,
    Filename: Pointer<Byte>,
    codegen: LLVMCodeGenFileType,
    ErrorMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMTargetMachineEmitToFile$mh`.invokeExact(T, M, Filename, codegen.value, ErrorMessage) as Int

public fun LLVMTargetMachineEmitToMemoryBuffer(
    T: LLVMTargetMachineRef,
    M: LLVMModuleRef,
    codegen: LLVMCodeGenFileType,
    ErrorMessage: Pointer<Pointer<Byte>>,
    OutMemBuf: Pointer<LLVMMemoryBufferRef>,
): LLVMBool = `LLVMTargetMachineEmitToMemoryBuffer$mh`.invokeExact(T, M, codegen.value, ErrorMessage, OutMemBuf) as Int

public fun LLVMGetDefaultTargetTriple(): Pointer<Byte> = `LLVMGetDefaultTargetTriple$mh`.invokeExact() as MemorySegment

public fun LLVMNormalizeTargetTriple(triple: Pointer<Byte>): Pointer<Byte> =
    `LLVMNormalizeTargetTriple$mh`.invokeExact(triple) as MemorySegment

public fun LLVMGetHostCPUName(): Pointer<Byte> = `LLVMGetHostCPUName$mh`.invokeExact() as MemorySegment

public fun LLVMGetHostCPUFeatures(): Pointer<Byte> = `LLVMGetHostCPUFeatures$mh`.invokeExact() as MemorySegment

public fun LLVMAddAnalysisPasses(T: LLVMTargetMachineRef, PM: LLVMPassManagerRef): Unit =
    `LLVMAddAnalysisPasses$mh`.invokeExact(T, PM) as Unit

public fun LLVMLinkInMCJIT(): Unit = `LLVMLinkInMCJIT$mh`.invokeExact() as Unit

public fun LLVMLinkInInterpreter(): Unit = `LLVMLinkInInterpreter$mh`.invokeExact() as Unit

public fun LLVMCreateGenericValueOfInt(
    Ty: LLVMTypeRef,
    N: ULong,
    IsSigned: LLVMBool,
): LLVMGenericValueRef = `LLVMCreateGenericValueOfInt$mh`.invokeExact(Ty, N.toLong(), IsSigned) as MemorySegment

public fun LLVMCreateGenericValueOfPointer(P: Pointer<Unit>): LLVMGenericValueRef =
    `LLVMCreateGenericValueOfPointer$mh`.invokeExact(P) as MemorySegment

public fun LLVMCreateGenericValueOfFloat(Ty: LLVMTypeRef, N: Double): LLVMGenericValueRef =
    `LLVMCreateGenericValueOfFloat$mh`.invokeExact(Ty, N) as MemorySegment

public fun LLVMGenericValueIntWidth(GenValRef: LLVMGenericValueRef): UInt =
    (`LLVMGenericValueIntWidth$mh`.invokeExact(GenValRef) as Int).toUInt()

public fun LLVMGenericValueToInt(GenVal: LLVMGenericValueRef, IsSigned: LLVMBool): ULong =
    (`LLVMGenericValueToInt$mh`.invokeExact(GenVal, IsSigned) as Long).toULong()

public fun LLVMGenericValueToPointer(GenVal: LLVMGenericValueRef): Pointer<Unit> =
    `LLVMGenericValueToPointer$mh`.invokeExact(GenVal) as MemorySegment

public fun LLVMGenericValueToFloat(TyRef: LLVMTypeRef, GenVal: LLVMGenericValueRef): Double =
    `LLVMGenericValueToFloat$mh`.invokeExact(TyRef, GenVal) as Double

public fun LLVMDisposeGenericValue(GenVal: LLVMGenericValueRef): Unit =
    `LLVMDisposeGenericValue$mh`.invokeExact(GenVal) as Unit

public fun LLVMCreateExecutionEngineForModule(
    OutEE: Pointer<LLVMExecutionEngineRef>,
    M: LLVMModuleRef,
    OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateExecutionEngineForModule$mh`.invokeExact(OutEE, M, OutError) as Int

public fun LLVMCreateInterpreterForModule(
    OutInterp: Pointer<LLVMExecutionEngineRef>,
    M: LLVMModuleRef,
    OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateInterpreterForModule$mh`.invokeExact(OutInterp, M, OutError) as Int

public fun LLVMCreateJITCompilerForModule(
    OutJIT: Pointer<LLVMExecutionEngineRef>,
    M: LLVMModuleRef,
    OptLevel: UInt,
    OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMCreateJITCompilerForModule$mh`.invokeExact(OutJIT, M, OptLevel.toInt(), OutError) as Int

public fun LLVMInitializeMCJITCompilerOptions(Options: Pointer<LLVMMCJITCompilerOptions>, SizeOfOptions: ULong): Unit =
    `LLVMInitializeMCJITCompilerOptions$mh`.invokeExact(Options, SizeOfOptions.toLong()) as Unit

public fun LLVMCreateMCJITCompilerForModule(
    OutJIT: Pointer<LLVMExecutionEngineRef>,
    M: LLVMModuleRef,
    Options: Pointer<LLVMMCJITCompilerOptions>,
    SizeOfOptions: ULong,
    OutError: Pointer<Pointer<Byte>>,
): LLVMBool =
    `LLVMCreateMCJITCompilerForModule$mh`.invokeExact(OutJIT, M, Options, SizeOfOptions.toLong(), OutError) as Int

public fun LLVMDisposeExecutionEngine(EE: LLVMExecutionEngineRef): Unit =
    `LLVMDisposeExecutionEngine$mh`.invokeExact(EE) as Unit

public fun LLVMRunStaticConstructors(EE: LLVMExecutionEngineRef): Unit =
    `LLVMRunStaticConstructors$mh`.invokeExact(EE) as Unit

public fun LLVMRunStaticDestructors(EE: LLVMExecutionEngineRef): Unit =
    `LLVMRunStaticDestructors$mh`.invokeExact(EE) as Unit

public fun LLVMRunFunctionAsMain(
    EE: LLVMExecutionEngineRef,
    F: LLVMValueRef,
    ArgC: UInt,
    ArgV: Pointer<Pointer<Byte>>,
    EnvP: Pointer<Pointer<Byte>>,
): Int = `LLVMRunFunctionAsMain$mh`.invokeExact(EE, F, ArgC.toInt(), ArgV, EnvP) as Int

public fun LLVMRunFunction(
    EE: LLVMExecutionEngineRef,
    F: LLVMValueRef,
    NumArgs: UInt,
    Args: Pointer<LLVMGenericValueRef>,
): LLVMGenericValueRef = `LLVMRunFunction$mh`.invokeExact(EE, F, NumArgs.toInt(), Args) as MemorySegment

public fun LLVMFreeMachineCodeForFunction(EE: LLVMExecutionEngineRef, F: LLVMValueRef): Unit =
    `LLVMFreeMachineCodeForFunction$mh`.invokeExact(EE, F) as Unit

public fun LLVMAddModule(EE: LLVMExecutionEngineRef, M: LLVMModuleRef): Unit =
    `LLVMAddModule$mh`.invokeExact(EE, M) as Unit

public fun LLVMRemoveModule(
    EE: LLVMExecutionEngineRef,
    M: LLVMModuleRef,
    OutMod: Pointer<LLVMModuleRef>,
    OutError: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMRemoveModule$mh`.invokeExact(EE, M, OutMod, OutError) as Int

public fun LLVMFindFunction(
    EE: LLVMExecutionEngineRef,
    Name: Pointer<Byte>,
    OutFn: Pointer<LLVMValueRef>,
): LLVMBool = `LLVMFindFunction$mh`.invokeExact(EE, Name, OutFn) as Int

public fun LLVMRecompileAndRelinkFunction(EE: LLVMExecutionEngineRef, Fn: LLVMValueRef): Pointer<Unit> =
    `LLVMRecompileAndRelinkFunction$mh`.invokeExact(EE, Fn) as MemorySegment

public fun LLVMGetExecutionEngineTargetData(EE: LLVMExecutionEngineRef): LLVMTargetDataRef =
    `LLVMGetExecutionEngineTargetData$mh`.invokeExact(EE) as MemorySegment

public fun LLVMGetExecutionEngineTargetMachine(EE: LLVMExecutionEngineRef): LLVMTargetMachineRef =
    `LLVMGetExecutionEngineTargetMachine$mh`.invokeExact(EE) as MemorySegment

public fun LLVMAddGlobalMapping(
    EE: LLVMExecutionEngineRef,
    Global: LLVMValueRef,
    Addr: Pointer<Unit>,
): Unit = `LLVMAddGlobalMapping$mh`.invokeExact(EE, Global, Addr) as Unit

public fun LLVMGetPointerToGlobal(EE: LLVMExecutionEngineRef, Global: LLVMValueRef): Pointer<Unit> =
    `LLVMGetPointerToGlobal$mh`.invokeExact(EE, Global) as MemorySegment

public fun LLVMGetGlobalValueAddress(EE: LLVMExecutionEngineRef, Name: Pointer<Byte>): ULong =
    (`LLVMGetGlobalValueAddress$mh`.invokeExact(EE, Name) as Long).toULong()

public fun LLVMGetFunctionAddress(EE: LLVMExecutionEngineRef, Name: Pointer<Byte>): ULong =
    (`LLVMGetFunctionAddress$mh`.invokeExact(EE, Name) as Long).toULong()

public fun LLVMExecutionEngineGetErrMsg(EE: LLVMExecutionEngineRef, OutError: Pointer<Pointer<Byte>>): LLVMBool =
    `LLVMExecutionEngineGetErrMsg$mh`.invokeExact(EE, OutError) as Int

public fun LLVMCreateSimpleMCJITMemoryManager(
    Opaque: Pointer<Unit>,
    AllocateCodeSection: LLVMMemoryManagerAllocateCodeSectionCallback,
    AllocateDataSection: LLVMMemoryManagerAllocateDataSectionCallback,
    FinalizeMemory: LLVMMemoryManagerFinalizeMemoryCallback,
    Destroy: LLVMMemoryManagerDestroyCallback,
): LLVMMCJITMemoryManagerRef = `LLVMCreateSimpleMCJITMemoryManager$mh`.invokeExact(
    Opaque,
    AllocateCodeSection,
    AllocateDataSection,
    FinalizeMemory,
    Destroy,
) as MemorySegment

public fun LLVMDisposeMCJITMemoryManager(MM: LLVMMCJITMemoryManagerRef): Unit =
    `LLVMDisposeMCJITMemoryManager$mh`.invokeExact(MM) as Unit

public fun LLVMCreateGDBRegistrationListener(): LLVMJITEventListenerRef =
    `LLVMCreateGDBRegistrationListener$mh`.invokeExact() as MemorySegment

public fun LLVMCreateIntelJITEventListener(): LLVMJITEventListenerRef =
    `LLVMCreateIntelJITEventListener$mh`.invokeExact() as MemorySegment

public fun LLVMCreateOProfileJITEventListener(): LLVMJITEventListenerRef =
    `LLVMCreateOProfileJITEventListener$mh`.invokeExact() as MemorySegment

public fun LLVMCreatePerfJITEventListener(): LLVMJITEventListenerRef =
    `LLVMCreatePerfJITEventListener$mh`.invokeExact() as MemorySegment

public fun LLVMVerifyModule(
    M: LLVMModuleRef,
    Action: LLVMVerifierFailureAction,
    OutMessage: Pointer<Pointer<Byte>>,
): LLVMBool = `LLVMVerifyModule$mh`.invokeExact(M, Action.value, OutMessage) as Int

public fun LLVMVerifyFunction(Fn: LLVMValueRef, Action: LLVMVerifierFailureAction): LLVMBool =
    `LLVMVerifyFunction$mh`.invokeExact(Fn, Action.value) as Int

public fun LLVMViewFunctionCFG(Fn: LLVMValueRef): Unit = `LLVMViewFunctionCFG$mh`.invokeExact(Fn) as Unit

public fun LLVMViewFunctionCFGOnly(Fn: LLVMValueRef): Unit = `LLVMViewFunctionCFGOnly$mh`.invokeExact(Fn) as Unit

public fun LLVMWriteBitcodeToFile(M: LLVMModuleRef, Path: Pointer<Byte>): Int =
    `LLVMWriteBitcodeToFile$mh`.invokeExact(M, Path) as Int

public fun LLVMWriteBitcodeToFD(
    M: LLVMModuleRef,
    FD: Int,
    ShouldClose: Int,
    Unbuffered: Int,
): Int = `LLVMWriteBitcodeToFD$mh`.invokeExact(M, FD, ShouldClose, Unbuffered) as Int

public fun LLVMWriteBitcodeToFileHandle(M: LLVMModuleRef, Handle: Int): Int =
    `LLVMWriteBitcodeToFileHandle$mh`.invokeExact(M, Handle) as Int

public fun LLVMWriteBitcodeToMemoryBuffer(M: LLVMModuleRef): LLVMMemoryBufferRef =
    `LLVMWriteBitcodeToMemoryBuffer$mh`.invokeExact(M) as MemorySegment

public fun LLVMLinkModules2(Dest: LLVMModuleRef, Src: LLVMModuleRef): LLVMBool =
    `LLVMLinkModules2$mh`.invokeExact(Dest, Src) as Int

public fun lto_get_version(): Pointer<Byte> = `lto_get_version$mh`.invokeExact() as MemorySegment

public fun lto_get_error_message(): Pointer<Byte> = `lto_get_error_message$mh`.invokeExact() as MemorySegment

public fun lto_module_is_object_file(path: Pointer<Byte>): lto_bool_t =
    `lto_module_is_object_file$mh`.invokeExact(path) as Boolean

public fun lto_module_is_object_file_for_target(path: Pointer<Byte>, target_triple_prefix: Pointer<Byte>): lto_bool_t =
    `lto_module_is_object_file_for_target$mh`.invokeExact(path, target_triple_prefix) as Boolean

public fun lto_module_has_objc_category(mem: Pointer<Unit>, length: ULong): lto_bool_t =
    `lto_module_has_objc_category$mh`.invokeExact(mem, length.toLong()) as Boolean

public fun lto_module_is_object_file_in_memory(mem: Pointer<Unit>, length: ULong): lto_bool_t =
    `lto_module_is_object_file_in_memory$mh`.invokeExact(mem, length.toLong()) as Boolean

public fun lto_module_is_object_file_in_memory_for_target(
    mem: Pointer<Unit>,
    length: ULong,
    target_triple_prefix: Pointer<Byte>,
): lto_bool_t = `lto_module_is_object_file_in_memory_for_target$mh`.invokeExact(
    mem,
    length.toLong(),
    target_triple_prefix,
) as Boolean

public fun lto_module_create(path: Pointer<Byte>): lto_module_t =
    `lto_module_create$mh`.invokeExact(path) as MemorySegment

public fun lto_module_create_from_memory(mem: Pointer<Unit>, length: ULong): lto_module_t =
    `lto_module_create_from_memory$mh`.invokeExact(mem, length.toLong()) as MemorySegment

public fun lto_module_create_from_memory_with_path(
    mem: Pointer<Unit>,
    length: ULong,
    path: Pointer<Byte>,
): lto_module_t = `lto_module_create_from_memory_with_path$mh`.invokeExact(mem, length.toLong(), path) as MemorySegment

public fun lto_module_create_in_local_context(
    mem: Pointer<Unit>,
    length: ULong,
    path: Pointer<Byte>,
): lto_module_t = `lto_module_create_in_local_context$mh`.invokeExact(mem, length.toLong(), path) as MemorySegment

public fun lto_module_create_in_codegen_context(
    mem: Pointer<Unit>,
    length: ULong,
    path: Pointer<Byte>,
    cg: lto_code_gen_t,
): lto_module_t =
    `lto_module_create_in_codegen_context$mh`.invokeExact(mem, length.toLong(), path, cg) as MemorySegment

public fun lto_module_create_from_fd(
    fd: Int,
    path: Pointer<Byte>,
    file_size: ULong,
): lto_module_t = `lto_module_create_from_fd$mh`.invokeExact(fd, path, file_size.toLong()) as MemorySegment

public fun lto_module_create_from_fd_at_offset(
    fd: Int,
    path: Pointer<Byte>,
    file_size: ULong,
    map_size: ULong,
    offset: off_t,
): lto_module_t = `lto_module_create_from_fd_at_offset$mh`.invokeExact(
    fd,
    path,
    file_size.toLong(),
    map_size.toLong(),
    offset,
) as MemorySegment

public fun lto_module_dispose(mod: lto_module_t): Unit = `lto_module_dispose$mh`.invokeExact(mod) as Unit

public fun lto_module_get_target_triple(mod: lto_module_t): Pointer<Byte> =
    `lto_module_get_target_triple$mh`.invokeExact(mod) as MemorySegment

public fun lto_module_set_target_triple(mod: lto_module_t, triple: Pointer<Byte>): Unit =
    `lto_module_set_target_triple$mh`.invokeExact(mod, triple) as Unit

public fun lto_module_get_num_symbols(mod: lto_module_t): UInt =
    (`lto_module_get_num_symbols$mh`.invokeExact(mod) as Int).toUInt()

public fun lto_module_get_symbol_name(mod: lto_module_t, index: UInt): Pointer<Byte> =
    `lto_module_get_symbol_name$mh`.invokeExact(mod, index.toInt()) as MemorySegment

public fun lto_module_get_symbol_attribute(mod: lto_module_t, index: UInt): lto_symbol_attributes =
    lto_symbol_attributes.fromInt(`lto_module_get_symbol_attribute$mh`.invokeExact(mod, index.toInt()) as Int)

public fun lto_module_get_linkeropts(mod: lto_module_t): Pointer<Byte> =
    `lto_module_get_linkeropts$mh`.invokeExact(mod) as MemorySegment

public fun lto_module_get_macho_cputype(
    mod: lto_module_t,
    out_cputype: Pointer<UInt>,
    out_cpusubtype: Pointer<UInt>,
): lto_bool_t = `lto_module_get_macho_cputype$mh`.invokeExact(mod, out_cputype, out_cpusubtype) as Boolean

public fun lto_module_has_ctor_dtor(mod: lto_module_t): lto_bool_t =
    `lto_module_has_ctor_dtor$mh`.invokeExact(mod) as Boolean

public fun lto_codegen_set_diagnostic_handler(
    `$p0`: lto_code_gen_t,
    `$p1`: lto_diagnostic_handler_t,
    `$p2`: Pointer<Unit>,
): Unit = `lto_codegen_set_diagnostic_handler$mh`.invokeExact(`$p0`, `$p1`, `$p2`) as Unit

public fun lto_codegen_create(): lto_code_gen_t = `lto_codegen_create$mh`.invokeExact() as MemorySegment

public fun lto_codegen_create_in_local_context(): lto_code_gen_t =
    `lto_codegen_create_in_local_context$mh`.invokeExact() as MemorySegment

public fun lto_codegen_dispose(`$p0`: lto_code_gen_t): Unit = `lto_codegen_dispose$mh`.invokeExact(`$p0`) as Unit

public fun lto_codegen_add_module(cg: lto_code_gen_t, mod: lto_module_t): lto_bool_t =
    `lto_codegen_add_module$mh`.invokeExact(cg, mod) as Boolean

public fun lto_codegen_set_module(cg: lto_code_gen_t, mod: lto_module_t): Unit =
    `lto_codegen_set_module$mh`.invokeExact(cg, mod) as Unit

public fun lto_codegen_set_debug_model(cg: lto_code_gen_t, `$p1`: lto_debug_model): lto_bool_t =
    `lto_codegen_set_debug_model$mh`.invokeExact(cg, `$p1`.value) as Boolean

public fun lto_codegen_set_pic_model(cg: lto_code_gen_t, `$p1`: lto_codegen_model): lto_bool_t =
    `lto_codegen_set_pic_model$mh`.invokeExact(cg, `$p1`.value) as Boolean

public fun lto_codegen_set_cpu(cg: lto_code_gen_t, cpu: Pointer<Byte>): Unit =
    `lto_codegen_set_cpu$mh`.invokeExact(cg, cpu) as Unit

public fun lto_codegen_set_assembler_path(cg: lto_code_gen_t, path: Pointer<Byte>): Unit =
    `lto_codegen_set_assembler_path$mh`.invokeExact(cg, path) as Unit

public fun lto_codegen_set_assembler_args(
    cg: lto_code_gen_t,
    args: Pointer<Pointer<Byte>>,
    nargs: Int,
): Unit = `lto_codegen_set_assembler_args$mh`.invokeExact(cg, args, nargs) as Unit

public fun lto_codegen_add_must_preserve_symbol(cg: lto_code_gen_t, symbol: Pointer<Byte>): Unit =
    `lto_codegen_add_must_preserve_symbol$mh`.invokeExact(cg, symbol) as Unit

public fun lto_codegen_write_merged_modules(cg: lto_code_gen_t, path: Pointer<Byte>): lto_bool_t =
    `lto_codegen_write_merged_modules$mh`.invokeExact(cg, path) as Boolean

public fun lto_codegen_compile(cg: lto_code_gen_t, length: Pointer<ULong>): Pointer<Unit> =
    `lto_codegen_compile$mh`.invokeExact(cg, length) as MemorySegment

public fun lto_codegen_compile_to_file(cg: lto_code_gen_t, name: Pointer<Pointer<Byte>>): lto_bool_t =
    `lto_codegen_compile_to_file$mh`.invokeExact(cg, name) as Boolean

public fun lto_codegen_optimize(cg: lto_code_gen_t): lto_bool_t = `lto_codegen_optimize$mh`.invokeExact(cg) as Boolean

public fun lto_codegen_compile_optimized(cg: lto_code_gen_t, length: Pointer<ULong>): Pointer<Unit> =
    `lto_codegen_compile_optimized$mh`.invokeExact(cg, length) as MemorySegment

public fun lto_api_version(): UInt = (`lto_api_version$mh`.invokeExact() as Int).toUInt()

public fun lto_set_debug_options(options: Pointer<Pointer<Byte>>, number: Int): Unit =
    `lto_set_debug_options$mh`.invokeExact(options, number) as Unit

public fun lto_codegen_debug_options(cg: lto_code_gen_t, `$p1`: Pointer<Byte>): Unit =
    `lto_codegen_debug_options$mh`.invokeExact(cg, `$p1`) as Unit

public fun lto_codegen_debug_options_array(
    cg: lto_code_gen_t,
    `$p1`: Pointer<Byte>,
    number: Int,
): Unit = `lto_codegen_debug_options_array$mh`.invokeExact(cg, `$p1`, number) as Unit

public fun lto_initialize_disassembler(): Unit = `lto_initialize_disassembler$mh`.invokeExact() as Unit

public fun lto_codegen_set_should_internalize(cg: lto_code_gen_t, ShouldInternalize: lto_bool_t): Unit =
    `lto_codegen_set_should_internalize$mh`.invokeExact(cg, ShouldInternalize) as Unit

public fun lto_codegen_set_should_embed_uselists(cg: lto_code_gen_t, ShouldEmbedUselists: lto_bool_t): Unit =
    `lto_codegen_set_should_embed_uselists$mh`.invokeExact(cg, ShouldEmbedUselists) as Unit

public fun lto_input_create(
    buffer: Pointer<Unit>,
    buffer_size: ULong,
    path: Pointer<Byte>,
): lto_input_t = `lto_input_create$mh`.invokeExact(buffer, buffer_size.toLong(), path) as MemorySegment

public fun lto_input_dispose(input: lto_input_t): Unit = `lto_input_dispose$mh`.invokeExact(input) as Unit

public fun lto_input_get_num_dependent_libraries(input: lto_input_t): UInt =
    (`lto_input_get_num_dependent_libraries$mh`.invokeExact(input) as Int).toUInt()

public fun lto_input_get_dependent_library(
    input: lto_input_t,
    index: ULong,
    size: Pointer<ULong>,
): Pointer<Byte> = `lto_input_get_dependent_library$mh`.invokeExact(input, index.toLong(), size) as MemorySegment

public fun lto_runtime_lib_symbols_list(size: Pointer<ULong>): Pointer<Pointer<Byte>> =
    `lto_runtime_lib_symbols_list$mh`.invokeExact(size) as MemorySegment

public fun lto_module_is_thinlto(mod: lto_module_t): lto_bool_t =
    `lto_module_is_thinlto$mh`.invokeExact(mod) as Boolean
