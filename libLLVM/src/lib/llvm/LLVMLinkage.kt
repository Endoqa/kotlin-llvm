// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType

public enum class LLVMLinkage(
    public val `value`: Int,
) {
    /**
     * < Externally visible function
     */
    ExternalLinkage(0),

    /**
     * < Externally visible function
     */
    AvailableExternallyLinkage(1),

    /**
     * < Keep one copy of function when linking (inline)
     */
    LinkOnceAnyLinkage(2),

    /**
     * < Same, but only replaced by something
     * equivalent.
     */
    LinkOnceODRLinkage(3),

    /**
     * < Obsolete
     */
    LinkOnceODRAutoHideLinkage(4),

    /**
     * < Keep one copy of function when linking (weak)
     */
    WeakAnyLinkage(5),

    /**
     * < Same, but only replaced by something
     * equivalent.
     */
    WeakODRLinkage(6),

    /**
     * < Special purpose, only applies to global arrays
     */
    AppendingLinkage(7),

    /**
     * < Rename collisions when linking (static
     * functions)
     */
    InternalLinkage(8),

    /**
     * < Like Internal, but omit from symbol table
     */
    PrivateLinkage(9),

    /**
     * < Obsolete
     */
    DLLImportLinkage(10),

    /**
     * < Obsolete
     */
    DLLExportLinkage(11),

    /**
     * < ExternalWeak linkage description
     */
    ExternalWeakLinkage(12),

    /**
     * < Obsolete
     */
    GhostLinkage(13),

    /**
     * < Tentative definitions
     */
    CommonLinkage(14),

    /**
     * < Like Private, but linker removes.
     */
    LinkerPrivateLinkage(15),

    /**
     * < Like LinkerPrivate, but is weak.
     */
    LinkerPrivateWeakLinkage(16),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            LLVMLinkage::class.java,
            "fromInt",
            MethodType.methodType(LLVMLinkage::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            LLVMLinkage::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): LLVMLinkage = when (value) {
            ExternalLinkage.value -> ExternalLinkage
            AvailableExternallyLinkage.value -> AvailableExternallyLinkage
            LinkOnceAnyLinkage.value -> LinkOnceAnyLinkage
            LinkOnceODRLinkage.value -> LinkOnceODRLinkage
            LinkOnceODRAutoHideLinkage.value -> LinkOnceODRAutoHideLinkage
            WeakAnyLinkage.value -> WeakAnyLinkage
            WeakODRLinkage.value -> WeakODRLinkage
            AppendingLinkage.value -> AppendingLinkage
            InternalLinkage.value -> InternalLinkage
            PrivateLinkage.value -> PrivateLinkage
            DLLImportLinkage.value -> DLLImportLinkage
            DLLExportLinkage.value -> DLLExportLinkage
            ExternalWeakLinkage.value -> ExternalWeakLinkage
            GhostLinkage.value -> GhostLinkage
            CommonLinkage.value -> CommonLinkage
            LinkerPrivateLinkage.value -> LinkerPrivateLinkage
            LinkerPrivateWeakLinkage.value -> LinkerPrivateWeakLinkage
            else -> error("enum not found")
        }
    }
}
