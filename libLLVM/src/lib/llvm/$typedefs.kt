// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

public typealias LLVMFatalErrorHandler = Pointer<(Reason: Pointer<Byte>) -> Unit>

public typealias __off_t = Long

public typealias uintptr_t = ULong

public typealias off_t = __off_t

public typealias LLVMBool = Int

public typealias LLVMMemoryBufferRef = Pointer<LLVMOpaqueMemoryBuffer>

public typealias LLVMContextRef = Pointer<LLVMOpaqueContext>

public typealias LLVMModuleRef = Pointer<LLVMOpaqueModule>

public typealias LLVMTypeRef = Pointer<LLVMOpaqueType>

public typealias LLVMValueRef = Pointer<LLVMOpaqueValue>

public typealias LLVMBasicBlockRef = Pointer<LLVMOpaqueBasicBlock>

public typealias LLVMMetadataRef = Pointer<LLVMOpaqueMetadata>

public typealias LLVMNamedMDNodeRef = Pointer<LLVMOpaqueNamedMDNode>

public typealias LLVMValueMetadataEntry = LLVMOpaqueValueMetadataEntry

public typealias LLVMBuilderRef = Pointer<LLVMOpaqueBuilder>

public typealias LLVMDIBuilderRef = Pointer<LLVMOpaqueDIBuilder>

public typealias LLVMModuleProviderRef = Pointer<LLVMOpaqueModuleProvider>

public typealias LLVMPassManagerRef = Pointer<LLVMOpaquePassManager>

public typealias LLVMUseRef = Pointer<LLVMOpaqueUse>

public typealias LLVMOperandBundleRef = Pointer<LLVMOpaqueOperandBundle>

public typealias LLVMAttributeRef = Pointer<LLVMOpaqueAttributeRef>

public typealias LLVMDiagnosticInfoRef = Pointer<LLVMOpaqueDiagnosticInfo>

public typealias LLVMComdatRef = Pointer<LLVMComdat>

public typealias LLVMModuleFlagEntry = LLVMOpaqueModuleFlagEntry

public typealias LLVMJITEventListenerRef = Pointer<LLVMOpaqueJITEventListener>

public typealias LLVMBinaryRef = Pointer<LLVMOpaqueBinary>

public typealias LLVMDbgRecordRef = Pointer<LLVMOpaqueDbgRecord>

public typealias LLVMAttributeIndex = UInt

public typealias LLVMFastMathFlags = UInt

public typealias LLVMGEPNoWrapFlags = UInt

public typealias LLVMDiagnosticHandler = Pointer<(`$p0`: LLVMDiagnosticInfoRef, `$p1`: Pointer<Unit>) -> Unit>

public typealias LLVMYieldCallback = Pointer<(`$p0`: LLVMContextRef, `$p1`: Pointer<Unit>) -> Unit>

public typealias LLVMTargetDataRef = Pointer<LLVMOpaqueTargetData>

public typealias LLVMTargetLibraryInfoRef = Pointer<LLVMOpaqueTargetLibraryInfotData>

public typealias LLVMTargetMachineOptionsRef = Pointer<LLVMOpaqueTargetMachineOptions>

public typealias LLVMTargetMachineRef = Pointer<LLVMOpaqueTargetMachine>

public typealias LLVMTargetRef = Pointer<LLVMTarget>

public typealias LLVMGenericValueRef = Pointer<LLVMOpaqueGenericValue>

public typealias LLVMExecutionEngineRef = Pointer<LLVMOpaqueExecutionEngine>

public typealias LLVMMCJITMemoryManagerRef = Pointer<LLVMOpaqueMCJITMemoryManager>

public typealias LLVMMemoryManagerAllocateCodeSectionCallback = Pointer<(
    Opaque: Pointer<Unit>,
    Size: uintptr_t,
    Alignment: UInt,
    SectionID: UInt,
    SectionName: Pointer<Byte>,
) -> Pointer<UByte>>

public typealias LLVMMemoryManagerAllocateDataSectionCallback = Pointer<(
    Opaque: Pointer<Unit>,
    Size: uintptr_t,
    Alignment: UInt,
    SectionID: UInt,
    SectionName: Pointer<Byte>,
    IsReadOnly: LLVMBool,
) -> Pointer<UByte>>

public typealias LLVMMemoryManagerFinalizeMemoryCallback = Pointer<(Opaque: Pointer<Unit>, ErrMsg: Pointer<Pointer<Byte>>) -> LLVMBool>

public typealias LLVMMemoryManagerDestroyCallback = Pointer<(Opaque: Pointer<Unit>) -> Unit>

public typealias lto_bool_t = Boolean

public typealias lto_module_t = Pointer<LLVMOpaqueLTOModule>

public typealias lto_code_gen_t = Pointer<LLVMOpaqueLTOCodeGenerator>

public typealias lto_diagnostic_handler_t = Pointer<(
    severity: lto_codegen_diagnostic_severity_t,
    diag: Pointer<Byte>,
    ctxt: Pointer<Unit>,
) -> Unit>

public typealias lto_input_t = Pointer<LLVMOpaqueLTOInput>
