// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import kotlin.Boolean
import kotlin.Byte
import kotlin.Int
import kotlin.Long
import kotlin.UByte
import kotlin.UInt
import kotlin.ULong
import kotlin.Unit

public typealias uintptr_t = ULong

public typealias __off_t = Long

public typealias off_t = __off_t

public typealias LLVMBool = Int

public typealias LLVMMemoryBufferRef = Pointer<LLVMOpaqueMemoryBuffer>

public typealias LLVMContextRef = Pointer<LLVMOpaqueContext>

public typealias LLVMModuleRef = Pointer<LLVMOpaqueModule>

public typealias LLVMTypeRef = Pointer<LLVMOpaqueType>

public typealias LLVMValueRef = Pointer<LLVMOpaqueValue>

public typealias LLVMBasicBlockRef = Pointer<LLVMOpaqueBasicBlock>

public typealias LLVMMetadataRef = Pointer<LLVMOpaqueMetadata>

public typealias LLVMNamedMDNodeRef = Pointer<LLVMOpaqueNamedMDNode>

public typealias LLVMValueMetadataEntry = LLVMOpaqueValueMetadataEntry

public typealias LLVMBuilderRef = Pointer<LLVMOpaqueBuilder>

public typealias LLVMDIBuilderRef = Pointer<LLVMOpaqueDIBuilder>

public typealias LLVMModuleProviderRef = Pointer<LLVMOpaqueModuleProvider>

public typealias LLVMPassManagerRef = Pointer<LLVMOpaquePassManager>

public typealias LLVMUseRef = Pointer<LLVMOpaqueUse>

public typealias LLVMOperandBundleRef = Pointer<LLVMOpaqueOperandBundle>

public typealias LLVMAttributeRef = Pointer<LLVMOpaqueAttributeRef>

public typealias LLVMDiagnosticInfoRef = Pointer<LLVMOpaqueDiagnosticInfo>

public typealias LLVMComdatRef = Pointer<LLVMComdat>

public typealias LLVMModuleFlagEntry = LLVMOpaqueModuleFlagEntry

public typealias LLVMJITEventListenerRef = Pointer<LLVMOpaqueJITEventListener>

public typealias LLVMBinaryRef = Pointer<LLVMOpaqueBinary>

public typealias LLVMMetadataKind = UInt

public typealias LLVMDWARFTypeEncoding = UInt

public typealias LLVMTargetDataRef = Pointer<LLVMOpaqueTargetData>

public typealias LLVMTargetLibraryInfoRef = Pointer<LLVMOpaqueTargetLibraryInfotData>

public typealias LLVMTargetMachineOptionsRef = Pointer<LLVMOpaqueTargetMachineOptions>

public typealias LLVMTargetMachineRef = Pointer<LLVMOpaqueTargetMachine>

public typealias LLVMTargetRef = Pointer<LLVMTarget>

public typealias LLVMErrorRef = Pointer<LLVMOpaqueError>

public typealias LLVMErrorTypeId = Pointer<Unit>

public typealias LLVMOrcJITTargetAddress = ULong

public typealias LLVMOrcExecutorAddress = ULong

public typealias LLVMJITSymbolTargetFlags = UByte

public typealias LLVMOrcExecutionSessionRef = Pointer<LLVMOrcOpaqueExecutionSession>

public typealias LLVMOrcErrorReporterFunction = Pointer<(Ctx: Pointer<Unit>,
    Err: LLVMErrorRef) -> Unit>

public typealias LLVMOrcSymbolStringPoolRef = Pointer<LLVMOrcOpaqueSymbolStringPool>

public typealias LLVMOrcSymbolStringPoolEntryRef = Pointer<LLVMOrcOpaqueSymbolStringPoolEntry>

public typealias LLVMOrcCSymbolFlagsMapPairs = Pointer<LLVMOrcCSymbolFlagsMapPair>

public typealias LLVMOrcCSymbolMapPairs = Pointer<LLVMOrcCSymbolMapPair>

public typealias LLVMOrcCSymbolAliasMapPairs = Pointer<LLVMOrcCSymbolAliasMapPair>

public typealias LLVMOrcJITDylibRef = Pointer<LLVMOrcOpaqueJITDylib>

public typealias LLVMOrcCDependenceMapPairs = Pointer<LLVMOrcCDependenceMapPair>

public typealias LLVMOrcCJITDylibSearchOrder = Pointer<LLVMOrcCJITDylibSearchOrderElement>

public typealias LLVMOrcCLookupSet = Pointer<LLVMOrcCLookupSetElement>

public typealias LLVMOrcMaterializationUnitRef = Pointer<LLVMOrcOpaqueMaterializationUnit>

public typealias LLVMOrcMaterializationResponsibilityRef =
    Pointer<LLVMOrcOpaqueMaterializationResponsibility>

public typealias LLVMOrcMaterializationUnitMaterializeFunction = Pointer<(Ctx: Pointer<Unit>,
    MR: LLVMOrcMaterializationResponsibilityRef) -> Unit>

public typealias LLVMOrcMaterializationUnitDiscardFunction = Pointer<(
  Ctx: Pointer<Unit>,
  JD: LLVMOrcJITDylibRef,
  Symbol: LLVMOrcSymbolStringPoolEntryRef,
) -> Unit>

public typealias LLVMOrcMaterializationUnitDestroyFunction = Pointer<(Ctx: Pointer<Unit>) -> Unit>

public typealias LLVMOrcResourceTrackerRef = Pointer<LLVMOrcOpaqueResourceTracker>

public typealias LLVMOrcDefinitionGeneratorRef = Pointer<LLVMOrcOpaqueDefinitionGenerator>

public typealias LLVMOrcLookupStateRef = Pointer<LLVMOrcOpaqueLookupState>

public typealias LLVMOrcCAPIDefinitionGeneratorTryToGenerateFunction = Pointer<(
  GeneratorObj: LLVMOrcDefinitionGeneratorRef,
  Ctx: Pointer<Unit>,
  LookupState: Pointer<LLVMOrcLookupStateRef>,
  Kind: LLVMOrcLookupKind,
  JD: LLVMOrcJITDylibRef,
  JDLookupFlags: LLVMOrcJITDylibLookupFlags,
  LookupSet: LLVMOrcCLookupSet,
  LookupSetSize: ULong,
) -> LLVMErrorRef>

public typealias LLVMOrcDisposeCAPIDefinitionGeneratorFunction =
    Pointer<(Ctx: Pointer<Unit>) -> Unit>

public typealias LLVMOrcSymbolPredicate = Pointer<(Ctx: Pointer<Unit>,
    Sym: LLVMOrcSymbolStringPoolEntryRef) -> Int>

public typealias LLVMOrcThreadSafeContextRef = Pointer<LLVMOrcOpaqueThreadSafeContext>

public typealias LLVMOrcThreadSafeModuleRef = Pointer<LLVMOrcOpaqueThreadSafeModule>

public typealias LLVMOrcGenericIRModuleOperationFunction = Pointer<(Ctx: Pointer<Unit>,
    M: LLVMModuleRef) -> LLVMErrorRef>

public typealias LLVMOrcJITTargetMachineBuilderRef = Pointer<LLVMOrcOpaqueJITTargetMachineBuilder>

public typealias LLVMOrcObjectLayerRef = Pointer<LLVMOrcOpaqueObjectLayer>

public typealias LLVMOrcObjectLinkingLayerRef = Pointer<LLVMOrcOpaqueObjectLinkingLayer>

public typealias LLVMOrcIRTransformLayerRef = Pointer<LLVMOrcOpaqueIRTransformLayer>

public typealias LLVMOrcIRTransformLayerTransformFunction = Pointer<(
  Ctx: Pointer<Unit>,
  ModInOut: Pointer<LLVMOrcThreadSafeModuleRef>,
  MR: LLVMOrcMaterializationResponsibilityRef,
) -> LLVMErrorRef>

public typealias LLVMOrcObjectTransformLayerRef = Pointer<LLVMOrcOpaqueObjectTransformLayer>

public typealias LLVMOrcObjectTransformLayerTransformFunction = Pointer<(Ctx: Pointer<Unit>,
    ObjInOut: Pointer<LLVMMemoryBufferRef>) -> LLVMErrorRef>

public typealias LLVMOrcIndirectStubsManagerRef = Pointer<LLVMOrcOpaqueIndirectStubsManager>

public typealias LLVMOrcLazyCallThroughManagerRef = Pointer<LLVMOrcOpaqueLazyCallThroughManager>

public typealias LLVMOrcDumpObjectsRef = Pointer<LLVMOrcOpaqueDumpObjects>

public typealias LLVMOrcExecutionSessionLookupHandleResultFunction = Pointer<(
  Err: LLVMErrorRef,
  Result: LLVMOrcCSymbolMapPairs,
  NumPairs: ULong,
  Ctx: Pointer<Unit>,
) -> Unit>

public typealias LLVMGenericValueRef = Pointer<LLVMOpaqueGenericValue>

public typealias LLVMExecutionEngineRef = Pointer<LLVMOpaqueExecutionEngine>

public typealias LLVMMCJITMemoryManagerRef = Pointer<LLVMOpaqueMCJITMemoryManager>

public typealias LLVMMemoryManagerAllocateCodeSectionCallback = Pointer<(
  Opaque: Pointer<Unit>,
  Size: uintptr_t,
  Alignment: UInt,
  SectionID: UInt,
  SectionName: Pointer<Byte>,
) -> Pointer<UByte>>

public typealias LLVMMemoryManagerAllocateDataSectionCallback = Pointer<(
  Opaque: Pointer<Unit>,
  Size: uintptr_t,
  Alignment: UInt,
  SectionID: UInt,
  SectionName: Pointer<Byte>,
  IsReadOnly: LLVMBool,
) -> Pointer<UByte>>

public typealias LLVMMemoryManagerFinalizeMemoryCallback = Pointer<(Opaque: Pointer<Unit>,
    ErrMsg: Pointer<Pointer<Byte>>) -> LLVMBool>

public typealias LLVMMemoryManagerDestroyCallback = Pointer<(Opaque: Pointer<Unit>) -> Unit>

public typealias LLVMMemoryManagerCreateContextCallback =
    Pointer<(CtxCtx: Pointer<Unit>) -> Pointer<Unit>>

public typealias LLVMMemoryManagerNotifyTerminatingCallback =
    Pointer<(CtxCtx: Pointer<Unit>) -> Unit>

public typealias LLVMFatalErrorHandler = Pointer<(Reason: Pointer<Byte>) -> Unit>

public typealias LLVMPassBuilderOptionsRef = Pointer<LLVMOpaquePassBuilderOptions>

public typealias LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction = Pointer<(
  Ctx: Pointer<Unit>,
  ES: LLVMOrcExecutionSessionRef,
  Triple: Pointer<Byte>,
) -> LLVMOrcObjectLayerRef>

public typealias LLVMOrcLLJITBuilderRef = Pointer<LLVMOrcOpaqueLLJITBuilder>

public typealias LLVMOrcLLJITRef = Pointer<LLVMOrcOpaqueLLJIT>

public typealias LLVMDisasmContextRef = Pointer<Unit>

public typealias LLVMOpInfoCallback = Pointer<(
  DisInfo: Pointer<Unit>,
  PC: ULong,
  Offset: ULong,
  OpSize: ULong,
  InstSize: ULong,
  TagType: Int,
  TagBuf: Pointer<Unit>,
) -> Int>

public typealias LLVMSymbolLookupCallback = Pointer<(
  DisInfo: Pointer<Unit>,
  ReferenceValue: ULong,
  ReferenceType: Pointer<ULong>,
  ReferencePC: ULong,
  ReferenceName: Pointer<Pointer<Byte>>,
) -> Pointer<Byte>>

public typealias LLVMRemarkStringRef = Pointer<LLVMRemarkOpaqueString>

public typealias LLVMRemarkDebugLocRef = Pointer<LLVMRemarkOpaqueDebugLoc>

public typealias LLVMRemarkArgRef = Pointer<LLVMRemarkOpaqueArg>

public typealias LLVMRemarkEntryRef = Pointer<LLVMRemarkOpaqueEntry>

public typealias LLVMRemarkParserRef = Pointer<LLVMRemarkOpaqueParser>

public typealias LLVMSectionIteratorRef = Pointer<LLVMOpaqueSectionIterator>

public typealias LLVMSymbolIteratorRef = Pointer<LLVMOpaqueSymbolIterator>

public typealias LLVMRelocationIteratorRef = Pointer<LLVMOpaqueRelocationIterator>

public typealias LLVMObjectFileRef = Pointer<LLVMOpaqueObjectFile>

public typealias LLVMAttributeIndex = UInt

public typealias LLVMFastMathFlags = UInt

public typealias LLVMDiagnosticHandler = Pointer<(`$p0`: LLVMDiagnosticInfoRef,
    `$p1`: Pointer<Unit>) -> Unit>

public typealias LLVMYieldCallback = Pointer<(`$p0`: LLVMContextRef, `$p1`: Pointer<Unit>) -> Unit>

public typealias lto_bool_t = Boolean

public typealias lto_module_t = Pointer<LLVMOpaqueLTOModule>

public typealias lto_code_gen_t = Pointer<LLVMOpaqueLTOCodeGenerator>

public typealias lto_diagnostic_handler_t = Pointer<(
  severity: lto_codegen_diagnostic_severity_t,
  diag: Pointer<Byte>,
  ctxt: Pointer<Unit>,
) -> Unit>

public typealias lto_input_t = Pointer<LLVMOpaqueLTOInput>
