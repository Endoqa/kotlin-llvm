// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class LLVMOrcCSymbolAliasMapEntry(
  public val `$mem`: MemorySegment,
) {
  public var Name: LLVMOrcSymbolStringPoolEntryRef
    get() = LLVMOrcCSymbolAliasMapEntry.NameHandle.get(this.`$mem`, 0L) as MemorySegment
    set(`value`) {
      LLVMOrcCSymbolAliasMapEntry.NameHandle.set(this.`$mem`, 0L, value)
    }

  public var Flags: LLVMJITSymbolFlags
    get() = LLVMJITSymbolFlags(LLVMOrcCSymbolAliasMapEntry.FlagsHandle.invokeExact(this.`$mem`, 0L)
          as MemorySegment)
    set(`value`) {
      MemorySegment.copy(value.`$mem`, 0L, this.Flags.`$mem`, 0L,
          LLVMJITSymbolFlags.layout.byteSize())
    }

  public constructor(gc: Boolean) : this(kotlin.run {
      require(gc) { "Do not call this if gc is not want" }
      Arena.ofAuto().allocate(LLVMOrcCSymbolAliasMapEntry.layout)
  })

  public companion object {
    public val layout: StructLayout = MemoryLayout.structLayout(
      `$RuntimeHelper`.POINTER.withName("Name"),
      LLVMJITSymbolFlags.layout.withName("Flags"),
      java.lang.foreign.MemoryLayout.paddingLayout(6),
    ).withName("LLVMOrcCSymbolAliasMapEntry")

    @JvmField
    public val NameHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("Name"))

    @JvmField
    public val FlagsHandle: MethodHandle =
        layout.sliceHandle(MemoryLayout.PathElement.groupElement("Flags"))

    @JvmStatic
    public fun allocate(alloc: SegmentAllocator): LLVMOrcCSymbolAliasMapEntry =
        LLVMOrcCSymbolAliasMapEntry(alloc.allocate(LLVMOrcCSymbolAliasMapEntry.layout))
  }
}
