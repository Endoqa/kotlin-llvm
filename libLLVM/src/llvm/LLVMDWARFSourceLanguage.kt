// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int
import kotlin.jvm.JvmStatic
import lib.llvm.LLVMDWARFSourceLanguage.Ada2005
import lib.llvm.LLVMDWARFSourceLanguage.Ada2012
import lib.llvm.LLVMDWARFSourceLanguage.Ada83
import lib.llvm.LLVMDWARFSourceLanguage.Ada95
import lib.llvm.LLVMDWARFSourceLanguage.BLISS
import lib.llvm.LLVMDWARFSourceLanguage.BORLAND_Delphi
import lib.llvm.LLVMDWARFSourceLanguage.C
import lib.llvm.LLVMDWARFSourceLanguage.C11
import lib.llvm.LLVMDWARFSourceLanguage.C17
import lib.llvm.LLVMDWARFSourceLanguage.C89
import lib.llvm.LLVMDWARFSourceLanguage.C99
import lib.llvm.LLVMDWARFSourceLanguage.C_plus_plus
import lib.llvm.LLVMDWARFSourceLanguage.C_plus_plus_03
import lib.llvm.LLVMDWARFSourceLanguage.C_plus_plus_11
import lib.llvm.LLVMDWARFSourceLanguage.C_plus_plus_14
import lib.llvm.LLVMDWARFSourceLanguage.C_plus_plus_17
import lib.llvm.LLVMDWARFSourceLanguage.C_plus_plus_20
import lib.llvm.LLVMDWARFSourceLanguage.Cobol74
import lib.llvm.LLVMDWARFSourceLanguage.Cobol85
import lib.llvm.LLVMDWARFSourceLanguage.Crystal
import lib.llvm.LLVMDWARFSourceLanguage.D
import lib.llvm.LLVMDWARFSourceLanguage.Dylan
import lib.llvm.LLVMDWARFSourceLanguage.Fortran03
import lib.llvm.LLVMDWARFSourceLanguage.Fortran08
import lib.llvm.LLVMDWARFSourceLanguage.Fortran18
import lib.llvm.LLVMDWARFSourceLanguage.Fortran77
import lib.llvm.LLVMDWARFSourceLanguage.Fortran90
import lib.llvm.LLVMDWARFSourceLanguage.Fortran95
import lib.llvm.LLVMDWARFSourceLanguage.GOOGLE_RenderScript
import lib.llvm.LLVMDWARFSourceLanguage.Go
import lib.llvm.LLVMDWARFSourceLanguage.Haskell
import lib.llvm.LLVMDWARFSourceLanguage.Java
import lib.llvm.LLVMDWARFSourceLanguage.Julia
import lib.llvm.LLVMDWARFSourceLanguage.Kotlin
import lib.llvm.LLVMDWARFSourceLanguage.Mips_Assembler
import lib.llvm.LLVMDWARFSourceLanguage.Modula2
import lib.llvm.LLVMDWARFSourceLanguage.Modula3
import lib.llvm.LLVMDWARFSourceLanguage.Mojo
import lib.llvm.LLVMDWARFSourceLanguage.OCaml
import lib.llvm.LLVMDWARFSourceLanguage.ObjC
import lib.llvm.LLVMDWARFSourceLanguage.ObjC_plus_plus
import lib.llvm.LLVMDWARFSourceLanguage.OpenCL
import lib.llvm.LLVMDWARFSourceLanguage.PLI
import lib.llvm.LLVMDWARFSourceLanguage.Pascal83
import lib.llvm.LLVMDWARFSourceLanguage.Python
import lib.llvm.LLVMDWARFSourceLanguage.RenderScript
import lib.llvm.LLVMDWARFSourceLanguage.Rust
import lib.llvm.LLVMDWARFSourceLanguage.Swift
import lib.llvm.LLVMDWARFSourceLanguage.UPC
import lib.llvm.LLVMDWARFSourceLanguage.Zig

public enum class LLVMDWARFSourceLanguage(
  public val `value`: Int,
) {
  C89(0),
  C(1),
  Ada83(2),
  C_plus_plus(3),
  Cobol74(4),
  Cobol85(5),
  Fortran77(6),
  Fortran90(7),
  Pascal83(8),
  Modula2(9),
  Java(10),
  C99(11),
  Ada95(12),
  Fortran95(13),
  PLI(14),
  ObjC(15),
  ObjC_plus_plus(16),
  UPC(17),
  D(18),
  Python(19),
  OpenCL(20),
  Go(21),
  Modula3(22),
  Haskell(23),
  C_plus_plus_03(24),
  C_plus_plus_11(25),
  OCaml(26),
  Rust(27),
  C11(28),
  Swift(29),
  Julia(30),
  Dylan(31),
  C_plus_plus_14(32),
  Fortran03(33),
  Fortran08(34),
  RenderScript(35),
  BLISS(36),
  Kotlin(37),
  Zig(38),
  Crystal(39),
  C_plus_plus_17(40),
  C_plus_plus_20(41),
  C17(42),
  Fortran18(43),
  Ada2005(44),
  Ada2012(45),
  Mojo(46),
  Mips_Assembler(47),
  GOOGLE_RenderScript(48),
  BORLAND_Delphi(49),
  ;

  public companion object {
    @JvmStatic
    public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            LLVMDWARFSourceLanguage::class.java,
            "fromInt",
            MethodType.methodType(LLVMDWARFSourceLanguage::class.java, Int::class.java)
        )

    @JvmStatic
    public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            LLVMDWARFSourceLanguage::class.java,
            "value",
            Int::class.java
        )

    @JvmStatic
    public fun fromInt(`value`: Int): LLVMDWARFSourceLanguage = when (value) {
      C89.value -> C89
      C.value -> C
      Ada83.value -> Ada83
      C_plus_plus.value -> C_plus_plus
      Cobol74.value -> Cobol74
      Cobol85.value -> Cobol85
      Fortran77.value -> Fortran77
      Fortran90.value -> Fortran90
      Pascal83.value -> Pascal83
      Modula2.value -> Modula2
      Java.value -> Java
      C99.value -> C99
      Ada95.value -> Ada95
      Fortran95.value -> Fortran95
      PLI.value -> PLI
      ObjC.value -> ObjC
      ObjC_plus_plus.value -> ObjC_plus_plus
      UPC.value -> UPC
      D.value -> D
      Python.value -> Python
      OpenCL.value -> OpenCL
      Go.value -> Go
      Modula3.value -> Modula3
      Haskell.value -> Haskell
      C_plus_plus_03.value -> C_plus_plus_03
      C_plus_plus_11.value -> C_plus_plus_11
      OCaml.value -> OCaml
      Rust.value -> Rust
      C11.value -> C11
      Swift.value -> Swift
      Julia.value -> Julia
      Dylan.value -> Dylan
      C_plus_plus_14.value -> C_plus_plus_14
      Fortran03.value -> Fortran03
      Fortran08.value -> Fortran08
      RenderScript.value -> RenderScript
      BLISS.value -> BLISS
      Kotlin.value -> Kotlin
      Zig.value -> Zig
      Crystal.value -> Crystal
      C_plus_plus_17.value -> C_plus_plus_17
      C_plus_plus_20.value -> C_plus_plus_20
      C17.value -> C17
      Fortran18.value -> Fortran18
      Ada2005.value -> Ada2005
      Ada2012.value -> Ada2012
      Mojo.value -> Mojo
      Mips_Assembler.value -> Mips_Assembler
      GOOGLE_RenderScript.value -> GOOGLE_RenderScript
      BORLAND_Delphi.value -> BORLAND_Delphi
      else -> error("enum not found")
    }
  }
}
