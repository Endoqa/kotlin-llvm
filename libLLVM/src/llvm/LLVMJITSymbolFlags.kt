// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Byte
import kotlin.UByte
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class LLVMJITSymbolFlags(
  public val `$mem`: MemorySegment,
) {
  public var GenericFlags: UByte
    get() = (LLVMJITSymbolFlags.GenericFlagsHandle.get(this.`$mem`, 0L) as Byte).toUByte()
    set(`value`) {
      LLVMJITSymbolFlags.GenericFlagsHandle.set(this.`$mem`, 0L,value.toByte())
    }

  public var TargetFlags: UByte
    get() = (LLVMJITSymbolFlags.TargetFlagsHandle.get(this.`$mem`, 0L) as Byte).toUByte()
    set(`value`) {
      LLVMJITSymbolFlags.TargetFlagsHandle.set(this.`$mem`, 0L,value.toByte())
    }

  public constructor(gc: Boolean) : this(kotlin.run {
      require(gc) { "Do not call this if gc is not want" }
      Arena.ofAuto().allocate(LLVMJITSymbolFlags.layout)
  })

  public companion object {
    public val layout: StructLayout = MemoryLayout.structLayout(
      ValueLayout.JAVA_BYTE.withName("GenericFlags"),
      ValueLayout.JAVA_BYTE.withName("TargetFlags"),
    ).withName("LLVMJITSymbolFlags")

    @JvmField
    public val GenericFlagsHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("GenericFlags"))

    @JvmField
    public val TargetFlagsHandle: VarHandle =
        layout.varHandle(MemoryLayout.PathElement.groupElement("TargetFlags"))

    @JvmStatic
    public fun allocate(alloc: SegmentAllocator): LLVMJITSymbolFlags =
        LLVMJITSymbolFlags(alloc.allocate(LLVMJITSymbolFlags.layout))
  }
}
