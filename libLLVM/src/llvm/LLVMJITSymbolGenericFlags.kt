// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int
import kotlin.UInt
import kotlin.jvm.JvmStatic
import lib.llvm.LLVMJITSymbolGenericFlags.Callable
import lib.llvm.LLVMJITSymbolGenericFlags.Exported
import lib.llvm.LLVMJITSymbolGenericFlags.MaterializationSideEffectsOnly
import lib.llvm.LLVMJITSymbolGenericFlags.None
import lib.llvm.LLVMJITSymbolGenericFlags.Weak

public enum class LLVMJITSymbolGenericFlags(
  public val `value`: UInt,
) {
  None((0).toUInt()),
  Exported(1U shl 0),
  Weak(1U shl 1),
  Callable(1U shl 2),
  MaterializationSideEffectsOnly(1U shl 3),
  ;

  public companion object {
    @JvmStatic
    public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            LLVMJITSymbolGenericFlags::class.java,
            "fromInt",
            MethodType.methodType(LLVMJITSymbolGenericFlags::class.java, Int::class.java)
        )

    @JvmStatic
    public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            LLVMJITSymbolGenericFlags::class.java,
            "value",
            Int::class.java
        )

    @JvmStatic
    public fun fromInt(`value`: UInt): LLVMJITSymbolGenericFlags = when (value) {
      None.value -> None
      Exported.value -> Exported
      Weak.value -> Weak
      Callable.value -> Callable
      MaterializationSideEffectsOnly.value -> MaterializationSideEffectsOnly
      else -> error("enum not found")
    }
  }
}
