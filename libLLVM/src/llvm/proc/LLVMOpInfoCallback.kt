// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.llvm.proc

import java.lang.foreign.Arena
import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.MemorySegment
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import kotlin.Int
import kotlin.ULong
import kotlin.Unit
import kotlin.jvm.JvmStatic
import lib.llvm.Pointer
import lib.llvm.`$RuntimeHelper`

public fun interface LLVMOpInfoCallback {
  public fun invoke(
    DisInfo: Pointer<Unit>,
    PC: ULong,
    Offset: ULong,
    OpSize: ULong,
    InstSize: ULong,
    TagType: Int,
    TagBuf: Pointer<Unit>,
  ): Int

  public fun allocate(arena: Arena): MemorySegment =
      Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

  public companion object {
    @JvmStatic
    public val invokeHandle: MethodHandle =
        MethodHandles.lookup().unreflect(LLVMOpInfoCallback::class.java.methods.find {
          it.name == "invoke"}
        )

    @JvmStatic
    public val fd: FunctionDescriptor = FunctionDescriptor.of(
      ValueLayout.JAVA_INT,
      `$RuntimeHelper`.POINTER,
      ValueLayout.JAVA_LONG,
      ValueLayout.JAVA_LONG,
      ValueLayout.JAVA_LONG,
      ValueLayout.JAVA_LONG,
      ValueLayout.JAVA_INT,
      `$RuntimeHelper`.POINTER,
    )
  }
}
